--- PROJECT STRUCTURE ---
.
├── backend
│   ├── api.md
│   ├── app.py
│   ├── code_architect.md
│   ├── config.py
│   ├── controllers
│   │   ├── __init__.py
│   │   ├── anime_controller.py
│   │   ├── aniwatch_controller.py
│   │   ├── data_controller.py
│   │   ├── llm_controller.py
│   │   ├── news_controller.py
│   │   └── one_piece_controller.py
│   ├── embeddings
│   │   ├── __init__.py
│   │   ├── ollama_embedder.py
│   │   └── vector_store.py
│   ├── frontend_integration_guide.md
│   ├── globals.py
│   ├── one_piece_news.json
│   ├── project_api_detail.md
│   ├── project_goals.md
│   ├── project_overview.md
│   ├── requirements.txt
│   ├── routes
│   │   ├── __init__.py
│   │   ├── anime_api_routes.py
│   │   ├── aniwatch_api_routes.py
│   │   ├── data_api_routes.py
│   │   ├── llm_api_routes.py
│   │   ├── news_api_routes.py
│   │   ├── one_piece_api_routes.py
│   │   └── suggest_questions.py
│   ├── scripts
│   │   ├── check_flask_status.py
│   │   ├── check_llm_status.py
│   │   └── list_gemini_models.py
│   ├── services
│   │   ├── __init__.py
│   │   ├── anime_api_service.py
│   │   ├── aniwatch_api_service.py
│   │   ├── ann_api_service.py
│   │   ├── clustering_service.py
│   │   ├── data_embedding_service.py
│   │   ├── gemini_llm_service.py
│   │   ├── ollama_llm_service.py
│   │   └── one_piece_api_service.py
│   ├── test_chat.py
│   ├── utils
│   │   ├── __init__.py
│   │   └── text_processing.py
│   └── vector_db.pkl.gz
├── crawler.sh
├── jsconfig.json
├── llm_project_context.txt
├── mushi-frontend
│   ├── eslint.config.js
│   ├── index.html
│   ├── package-lock.json
│   ├── package.json
│   ├── pnpm-lock.yaml
│   ├── postcss.config.js
│   ├── public
│   │   ├── captured.png
│   │   ├── ginny_mad.png
│   │   ├── hair_flash.png
│   │   ├── heart_attack.png
│   │   ├── kuma_dad_dead.png
│   │   ├── luffy_eat.png
│   │   ├── luffy_goggles.png
│   │   ├── luffy_gross.png
│   │   ├── luffy_gross2.png
│   │   ├── luffy_idea.png
│   │   ├── luffy_sorring.png
│   │   ├── punk_nose.png
│   │   ├── vite.svg
│   │   └── zoro_gross.png
│   ├── README.md
│   ├── src
│   │   ├── App.css
│   │   ├── App.jsx
│   │   ├── assets
│   │   │   └── react.svg
│   │   ├── components
│   │   │   ├── anime
│   │   │   │   ├── actors
│   │   │   │   ├── AnimeHomeDashboard.jsx
│   │   │   │   ├── AnimeQuickInfoCard.jsx
│   │   │   │   ├── AnimeTopSearchList.jsx
│   │   │   │   ├── AnimeTopTenList.jsx
│   │   │   │   ├── category
│   │   │   │   ├── characters
│   │   │   │   ├── details
│   │   │   │   ├── player
│   │   │   │   └── searchbar
│   │   │   ├── banner
│   │   │   │   ├── Banner.css
│   │   │   │   └── Banner.jsx
│   │   │   ├── cart
│   │   │   │   ├── Cart.css
│   │   │   │   └── Cart.jsx
│   │   │   ├── categorycard
│   │   │   │   ├── CategoryCard.css
│   │   │   │   └── CategoryCard.jsx
│   │   │   ├── chat
│   │   │   │   ├── ChatModal.jsx
│   │   │   │   ├── ChatWindow.jsx
│   │   │   │   ├── MushiFab.jsx
│   │   │   │   ├── QuestionPrompts.jsx
│   │   │   │   ├── SpeechToText.jsx
│   │   │   │   └── SpoilerText.jsx
│   │   │   ├── common
│   │   │   │   └── LLMInfoModal.jsx
│   │   │   ├── hooks
│   │   │   │   ├── useDebounce.js
│   │   │   │   └── useSearch.js
│   │   │   ├── llm
│   │   │   │   └── ProviderSelector.jsx
│   │   │   ├── navigation
│   │   │   │   ├── FooterNav.jsx
│   │   │   │   ├── Sidebar.jsx
│   │   │   │   └── TopNav.jsx
│   │   │   ├── one-piece
│   │   │   │   ├── OnePieceCharacterList.jsx
│   │   │   │   ├── OnePieceCrewsList.jsx
│   │   │   │   ├── OnePieceDevilFruitsList.jsx
│   │   │   │   ├── OnePieceIslandsList.jsx
│   │   │   │   └── OnePieceSagaList.jsx
│   │   │   ├── spotlight
│   │   │   │   ├── Spotlight.css
│   │   │   │   └── Spotlight.jsx
│   │   │   └── trending
│   │   │       └── Trending.jsx
│   │   ├── index.css
│   │   ├── main.jsx
│   │   ├── services
│   │   │   └── api.js
│   │   └── views
│   │       ├── AdminView.jsx
│   │       ├── AnimeCategoryView.jsx
│   │       ├── AnimeDetailView.jsx
│   │       ├── AnimeSearchView.jsx
│   │       ├── AtoZListView.jsx
│   │       ├── CharacterDetailView.jsx
│   │       ├── DataView.jsx
│   │       ├── HomeView.jsx
│   │       ├── MushiAiView.jsx
│   │       ├── SplashScreen.jsx
│   │       ├── VoiceActorDetailView.jsx
│   │       └── WatchView.jsx
│   ├── tailwind.config.js
│   └── vite.config.js
└── README.md

33 directories, 121 files

--- END PROJECT STRUCTURE ---

--- FILE_START: ./jsconfig.json ---
{
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@/*": ["./*"]
      }
    }
  }
  
--- FILE_END: ./jsconfig.json ---

--- FILE_START: ./mushi-frontend/index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

--- FILE_END: ./mushi-frontend/index.html ---

--- FILE_START: ./mushi-frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      screens: {
        "custom-md": "600px",
        "custom-xl": "1200px",
        "ultra-wide":"1660px",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          1: "hsl(var(--chart-1))",
          2: "hsl(var(--chart-2))",
          3: "hsl(var(--chart-3))",
          4: "hsl(var(--chart-4))",
          5: "hsl(var(--chart-5))",
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

--- FILE_END: ./mushi-frontend/tailwind.config.js ---

--- FILE_START: ./mushi-frontend/vite.config.js ---
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./"),
    },
  },
})

--- FILE_END: ./mushi-frontend/vite.config.js ---

--- FILE_START: ./mushi-frontend/README.md ---
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

--- FILE_END: ./mushi-frontend/README.md ---

--- FILE_START: ./mushi-frontend/.gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--- FILE_END: ./mushi-frontend/.gitignore ---

--- FILE_START: ./mushi-frontend/package.json ---
{
  "name": "mushi-frontend",
   "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "host": "vite --host"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.6.0",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.6.0",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@radix-ui/react-icons": "^1.3.0",
    "artplayer": "^5.2.3",
    "artplayer-plugin-chapter": "^1.0.0",
    "artplayer-plugin-hls-control": "^1.0.1",
    "axios": "^1.7.7",
    "cheerio": "^1.0.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "hls.js": "^1.5.17",
    "lucide-react": "^0.447.0",
    "react": "^18.3.1",
    "react-content-loader": "^7.0.2",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-lazy-load": "^4.0.1",
    "react-router-dom": "^6.26.2",
    "styled-components": "^6.1.13",
    "swiper": "^11.2.5",
    "tailwind-merge": "^2.5.3",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13",
    "vite": "^5.4.1"
  }
}

--- FILE_END: ./mushi-frontend/package.json ---

--- FILE_START: ./mushi-frontend/eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- FILE_END: ./mushi-frontend/eslint.config.js ---

--- FILE_START: ./mushi-frontend/postcss.config.js ---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- FILE_END: ./mushi-frontend/postcss.config.js ---

--- FILE_START: ./mushi-frontend/src/App.css ---

--- FILE_END: ./mushi-frontend/src/App.css ---

--- FILE_START: ./mushi-frontend/src/index.css ---
/* mushi-frontend/src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #201f31;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  overflow-y: scroll;
}
.scrollbar-visible {
  scrollbar-width: auto;
  scrollbar-color: #888 #333;
}
.scrollbar-visible::-webkit-scrollbar {
  width: 20px;
}

.scrollbar-visible::-webkit-scrollbar-thumb {
  background-color: #888;
}

.scrollbar-visible::-webkit-scrollbar-track {
  background: black;
}
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
::-webkit-scrollbar {
  width: 16px;
}

::-webkit-scrollbar-track {
  background: #23222c;
}

::-webkit-scrollbar-thumb {
  background: #65646a;
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

.is-visible {
  opacity: 1;
}
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
.dot {
  width: 4px;
  height: 4px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  display: inline-block;
}

--- FILE_END: ./mushi-frontend/src/index.css ---

--- FILE_START: ./mushi-frontend/src/components/spotlight/Spotlight.jsx ---
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/autoplay";
import "swiper/css/navigation";
import "./Spotlight.css";
import Banner from "../banner/Banner";

const Spotlight = ({ spotlights }) => {
  return (
    <>
      <div className="relative h-[600px] max-[1390px]:h-[530px] max-[1300px]:h-[500px] max-md:h-[420px]">
        <div className="absolute right-[10px] bottom-0 flex flex-col space-y-2 z-10 max-[575px]:hidden">
          <div className="button-next"></div>
          <div className="button-prev"></div>
        </div>
        {spotlights && spotlights.length > 0 ? (
          <>
            <Swiper
              spaceBetween={0}
              slidesPerView={1}
              loop={true}
              allowTouchMove={false}
              navigation={{
                nextEl: ".button-next",
                prevEl: ".button-prev",
              }}
              autoplay={{
                delay: 3000,
                disableOnInteraction: false,
              }}
              modules={[Navigation, Autoplay]}
              className="h-[600px] max-[1390px]:h-full"
              style={{
                "--swiper-pagination-bullet-inactive-color": "#ffffff",
                "--swiper-pagination-bullet-inactive-opacity": "1",
              }}
            >
              {spotlights.map((item, index) => (
                <SwiperSlide className="text-black relative" key={index}>
                  <Banner item={item} index={index} />
                </SwiperSlide>
              ))}
            </Swiper>
          </>
        ) : (
          <p>No spotlights to show.</p>
        )}
      </div>
    </>
  );
};

export default Spotlight;

--- FILE_END: ./mushi-frontend/src/components/spotlight/Spotlight.jsx ---

--- FILE_START: ./mushi-frontend/src/components/spotlight/Spotlight.css ---
.swiper {
  width: 100%;
}
.swiper-slide {
  font-size: 18px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
}
.button-prev,
.button-next {
  width: 40px;
  height: 40px;
  color: white;
  background-color: #383747;
  border-radius: 7px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  transition: all 0.3s ease-out;
}
.button-prev:hover,
.button-next:hover {
  background-color: #ffbade;
  color: #383747;
}

.button-prev::after {
  font-family: "Font Awesome 5 Free";
  content: "\f053";
  font-weight: 900;
  font-size: 14px;
}

.button-next::after {
  font-family: "Font Awesome 5 Free";
  content: "\f054";
  font-weight: 900;
  font-size: 14px;
}

.swiper-horizontal > .swiper-pagination-bullets {
  display: none;
}
.swiper-pagination-bullet-active {
  background-color: rgb(239, 213, 22) !important;
}
@media only screen and (max-width: 575px) {
  .swiper-horizontal > .swiper-pagination-bullets {
    /* bottom: var(--swiper-pagination-bottom, 8px); */
    bottom: 0;
    right: 10px !important ;
    left: auto !important;
    width: 20px !important;
    bottom: 5px !important;
    display: flex !important;
    gap: 18px;
    align-items: center;
    justify-content: center;
    height: 80%;
    flex-direction: column;
  }
}

--- FILE_END: ./mushi-frontend/src/components/spotlight/Spotlight.css ---

--- FILE_START: ./mushi-frontend/src/components/llm/ProviderSelector.jsx ---
// mushi-frontend/src/components/llm/ProviderSelector.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // This correctly imports the 'api' object from its separate file

function ProviderSelector() {
  const [providers, setProviders] = useState({});
  // Initialize selectedProvider to the desired default ('ollama_anime').
  // It will be updated by the API call if a different provider is currently active on the backend.
  const [selectedProvider, setSelectedProvider] = useState('ollama_anime');
  const [feedback, setFeedback] = useState('');
  const [isLoading, setIsLoading] = useState(true); // New loading state

  // Fetch the available providers and the current selected provider when the component mounts
  useEffect(() => {
    const fetchLLMInfo = async () => {
      setIsLoading(true); // Start loading
      try {
        // Fetch all available providers
        const providerData = await api.llm.getProviders();
        setProviders(providerData);

        // Fetch the currently selected provider from the backend
        const currentProviderResponse = await api.llm.getCurrentProvider();

        // If the backend successfully returns a current provider, use it.
        // Otherwise, stick with our initial default ('ollama_anime').
        if (currentProviderResponse && currentProviderResponse.current_provider) {
          setSelectedProvider(currentProviderResponse.current_provider);
        } else {
          // If backend did not return a specific current provider,
          // the component will remain at its initialized 'ollama_anime' state.
          console.warn("Backend did not return a specific current LLM provider. Displaying initial default.");
        }
      } catch (error) {
        console.error('Failed to load LLM providers or current provider:', error);
        setFeedback('Failed to load LLM providers or current provider.');
        // If there's an error fetching, the component will remain at its initialized 'ollama_anime' state.
        // No explicit setSelectedProvider('ollama_anime') needed here as it's the initial state.
      } finally {
        setIsLoading(false); // End loading
      }
    };
    fetchLLMInfo();
  }, []); // Empty dependency array means this effect runs once on mount

  const handleProviderChange = async (event) => {
    const newProvider = event.target.value;
    setSelectedProvider(newProvider); // Optimistically update UI
    setFeedback('Setting provider...');
    try {
      const result = await api.llm.setProvider(newProvider);
      setFeedback(result.message); // e.g., "LLM provider set to ollama_anime"
    } catch (error) {
      console.error('Failed to set LLM provider:', error);
      setFeedback(`Error setting provider: ${error.message || 'Unknown error'}`);
    }
  };

  return (
    <div className="bg-gray-800 p-3 rounded-lg shadow-md mb-4">
      <label htmlFor="llm-provider" className="block text-sm font-medium text-gray-300 mb-2">
        Choose LLM Provider
      </label>
      {isLoading ? (
        <p className="text-gray-400">Loading providers...</p>
      ) : (
        <select
          id="llm-provider"
          value={selectedProvider}
          onChange={handleProviderChange}
          className="w-full bg-gray-700 border border-gray-600 rounded-md p-2 text-white focus:ring-2 focus:ring-indigo-500"
          disabled={Object.keys(providers).length === 0}
        >
          {/* The "Select a provider" option is now less likely to be seen if selectedProvider defaults correctly.
              It serves as a fallback if selectedProvider is somehow an empty string,
              or if no options are available. */}
          <option value="" disabled>Select a provider</option>
          {Object.entries(providers).map(([key, name]) => (
            <option key={key} value={key}>
              {name}
            </option>
          ))}
        </select>
      )}
      {feedback && <p className="text-xs text-gray-400 mt-2">{feedback}</p>}
    </div>
  );
}

export default ProviderSelector;

--- FILE_END: ./mushi-frontend/src/components/llm/ProviderSelector.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/ChatModal.jsx ---
import React, { useEffect } from 'react';
import ChatWindow from './ChatWindow';
import { X } from 'lucide-react';

const ChatModal = ({ isOpen, onClose }) => {

  // Effect to handle 'Escape' key press
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]);


  return (
    // Overlay
    <div
      className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out z-[100] ${
        isOpen ? 'bg-opacity-70' : 'bg-opacity-0 pointer-events-none'
      }`}
      onClick={onClose}
    >
      {/* Panel */}
      <div
        className={`fixed top-0 right-0 h-full w-full max-w-2xl bg-neutral-950 shadow-2xl transform transition-transform duration-300 ease-in-out flex flex-col ${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        }`}
        onClick={(e) => e.stopPropagation()} // Prevent closing modal when clicking inside
      >
        <div className="flex justify-between items-center p-4 border-b border-white/10 flex-shrink-0">
            <h2 className="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-pink-400 to-purple-400">Ask Mushi</h2>
            <button
                onClick={onClose}
                className="text-gray-400 hover:text-white p-2 rounded-full hover:bg-white/10"
                aria-label="Close chat"
            >
                <X size={24} />
            </button>
        </div>
        <div className="flex-grow overflow-hidden p-2">
            <ChatWindow />
        </div>
      </div>
    </div>
  );
};

export default ChatModal;

--- FILE_END: ./mushi-frontend/src/components/chat/ChatModal.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/SpoilerText.jsx ---
// mushi-frontend/src/components/chat/SpoilerText.jsx
import React, { useState } from 'react';

/**
 * Renders text that can be "spoiled" (hidden) or revealed.
 * The hidden text appears grayed out with "redacted" written over it.
 * Clicking the redacted text reveals the original content.
 *
 * @param {object} props
 * @param {string} props.children - The actual spoiler content to be displayed or hidden.
 * @param {boolean} props.globalShieldActive - If true, forces the spoiler text to be hidden and disables individual toggling.
 */
function SpoilerText({ children, globalShieldActive }) {
  // Local state to manage individual spoiler reveal, only active when global shield is off
  const [isRevealed, setIsRevealed] = useState(false);

  // Determine the effective revealed state:
  // If globalShieldActive is true, it forces the text to be hidden.
  // Otherwise, use the local 'isRevealed' state.
  const effectiveIsRevealed = globalShieldActive ? false : isRevealed;

  const toggleReveal = () => {
    // Only allow local toggling if the global spoiler shield is inactive
    if (!globalShieldActive) {
      setIsRevealed(prev => !prev);
    }
  };

  return (
    <span
      className={`relative inline-block cursor-pointer transition-all duration-200 ${
        effectiveIsRevealed ? 'text-gray-200' : 'text-transparent bg-purple-500/50 rounded px-1' // Softened background color
      }`}
      onClick={toggleReveal}
      title={effectiveIsRevealed ? "Click to hide spoiler" : "Click to reveal spoiler"}
    >
      {effectiveIsRevealed ? (
        children
      ) : (
        <span className="absolute inset-0 flex items-center justify-center text-purple-900 text-xs font-bold select-none pointer-events-none"> {/* Adjusted text color */}
          redacted
        </span>
      )}
      <span className={effectiveIsRevealed ? '' : 'blur-sm'}>
        {children}
      </span>
    </span>
  );
}

export default SpoilerText;

--- FILE_END: ./mushi-frontend/src/components/chat/SpoilerText.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/QuestionPrompts.jsx ---
import React from 'react';

/**
 * Renders a row of follow-up question buttons below the chat.
 * When clicked, each button will call `onQuestionClick` with the question text.
 *
 * @param {object} props
 * @param {string[]} props.questions - Array of follow-up question strings.
 * @param {(question: string) => void} props.onQuestionClick - Callback when a suggestion is clicked.
 */
function QuestionPrompts({ questions, onQuestionClick }) {
  if (!Array.isArray(questions) || questions.length === 0) return null;

  return (
    <div className="px-4 py-3 border border-purple-500 rounded-xl mb-4 bg-white/5 shadow-lg"> {/* Softened border, rounded, background, added shadow */}
      <p className="text-sm text-gray-300 mb-2">Suggested questions based on your last query:</p>
      <div className="flex flex-wrap gap-3"> {/* Increased gap for better spacing */}
        {questions.map((question, index) => (
          <button
            key={index}
            onClick={() => onQuestionClick(question)}
            className="bg-white/10 hover:bg-purple-600 text-white text-sm font-medium py-2 px-4 rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-pink-400 shadow-md" // Softened bg, focus ring, added shadow
          >
            {/* Added a span with text-indigo-300 for the actual question text */}
            Question Suggestion: <span className="text-pink-300">{question}</span> {/* Adjusted color */}
          </button>
        ))}
      </div>
    </div>
  );
}

export default QuestionPrompts;

--- FILE_END: ./mushi-frontend/src/components/chat/QuestionPrompts.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/MushiFab.jsx ---
import React from 'react';
import { PiSnail } from "react-icons/pi";

const MushiFab = ({ onClick }) => {
  return (
    <button
      onClick={onClick}
      className="fixed bottom-6 right-6 bg-gradient-to-r from-purple-500 to-pink-500 text-white p-4 rounded-full shadow-lg hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background focus:ring-pink-400 transition-all duration-200 z-50 group"
      title="Ask Mushi"
      aria-label="Ask Mushi AI"
    >
      <PiSnail size={28} className="transition-transform group-hover:rotate-12" />
    </button>
  );
};

export default MushiFab;

--- FILE_END: ./mushi-frontend/src/components/chat/MushiFab.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/ChatWindow.jsx ---
// mushi-frontend/src/components/chat/ChatWindow.jsx
import React, { useState, useRef, useEffect, useMemo } from 'react';
import { api } from '../../services/api';
import QuestionPrompts from './QuestionPrompts';
import SpoilerText from './SpoilerText';
import { Send, Bot, User, XCircle, Edit3, Eye, EyeOff, Mic, StopCircle, Copy } from 'lucide-react';
import SpeechToText from './SpeechToText';

// llm-ui imports for streaming and markdown rendering
import { useLLMOutput, throttleBasic } from "@llm-ui/react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import { markdownLookBack } from "@llm-ui/markdown";

// --- llm-ui Components and Blocks ---

// Markdown Fallback Component: Renders general markdown content
const MarkdownComponent = ({ blockMatch }) => {
  const markdown = blockMatch.output;
  return <ReactMarkdown remarkPlugins={[remarkGfm]}>{markdown}</ReactMarkdown>;
};

// Custom Spoiler Block Component: Renders content within <spoiler> tags using SpoilerText
const SpoilerBlockComponent = ({ blockMatch }) => {
  return (
    <SpoilerText globalShieldActive={blockMatch.block.props.globalShieldActive}>
      {blockMatch.outputRaw}
    </SpoilerText>
  );
};

// Custom Spoiler Block Definition for llm-ui
const baseSpoilerBlock = {
  findCompleteMatch: (llmOutput) => {
    const match = llmOutput.match(/<spoiler>(.*?)<\/spoiler>/s);
    if (match) {
      return {
        startIndex: match.index,
        endIndex: match.index + match[0].length,
        outputRaw: match[1],
      };
    }
    return undefined;
  },
  findPartialMatch: (llmOutput) => {
    const match = llmOutput.match(/<spoiler>(.*)/s);
    if (match) {
      return {
        startIndex: match.index,
        endIndex: llmOutput.length,
        outputRaw: match[1],
      };
    }
    return undefined;
  },
  component: SpoilerBlockComponent,
  lookBack: (params) => {
    return {
      output: params.output,
      visibleText: params.output,
    };
  },
  props: { globalShieldActive: false },
};

// Updated: Custom block for generic "NOTE"s embedded in main response
const GenericNoteBlockComponent = ({ blockMatch }) => {
  const fullNoteString = blockMatch.outputRaw.trim(); // The complete string matched by the block

  // Robustly extract the note type and content from the full matched string
  const typeMatch = fullNoteString.match(/^([A-Z_]+):/);
  const noteType = typeMatch ? typeMatch[1] : 'GENERIC_NOTE';
  const contentWithoutType = typeMatch ? fullNoteString.substring(typeMatch[0].length).trim() : fullNoteString;

  // Dynamically create a user-friendly heading based on the note type
  const displayHeading = noteType.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());

  // Function to robustly format list content for ReactMarkdown
  const formatListContent = (content) => {
    // This regex looks for `- **` pattern as the start of a new list item.
    // It will prepend a newline before each occurrence of `- **` that is not at the very beginning
    // to force markdown to interpret them as new list items.
    let formatted = content.replace(/([^\n])-\s?\*\*/g, '$1\n- **');

    // Ensure the very first item also starts on its own line and with a markdown list prefix.
    // This handles cases where the LLM might output "NOTE TYPE:Item 1- Item 2"
    if (!formatted.startsWith('- ')) {
        formatted = `- ${formatted}`;
    }
    // Remove any trailing empty list items or excessive newlines at the end
    formatted = formatted.replace(/(\n- \s*)*$/, '');

    // Ensure overall content starts with a newline for proper markdown interpretation if it's a list
    return formatted.startsWith('\n') ? formatted : `\n${formatted}`;
  };

  return (
    <div className="mt-4 pt-2 border-t border-gray-600"> {/* Add some top margin and border for separation */}
      <p className="font-bold underline mb-1 text-purple-300">{displayHeading}:</p> {/* Dynamic heading */}
      {/* Prepend a newline to ensure ReactMarkdown interprets subsequent hyphens as a list */}
      <ReactMarkdown remarkPlugins={[remarkGfm]}>{formatListContent(contentWithoutType)}</ReactMarkdown>
    </div>
  );
};

// Updated: Definition for the Generic Note Block
const baseGenericNoteBlock = {
  findCompleteMatch: (llmOutput) => {
    // Look for "NOTE TYPE:" and capture the type and everything after it
    const match = llmOutput.match(/NOTE\s+([A-Z_]+):(.*)/s);
    if (match) {
      return {
        startIndex: match.index,
        endIndex: llmOutput.length, // Consumes the rest of the output
        outputRaw: match[0], // Pass the full matched string to the component for parsing
        props: { noteType: match[1] } // Capture the note type (used for heading generation, but component is robust without it)
      };
    }
    return undefined;
  },
  findPartialMatch: (llmOutput) => {
    // Partial match if the prefix is found and content follows
    const match = llmOutput.match(/NOTE\s+([A-Z_]+):(.*)/s);
    if (match) {
      return {
        startIndex: match.index,
        endIndex: llmOutput.length,
        outputRaw: match[0], // Pass the full matched string
        props: { noteType: match[1] }
      };
    }
    return undefined;
  },
  component: GenericNoteBlockComponent,
  lookBack: (params) => ({
    output: params.output,
    visibleText: params.output,
  }),
};


function ChatWindow({ initialQuery }) {
  const [messages, setMessages] = useState([
    { sender: 'bot', text: 'Welcome to Mushi AI. How can I help you today?', id: 'welcome-message' }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [suggestedQuestions, setSuggestedQuestions] = useState([]);
  const [similarAnimeNote, setSimilarAnimeNote] = useState(null);
  const [isSpoilerShieldActive, setIsSpoilerShieldActive] = useState(false);
  const [isSpeechActive, setIsSpeechActive] = useState(false);
  const [speechRecognitionError, setSpeechRecognitionError] = useState('');
  const abortControllerRef = useRef(null);

  // States for the currently streaming bot message (only for live display)
  const [currentStreamingBotMessage, setCurrentStreamingBotMessage] = useState('');
  const [isLLMStreamFinished, setIsLLMStreamFinished] = useState(false);


  // Ref for the messages container to enable auto-scrolling
  const messagesEndRef = useRef(null);
  // State for copy feedback
  const [copiedMessageId, setCopiedMessageId] = useState(null);

  // States for in-place editing
  const [editingMessageId, setEditingMessageId] = useState(null);
  const [editingMessageText, setEditingMessageText] = useState('');
  const originalMessageTextRef = useRef(null);
  const textareaRef = useRef(null);

  // Store the last user query for suggested questions
  const lastUserQueryForSuggestions = useRef('');


  // Effect to scroll to the bottom of the chat when messages change
  // Removed currentStreamingBotMessage from dependencies to prevent excessive scrolling during streaming.
  // Scrolling will now primarily happen when a message is finalized or suggestions appear.
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });
  }, [messages, suggestedQuestions, similarAnimeNote]);

  // Effect to adjust textarea height when editingMessageText changes
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [editingMessageText, editingMessageId]);

  useEffect(() => {
    if (initialQuery) {
      console.log("Mushi received a preloaded query!~", initialQuery);
      handleSendMessage(initialQuery);
    }
  }, [initialQuery]); // This effect runs only when the initialQuery prop changes


  // llm-ui Throttle function configuration - OPTIMIZED FOR EVEN SMOOTHER TYPING EFFECT
  const throttle = useMemo(() => throttleBasic({
    readAheadChars: 3,        // Increased to 3 for slightly larger chunks, reducing re-render strain
    targetBufferChars: 3,     // Keep the visible buffer consistent with readAhead
    adjustPercentage: 0.2,    // Allow for slightly larger speed adjustments
    frameLookBackMs: 10000,
    windowLookBackMs: 2000,
  }), []);

  // llm-ui Blocks configuration, including the dynamic spoilerBlock and new GenericNoteBlock
  const blocks = useMemo(() => [
    { ...baseSpoilerBlock, props: { globalShieldActive: isSpoilerShieldActive } },
    baseGenericNoteBlock, // Use the new generic note block here
  ], [isSpoilerShieldActive]);

  // useLLMOutput hook to manage the streaming display
  const { blockMatches } = useLLMOutput({
    llmOutput: currentStreamingBotMessage,
    blocks: blocks,
    fallbackBlock: {
      component: MarkdownComponent,
      lookBack: markdownLookBack(),
    },
    isStreamFinished: isLLMStreamFinished,
    throttle,
  });


  // Helper function to encapsulate the LLM interaction logic
  const processQueryAndGetResponse = async (queryToProcess) => {
    setSuggestedQuestions([]);
    setSimilarAnimeNote(null);
    setIsLoading(true); // Start overall loading indicator

    // Add user message immediately to the chat history
    const userMessageId = `user-${Date.now()}`;
    setMessages(prev => [...prev, { sender: 'user', text: queryToProcess, id: userMessageId }]);

    // Store the user's query for suggestions
    lastUserQueryForSuggestions.current = queryToProcess;

    // Reset llm-ui related states for the new stream
    setCurrentStreamingBotMessage('');
    setIsLLMStreamFinished(false);

    abortControllerRef.current = new AbortController();
    const signal = abortControllerRef.current.signal;

    let accumulatedBotResponse = ''; // This will collect the full response for suggestions and final storage

    try {
      // Call the streaming chat API. onChunkReceived will update currentStreamingBotMessage
      await api.llm.chat(queryToProcess, (chunk) => {
        accumulatedBotResponse += chunk;
        setCurrentStreamingBotMessage(accumulatedBotResponse); // Update the state for useLLMOutput
      }, signal);

      // Stream finished successfully. accumulatedBotResponse holds final text.
      setIsLLMStreamFinished(true); // Signal to useLLMOutput that the stream is complete

    } catch (error) {
      // Stream finished due to an error or user abort
      setIsLLMStreamFinished(true); // Signal completion (even if erroneous)

      let errorMessageText = `Sorry, something went wrong: ${error.message}.`;
      if (error.name === 'AbortError') {
        errorMessageText = "Mushi stopped generating, desu!";
      } else if (error.message.includes("Error: Ollama server is not running")) {
        errorMessageText = "Mushi can't connect to Ollama server, Senpai! Please make sure it's running. (T_T)";
      } else if (error.message.includes("Ollama generation took too long")) {
        errorMessageText = "Mushi took too long to think, Senpai! Maybe the model is too big? Gomen'nasai...";
      }

      console.error('LLM chat error:', error);
      accumulatedBotResponse = errorMessageText; // Use error message as accumulated response
      setCurrentStreamingBotMessage(errorMessageText); // Display error immediately via llm-ui
    } finally {
      // Important: After llm-ui finishes rendering the stream (or error message)
      // and currentStreamingBotMessage has its final content, add it to history.
      // This sequence prevents the double display.
      if (accumulatedBotResponse) { // Only add if there's content to add (including error messages)
        setMessages(prev => [...prev, { sender: 'bot', text: accumulatedBotResponse, id: `bot-final-${Date.now()}` }]);
      }
      setCurrentStreamingBotMessage(''); // Clear the temporary streaming display content

      // Fetch suggested questions only after the main LLM response is complete and finalized in history
      if (accumulatedBotResponse && !accumulatedBotResponse.startsWith("Error:") && abortControllerRef.current && !abortControllerRef.current.signal.aborted) {
        try {
          const suggestionsResponse = await api.llm.getSuggestedQuestions(accumulatedBotResponse);
          if(suggestionsResponse) {
              setSuggestedQuestions(suggestionsResponse.suggested_questions || []);
              setSimilarAnimeNote(suggestionsResponse.similar_anime_note || null);
          }
        } catch (suggestError) {
          console.error('Error fetching suggested questions:', suggestError);
          setSimilarAnimeNote(prev => prev ? prev + "\nError fetching suggestions." : "Error fetching suggestions.");
        }
      }
      setIsLoading(false); // Overall loading finished
      abortControllerRef.current = null;
    }
  };

  // handleSendMessage now only handles new user message submission
  const handleSendMessage = async (query) => {
    if (!query || isLoading) return;

    setInputValue(''); // Clear input after sending

    // Call the new helper to handle the actual LLM interaction
    await processQueryAndGetResponse(query);
  };

  const handleStopGeneration = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort('User stopped generation');
      console.log('LLM generation stopped by user.');
      setIsLoading(false);
      setIsLLMStreamFinished(true); // Signal to useLLMOutput to finalize
    }
  };

  const handleEditMessage = (messageText, index) => {
    if (isLoading) {
      handleStopGeneration();
    }
    setIsSpeechActive(false);

    if (editingMessageId !== null && editingMessageId !== index) {
      handleSaveEdit(editingMessageId);
    }

    const textToEdit = Array.isArray(messageText) ?
                       messageText.map(part => typeof part === 'string' ? part : '').join('') :
                       messageText;

    setEditingMessageId(index);
    setEditingMessageText(textToEdit);
    originalMessageTextRef.current = textToEdit;
  };

  const handleSaveEdit = (index) => {
    if (editingMessageText.trim() !== originalMessageTextRef.current.trim()) {
      lastUserQueryForSuggestions.current = editingMessageText;
      processQueryAndGetResponse(editingMessageText);
    } else {
      console.log("No changes detected in edited message, not resubmitting.");
    }

    setEditingMessageId(null);
    setEditingMessageText('');
    originalMessageTextRef.current = null;
  };

  const handleCancelEdit = () => {
    setEditingMessageId(null);
    setEditingMessageText('');
    originalMessageTextRef.current = null;
  };

  const handleEditKeyDown = (e, index) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSaveEdit(index);
    }
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    if (editingMessageId !== null && inputValue.trim() === '') {
      handleSaveEdit(editingMessageId);
    } else if (inputValue.trim()) {
      handleSendMessage(inputValue);
    }
  };

  const handleCopy = (textToCopy, messageId) => {
    const tempTextArea = document.createElement('textarea');
    tempTextArea.value = textToCopy;
    document.body.appendChild(tempTextArea);
    tempTextArea.select();
    try {
      document.execCommand('copy');
      setCopiedMessageId(messageId);
      setTimeout(() => setCopiedMessageId(null), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    } finally {
      document.body.removeChild(tempTextArea);
    }
  };

  const handleSpeechToTextTranscript = (transcript) => {
    setInputValue(transcript);
  };

  const handleSpeechRecordingStatusChange = (status) => {
    setIsSpeechActive(status);
    if (!status && inputValue) {
      setSpeechRecognitionError('');
    }
  };

  const handleSpeechError = (errorMsg) => {
    setSpeechRecognitionError(errorMsg);
    setIsSpeechActive(false);
  };

  const handleMicrophoneClick = () => {
    if (isSpeechActive) {
      setIsSpeechActive(false);
    } else {
      if (isLoading) {
        handleStopGeneration();
      }
      setInputValue('');
      setSpeechRecognitionError('');
      setIsSpeechActive(true);
    }
  };

  const handleClearChat = () => {
    setMessages([{ sender: 'bot', text: 'Welcome to Mushi AI. How can I help you today?', id: 'welcome-message' }]);
    setSuggestedQuestions([]);
    setSimilarAnimeNote(null);
    setInputValue('');
    setIsLoading(false);
    setEditingMessageId(null);
    setEditingMessageText('');
    originalMessageTextRef.current = null;
    setIsSpeechActive(false);
    setSpeechRecognitionError('');
    if (abortControllerRef.current) {
      abortControllerRef.current.abort('Chat cleared by user');
    }
    lastUserQueryForSuggestions.current = '';
    setCurrentStreamingBotMessage('');
    setIsLLMStreamFinished(false);
  };


  return (
    <div className="flex flex-col h-full bg-neutral-950 p-4 rounded-lg shadow-2xl border border-white/10">
      <h2 className="text-xl font-bold mb-4 text-center
                       bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                       drop-shadow-lg [text-shadow:0_0_10px_rgba(255,100,255,0.2)]">
        Mushi AI Chat
      </h2>

      <div ref={messagesEndRef} className="flex-grow overflow-y-auto p-4 space-y-4 custom-scrollbar pb-4 rounded-xl bg-white/5 border border-white/10">
        {messages.map((msg) => (
          <div key={msg.id} className={`flex items-start gap-3 ${msg.sender === 'user' ? 'justify-end' : ''}`}>
            {msg.sender === 'bot' && ( // Render all completed bot messages
              <>
                <Bot className="w-6 h-6 text-purple-400 flex-shrink-0" />
                <div className={`max-w-2xl p-4 rounded-2xl bg-gray-700 text-gray-200 shadow-md`}>
                  <ReactMarkdown remarkPlugins={[remarkGfm]}>{msg.text}</ReactMarkdown>
                </div>
                <button
                  onClick={() => handleCopy(msg.text, msg.id)}
                  className="p-2 rounded-full text-gray-400 hover:text-white hover:bg-gray-600 flex-shrink-0"
                  title="Copy message"
                >
                  <Copy size={16} />
                </button>
                {copiedMessageId === msg.id && <span className="text-xs text-green-400 ml-1">Copied!</span>}
              </>
            )}
            {msg.sender === 'user' && (
              <>
                {editingMessageId === msg.id ? (
                  <div className={`max-w-xl p-4 rounded-2xl bg-purple-600 text-white shadow-md`}>
                    <textarea
                      ref={textareaRef}
                      className="w-full bg-purple-700 text-white p-2 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-pink-400 overflow-hidden"
                      value={editingMessageText}
                      onChange={(e) => setEditingMessageText(e.target.value)}
                      onKeyDown={(e) => handleEditKeyDown(e, msg.id)}
                      rows={1}
                    />
                  </div>
                ) : (
                  <div className={`max-w-xl p-4 rounded-2xl bg-purple-600 text-white shadow-md`}>
                    <p className="text-base leading-relaxed font-sans">
                      {msg.text}
                    </p>
                  </div>
                )}
                <div className="flex items-center gap-2 flex-shrink-0">
                  <User className="w-6 h-6 text-pink-400" />
                  {editingMessageId === msg.id ? (
                    <>
                      <button
                        onClick={() => handleSaveEdit(msg.id)}
                        className="p-2 rounded-full text-gray-400 hover:text-white hover:bg-gray-600"
                        title="Save changes"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucude-check"><path d="M20 6 9 17l-5-5"/></svg>
                      </button>
                      <button
                        onClick={handleCancelEdit}
                        className="p-2 rounded-full text-gray-400 hover:text-white hover:bg-gray-600"
                        title="Cancel edit"
                      >
                        <XCircle size={16} />
                      </button>
                    </>
                  ) : (
                    <button
                      onClick={() => handleEditMessage(msg.text, msg.id)}
                      className="p-2 rounded-full text-gray-400 hover:text-white hover:bg-gray-600"
                      title="Edit message"
                    >
                      <Edit3 size={16} />
                    </button>
                  )}
                </div>
              </>
            )}
          </div>
        ))}

        {/* NEW: Render the currently streaming bot message using llm-ui. This replaces the old placeholder logic. */}
        {currentStreamingBotMessage && ( // Only show this if there's a message actively streaming
            <div key="streaming-bot-live" className="flex items-start gap-3">
                <Bot className="w-6 h-6 text-purple-400 flex-shrink-0" />
                <div className={`max-w-2xl p-4 rounded-2xl bg-gray-700 text-gray-200 shadow-md`}>
                    {/* Render llm-ui block matches */}
                    {blockMatches.map((blockMatch, idx) => {
                        const Component = blockMatch.block.component;
                        return <Component key={idx} blockMatch={blockMatch} />;
                    })}
                </div>
            </div>
        )}

        {/* Adjust isLoading indicator logic */}
        {isLoading && !currentStreamingBotMessage && <div className="text-center text-purple-400">Mushi is thinking...</div>}
      </div>

      {/* Suggested Questions */}
      <QuestionPrompts questions={suggestedQuestions} onQuestionClick={handleSendMessage} />

      {/* Similar Anime Note */}
      {similarAnimeNote && (
        <div className="px-4 py-3 border border-pink-500 rounded-lg mb-4 bg-white/5 text-pink-300 text-sm shadow-md">
          {/* Render "Similar Anime:" underlined and bold */}
          <p className="font-bold underline mb-2 text-purple-400">Similar Anime:</p>
          {/* Render the rest of the note using ReactMarkdown to handle list formatting */}
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {similarAnimeNote.startsWith("Similar anime: ")
              ? similarAnimeNote.substring("Similar anime: ".length).trim()
              : similarAnimeNote // Fallback in case format changes unexpectedly
            }
          </ReactMarkdown>
        </div>
      )}

      {/* Input Form */}
      <form onSubmit={handleFormSubmit} className="flex items-center gap-2 border-t border-white/10 pt-4">
        {/* Clear Chat Button */}
        <button
          type="button"
          onClick={handleClearChat}
          className="p-3 rounded-full bg-white/10 text-gray-300 hover:text-white hover:bg-pink-600 transition-colors duration-200 flex items-center justify-center shadow-md"
          title="Clear Chat"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>
        </button>

        {/* Spoiler Shield Toggle Button */}
        <button
          type="button"
          onClick={() => setIsSpoilerShieldActive(prev => !prev)}
          className={`p-3 rounded-full transition-colors duration-200 flex items-center justify-center shadow-md ${
            isSpoilerShieldActive ? 'bg-purple-600 text-white' : 'bg-white/10 text-gray-300 hover:text-white hover:bg-purple-600'
          }`}
          title={isSpoilerShieldActive ? "Spoiler Shield: Active" : "Spoiler Shield: Inactive"}
        >
          {isSpoilerShieldActive ? <EyeOff size={20} /> : <Eye size={20} />}
        </button>

        {/* Microphone Button */}
        <button
          type="button"
          onClick={handleMicrophoneClick}
          className={`p-3 rounded-full transition-colors duration-200 flex items-center justify-center shadow-md ${
            isSpeechActive ? 'bg-pink-600 text-white' : 'bg-white/10 text-gray-300 hover:text-white hover:bg-pink-600'
          }`}
          title={isSpeechActive ? "Stop recording" : "Start recording"}
          disabled={isLoading}
        >
          {isSpeechActive ? <StopCircle size={20} /> : <Mic size={20} />}
        </button>

        <input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder={isSpeechActive ? "Listening for your voice..." : "Ask Mushi anything..."}
          className="flex-grow bg-white/10 rounded-full py-3 px-4 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-pink-500 border border-white/20 transition-all duration-300"
          disabled={isLoading || isSpeechActive || editingMessageId !== null}
        />

        {/* Conditional rendering for Stop button (when LLM is loading) or Send button */}
        {isLoading ? (
          <button
            type="button"
            onClick={handleStopGeneration}
            className="bg-pink-600 hover:bg-pink-700 text-white p-3 rounded-full transition-colors duration-200 flex items-center justify-center shadow-md"
            title="Stop generation"
          >
            <XCircle size={20} />
          </button>
        ) : (
          <button
            type="submit"
            className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white p-3 rounded-full transition-colors duration-200 flex items-center justify-center shadow-md"
            disabled={!inputValue.trim() && editingMessageId === null || isSpeechActive}
            title={editingMessageId !== null ? "Save Edited Question" : "Send New Question"}
          >
            {editingMessageId !== null ?
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucude-check"><path d="M20 6 9 17l-5-5"/></svg>
              : <Send size={20} />
            }
          </button>
        )}
      </form>
      {/* Recording in progress indicator */}
      {isSpeechActive && <p className="text-center text-pink-400 text-sm mt-2">Recording in progress... Speak now!</p>}
      {/* Display speech recognition errors */}
      {speechRecognitionError && <p className="text-center text-red-300 text-sm mt-2">{speechRecognitionError}</p>}


      {/* SpeechToText component: This handles the underlying speech recognition logic */}
      <SpeechToText
        onTranscript={handleSpeechToTextTranscript}
        onRecordingStatusChange={handleSpeechRecordingStatusChange}
        shouldStartRecording={isSpeechActive}
        onSpeechError={handleSpeechError}
      />
    </div>
  );
}

export default ChatWindow;

--- FILE_END: ./mushi-frontend/src/components/chat/ChatWindow.jsx ---

--- FILE_START: ./mushi-frontend/src/components/chat/SpeechToText.jsx ---
import React, { useEffect, useRef, useState } from 'react';

function SpeechToText({ onTranscript, onRecordingStatusChange, shouldStartRecording, onSpeechError }) {
  const recognitionRef = useRef(null);
  const silenceTimeoutRef = useRef(null);
  const [isListening, setIsListening] = useState(false);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    if (!SpeechRecognition) {
      onSpeechError('Speech Recognition is not supported in this browser. Please use Chrome or Edge.');
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onstart = () => {
      setIsListening(true);
      onRecordingStatusChange(true);
      onSpeechError('');
      resetSilenceTimeout(); // Start 20s timer
    };

    recognition.onresult = (event) => {
      clearSilenceTimeout(); // Reset timer
      const transcript = event.results[0][0].transcript;
      onTranscript(transcript);

      // Automatically restart recognition to allow user to keep speaking
      restartRecognition();
    };

    recognition.onerror = (event) => {
      let message = 'Speech recognition error.';
      if (event.error === 'not-allowed') message = 'Microphone access denied.';
      else if (event.error === 'no-speech') message = 'No speech detected.';
      else if (event.error === 'audio-capture') message = 'Microphone not available.';
      else if (event.error === 'network') message = 'Network error.';
      onSpeechError(message);
      stopRecognition();
    };

    recognition.onend = () => {
      setIsListening(false);
      onRecordingStatusChange(false);
    };

    recognitionRef.current = recognition;

    return () => {
      stopRecognition();
    };
  }, []);

  useEffect(() => {
    if (shouldStartRecording && !isListening) {
      try {
        recognitionRef.current?.start();
      } catch (err) {
        onSpeechError(`Could not start microphone: ${err.message}`);
        onRecordingStatusChange(false);
      }
    } else if (!shouldStartRecording && isListening) {
      stopRecognition();
    }
  }, [shouldStartRecording, isListening, onSpeechError, onRecordingStatusChange]); // Added missing dependencies

  function stopRecognition() {
    clearSilenceTimeout();
    recognitionRef.current?.stop();
  }

  function restartRecognition() {
    try {
      recognitionRef.current?.stop(); // Required before restart
      setTimeout(() => {
        if (shouldStartRecording) recognitionRef.current?.start();
      }, 200); // Slight delay to allow restart
    } catch (err) {
      onSpeechError(`Error restarting recognition: ${err.message}`);
    }
  }

  function resetSilenceTimeout() {
    clearSilenceTimeout();
    silenceTimeoutRef.current = setTimeout(() => {
      onSpeechError('Recording stopped after 20 seconds of silence.');
      stopRecognition();
    }, 20000);
  }

  function clearSilenceTimeout() {
    if (silenceTimeoutRef.current) {
      clearTimeout(silenceTimeoutRef.current);
      silenceTimeoutRef.current = null;
    }
  }

  return null;
}

export default SpeechToText;

--- FILE_END: ./mushi-frontend/src/components/chat/SpeechToText.jsx ---

--- FILE_START: ./mushi-frontend/src/components/one-piece/OnePieceSagaList.jsx ---
// mushi-frontend/src/components/one-piece/OnePieceSagaList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * OnePieceSagaList component fetches and displays a list of One Piece sagas.
 */
function OnePieceSagaList() {
  const [sagas, setSagas] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchSagas = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.onePiece.getSagas(); // Fetch One Piece sagas

        if (data) {
          setSagas(data);
          console.log("Mushi found all the grand sagas for you, Senpai! Waku waku!~ ☆", data);
        } else {
          setError("Muu... Mushi couldn't fetch the One Piece sagas. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch One Piece sagas:", err);
        setError(`Mushi encountered an error while fetching One Piece sagas: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchSagas();
  }, []); // Empty dependency array means this effect runs once on mount

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is sailing through the Grand Line to find the sagas for you, Senpai! Kira kira!~ ✨
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!sagas || sagas.length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No One Piece sagas found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        One Piece Sagas! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {sagas.map((saga) => (
          <div key={saga.id} className="bg-gray-800 rounded-lg shadow-lg p-6 transform hover:scale-105 transition-transform duration-300">
            <h3 className="text-2xl font-bold text-indigo-400 mb-2">{saga.saga_name}</h3>
            {saga.arcs && saga.arcs.length > 0 && (
              <div className="mt-4">
                <h4 className="text-lg font-semibold text-gray-300 mb-2">Arcs:</h4>
                <ul className="list-disc list-inside text-gray-200">
                  {saga.arcs.map((arc, index) => (
                    <li key={index} className="mb-1">{arc.arc_name} (Episodes: {arc.first_episode}-{arc.last_episode})</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export default OnePieceSagaList;

--- FILE_END: ./mushi-frontend/src/components/one-piece/OnePieceSagaList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/one-piece/OnePieceIslandsList.jsx ---
// mushi-frontend/src/components/one-piece/OnePieceIslandsList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * OnePieceIslandsList component fetches and displays a list of One Piece islands.
 */
function OnePieceIslandsList() {
  const [islands, setIslands] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchIslands = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.onePiece.getIslands(); // Fetch One Piece Islands

        if (data) {
          setIslands(data);
          console.log("Mushi found all the mysterious islands for you, Senpai! Waku waku!~ ☆", data);
        } else {
          setError("Muu... Mushi couldn't fetch the One Piece islands. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch One Piece islands:", err);
        setError(`Mushi encountered an error while fetching One Piece islands: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchIslands();
  }, []); // Empty dependency array means this effect runs once on mount

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is charting a course to find all the islands for you, Senpai! Kira kira!~ ✨
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!islands || islands.length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No One Piece islands found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        One Piece Islands! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
        {islands.map((island) => (
          <div key={island.id} className="bg-gray-800 rounded-lg shadow-lg p-3 text-center transform hover:scale-105 transition-transform duration-300">
            {/* Assuming island object has 'name' and 'arc' or 'description' */}
            <h3 className="text-white text-md font-semibold truncate mb-1">{island.name}</h3>
            {island.description && <p className="text-gray-400 text-sm line-clamp-2">{island.description}</p>}
            {island.arc && <p className="text-gray-500 text-xs">Arc: {island.arc}</p>}
            {/* You could add more details here or link to a detail page if one existed */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default OnePieceIslandsList;

--- FILE_END: ./mushi-frontend/src/components/one-piece/OnePieceIslandsList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/one-piece/OnePieceDevilFruitsList.jsx ---
// mushi-frontend/src/components/one-piece/OnePieceDevilFruitsList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * OnePieceDevilFruitsList component fetches and displays a list of One Piece Devil Fruits.
 */
function OnePieceDevilFruitsList() {
  const [devilFruits, setDevilFruits] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDevilFruits = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.onePiece.getFruits(); // Fetch One Piece Devil Fruits

        if (data) {
          setDevilFruits(data);
          console.log("Mushi found all the mysterious Devil Fruits for you, Senpai! Waku waku!~ ☆", data);
        } else {
          setError("Muu... Mushi couldn't fetch the One Piece Devil Fruits. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch One Piece Devil Fruits:", err);
        setError(`Mushi encountered an error while fetching One Piece Devil Fruits: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDevilFruits();
  }, []); // Empty dependency array means this effect runs once on mount

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is searching for all the yummy (but dangerous!) Devil Fruits for you, Senpai! Kira kira!~ ✨
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!devilFruits || devilFruits.length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No One Piece Devil Fruits found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        One Piece Devil Fruits! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
        {devilFruits.map((fruit) => (
          <div key={fruit.id} className="bg-gray-800 rounded-lg shadow-lg p-3 text-center transform hover:scale-105 transition-transform duration-300">
            {/* Assuming fruit object has 'name' and 'type' */}
            <h3 className="text-white text-md font-semibold truncate mb-1">{fruit.name}</h3>
            {fruit.type && <p className="text-gray-400 text-sm">{fruit.type}</p>}
            {/* You could add more details here or link to a detail page if one existed */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default OnePieceDevilFruitsList;

--- FILE_END: ./mushi-frontend/src/components/one-piece/OnePieceDevilFruitsList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/one-piece/OnePieceCharacterList.jsx ---
// mushi-frontend/src/components/one-piece/OnePieceCharacterList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * OnePieceCharacterList component fetches and displays a list of One Piece characters.
 */
function OnePieceCharacterList() {
  const [characters, setCharacters] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCharacters = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.onePiece.getCharacters(); // Fetch One Piece characters

        if (data) {
          setCharacters(data);
          console.log("Mushi found all the amazing One Piece characters for you, Senpai! Waku waku!~ ☆", data);
        } else {
          setError("Muu... Mushi couldn't fetch the One Piece characters. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch One Piece characters:", err);
        setError(`Mushi encountered an error while fetching One Piece characters: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCharacters();
  }, []); // Empty dependency array means this effect runs once on mount

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is looking for all the nakama for you, Senpai! Kira kira!~ ✨
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!characters || characters.length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No One Piece characters found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        One Piece Characters! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
        {characters.map((character) => (
          <div key={character.id} className="bg-gray-800 rounded-lg shadow-lg p-3 text-center transform hover:scale-105 transition-transform duration-300">
            {/* Assuming character object has 'name' and 'image' or 'poster_url' */}
            <img
              src={character.image || character.poster_url || 'https://placehold.co/100x100/333/FFF?text=Char'}
              alt={character.name || 'Character Image'}
              className="w-24 h-24 rounded-full object-cover mx-auto mb-2 border-2 border-indigo-500"
              onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/100x100/333/FFF?text=Char'; }}
            />
            <h3 className="text-white text-md font-semibold truncate">{character.name}</h3>
            {character.role && <p className="text-gray-400 text-sm">{character.role}</p>}
            {/* You can add a link to a character detail page here if one exists/will be created */}
            {/* <Link to={`/app/onepiece/character/${character.id}`} className="text-indigo-400 hover:text-indigo-300 text-xs mt-1">Details~</Link> */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default OnePieceCharacterList;

--- FILE_END: ./mushi-frontend/src/components/one-piece/OnePieceCharacterList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/one-piece/OnePieceCrewsList.jsx ---
// mushi-frontend/src/components/one-piece/OnePieceCrewsList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * OnePieceCrewsList component fetches and displays a list of One Piece crews.
 */
function OnePieceCrewsList() {
  const [crews, setCrews] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCrews = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.onePiece.getCrews(); // Fetch One Piece Crews

        if (data) {
          setCrews(data);
          console.log("Mushi found all the amazing One Piece crews for you, Senpai! Waku waku!~ ☆", data);
        } else {
          setError("Muu... Mushi couldn't fetch the One Piece crews. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch One Piece crews:", err);
        setError(`Mushi encountered an error while fetching One Piece crews: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCrews();
  }, []); // Empty dependency array means this effect runs once on mount

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is looking for all the pirate flags for you, Senpai! Kira kira!~ ✨
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!crews || crews.length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No One Piece crews found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        One Piece Crews! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
        {crews.map((crew) => (
          <div key={crew.id} className="bg-gray-800 rounded-lg shadow-lg p-3 text-center transform hover:scale-105 transition-transform duration-300">
            {/* Assuming crew object has 'name' and 'captain' or 'image' */}
            <h3 className="text-white text-md font-semibold truncate mb-1">{crew.name}</h3>
            {crew.captain && <p className="text-gray-400 text-sm">Captain: {crew.captain}</p>}
            {crew.members_count && <p className="text-gray-500 text-xs">Members: {crew.members_count}</p>}
            {/* You could add more details here or link to a detail page if one existed */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default OnePieceCrewsList;

--- FILE_END: ./mushi-frontend/src/components/one-piece/OnePieceCrewsList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/navigation/FooterNav.jsx ---
// mushi-frontend/src/components/navigation/FooterNav.jsx
import React from 'react';
import { Link } from 'react-router-dom';

function FooterNav({ images, currentIndex }) {
  const websiteName = "Clank Clank Mushi";

  return (
    <footer className="relative flex flex-col w-full mt-[100px] px-4 overflow-hidden">
      {/* KEPT (from Mushi): The signature background image carousel for the footer */}
      <img
        src={images[currentIndex]}
        alt={`Footer background image ${currentIndex + 1}`}
        className="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000"
        style={{ opacity: 0.05 }} // Very subtle opacity for a footer
      />
      {/* KEPT (from Mushi): Overlay to ensure text readability */}
      <div className="absolute inset-0 bg-purple-900 opacity-65 z-0"></div>

      <div className="relative z-10 py-5 flex flex-col w-full space-y-4 max-md:items-center">
        {/* Feature: A-Z List (from Zenime), now using theme colors */}
        <div className="flex w-fit items-center space-x-6 max-[500px]:hidden">
          <p className="text-2xl font-bold max-md:text-lg text-foreground/90">A-Z LIST</p>
          <p style={{ borderLeft: '1px solid rgba(255, 255, 255, 0.4)' }} className="text-md font-semibold pl-6 text-foreground/70">
            Searching anime order by alphabet name A to Z
          </p>
        </div>
        <div className="flex gap-x-[7px] flex-wrap justify-start gap-y-2 max-md:justify-start max-[500px]:hidden">
          {[ "All", "#", "0-9", ...Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i))].map((item) => (
            <Link
              to={`/az-list/${item === "All" ? "" : item}`} // You'll need to create this route
              key={item}
              className="text-lg bg-secondary/80 text-muted-foreground px-2 rounded-md font-bold hover:text-black hover:bg-[#FFBADE] hover:cursor-pointer transition-all ease-out"
            >
              {item}
            </Link>
          ))}
        </div>

        {/* Feature: Disclaimer and Copyright (from Zenime), now using theme colors */}
        <div className="flex flex-col w-full text-left space-y-2 pt-4 max-md:items-center max-[470px]:px-[5px]">
          <p className="text-muted-foreground text-[15px] max-md:text-center max-md:text-[12px]">
            {websiteName} does not host any files, it merely pulls streams from 3rd party services.
            Legal issues should be taken up with the file hosts and providers. {websiteName} is not responsible for any media files shown.
          </p>
          <p className="text-muted-foreground max-md:text-[14px]">
            Powered by the Mushi LLM | © {new Date().getFullYear()} {websiteName}. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
}

export default FooterNav;

--- FILE_END: ./mushi-frontend/src/components/navigation/FooterNav.jsx ---

--- FILE_START: ./mushi-frontend/src/components/navigation/TopNav.jsx ---
// mushi-frontend/src/components/navigation/TopNav.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBars } from '@fortawesome/free-solid-svg-icons';

// CORRECTED IMPORTS: Using the '@' alias from your vite.config.js
import Sidebar from '@/src/components/navigation/Sidebar';
import WebSearch from '@/src/components/anime/searchbar/WebSearch';
import MobileSearch from '@/src/components/anime/searchbar/MobileSearch';


function TopNav({ images, currentIndex }) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => setIsScrolled(window.scrollY > 50);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleHamburgerClick = () => setIsSidebarOpen(true);
  const handleCloseSidebar = () => setIsSidebarOpen(false);

  return (
    <>
      <Sidebar isOpen={isSidebarOpen} onClose={handleCloseSidebar} />
      <nav className="relative p-4 h-28 flex items-center z-40 overflow-hidden">
        {/* KEPT (from Mushi): The signature background image carousel */}
        <img
          src={images[currentIndex]}
          alt={`Background image ${currentIndex + 1}`}
          className="absolute inset-0 w-full h-full object-cover transition-opacity duration-1000"
          style={{ opacity: 0.2 }}
        />
        {/* MERGED: Mushi's overlay, now with a dynamic opacity from Zenime's scroll effect */}
        <div
          className={`absolute inset-0 bg-purple-900 transition-opacity duration-300 z-0 ${
            isScrolled ? 'opacity-60' : 'opacity-35'
          }`}
        ></div>

        <div className="container mx-auto flex justify-between items-center relative z-10 text-white w-full">
          {/* Left Side: Hamburger Menu and Brand */}
          <div className="flex items-center gap-x-6">
            <FontAwesomeIcon icon={faBars} className="text-2xl text-white cursor-pointer" onClick={handleHamburgerClick} />
            <Link to="/home" className="text-white text-3xl font-extrabold hover:text-pink-300 transition-colors duration-300" title="Home">
              Clank Clank Mushi
            </Link>
          </div>

          {/* Center: Desktop Search Bar (from Zenime) */}
          <div className="hidden lg:flex flex-grow justify-center px-8">
             <WebSearch />
          </div>

          {/* Right Side: Mushi's Core Navigation Links (STYLES NOW INLINED) */}
          <div className="hidden lg:flex items-center space-x-2">
            <Link to="/home" className="text-white bg-white/10 border border-white/20 rounded-full px-4 py-2 hover:text-pink-200 hover:bg-white/20 hover:shadow-lg hover:border-pink-300 transition-all duration-300 text-base font-medium inline-block whitespace-nowrap">Home</Link>
            <Link to="/mushi_ai" className="text-white bg-white/10 border border-white/20 rounded-full px-4 py-2 hover:text-pink-200 hover:bg-white/20 hover:shadow-lg hover:border-pink-300 transition-all duration-300 text-base font-medium inline-block whitespace-nowrap">Mushi AI</Link>
            <Link to="/search" className="text-white bg-white/10 border border-white/20 rounded-full px-4 py-2 hover:text-pink-200 hover:bg-white/20 hover:shadow-lg hover:border-pink-300 transition-all duration-300 text-base font-medium inline-block whitespace-nowrap">Anime Search</Link>
            <Link to="/data_insights" className="text-white bg-white/10 border border-white/20 rounded-full px-4 py-2 hover:text-pink-200 hover:bg-white/20 hover:shadow-lg hover:border-pink-300 transition-all duration-300 text-base font-medium inline-block whitespace-nowrap">Data Insights</Link>
            <Link to="/admin_data" className="text-yellow-300 bg-yellow-500/10 border border-yellow-400/20 rounded-full px-4 py-2 hover:text-yellow-200 hover:bg-yellow-500/20 hover:shadow-lg hover:border-yellow-300 transition-all duration-300 text-base font-medium inline-block whitespace-nowrap">Admin Panel</Link>
          </div>
        </div>

        {/* Mobile search bar. Needs careful placement to avoid overlapping content */}
        <div className="absolute bottom-2 left-1/2 -translate-x-1/2 w-full px-4 lg:hidden">
            <MobileSearch />
        </div>
      </nav>
    </>
  );
}

export default TopNav;

--- FILE_END: ./mushi-frontend/src/components/navigation/TopNav.jsx ---

--- FILE_START: ./mushi-frontend/src/components/navigation/Sidebar.jsx ---
import React from 'react';
import { Link } from 'react-router-dom';
import { X, Home, Bot, Search, Database, ShieldCheck, List } from 'lucide-react';

const mainLinks = [
  { to: '/home', label: 'Home', icon: <Home size={20} /> },
  { to: '/mushi_ai', label: 'Mushi AI', icon: <Bot size={20} /> },
  { to: '/search', label: 'Anime Search', icon: <Search size={20} /> },
  { to: '/az-list', label: 'A-Z List', icon: <List size={20} /> }
];

const toolLinks = [
  { to: '/data_insights', label: 'Data Insights', icon: <Database size={20} /> },
  { to: '/admin_data', label: 'Admin Panel', icon: <ShieldCheck size={20} /> }
];

const Sidebar = ({ isOpen, onClose }) => {
  return (
    <>
      {/* Overlay */}
      <div
        className={`fixed inset-0 bg-black transition-opacity duration-300 ease-in-out z-[99] ${
          isOpen ? 'bg-opacity-60' : 'bg-opacity-0 pointer-events-none'
        }`}
        onClick={onClose}
      />
      {/* Sidebar Panel */}
      <aside
        className={`fixed top-0 left-0 h-full w-72 bg-neutral-900 text-foreground shadow-2xl transform transition-transform duration-300 ease-in-out z-[100] flex flex-col p-6 ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
      >
        <div className="flex justify-between items-center mb-8">
          <Link to="/home" onClick={onClose} className="text-white text-2xl font-extrabold hover:text-pink-300 transition-colors duration-300">
            Clank Clank Mushi
          </Link>
          <button onClick={onClose} className="text-gray-400 hover:text-white p-2 rounded-full hover:bg-white/10" aria-label="Close menu">
            <X size={24} />
          </button>
        </div>

        <nav className="flex flex-col gap-y-2 flex-grow">
          {/* Main Navigation */}
          {mainLinks.map((link) => (
            <Link
              key={link.to}
              to={link.to}
              onClick={onClose}
              className="flex items-center gap-4 px-4 py-3 text-lg font-medium text-gray-300 rounded-lg hover:bg-purple-600/30 hover:text-white transition-colors"
            >
              {link.icon}
              <span>{link.label}</span>
            </Link>
          ))}

          {/* Divider */}
          <hr className="my-6 border-white/10" />

          {/* Tools Section */}
          <h3 className="px-4 text-sm font-semibold text-muted-foreground uppercase tracking-wider">Tools</h3>
          {toolLinks.map((link) => (
            <Link
              key={link.to}
              to={link.to}
              onClick={onClose}
              className={`flex items-center gap-4 px-4 py-3 text-lg font-medium rounded-lg transition-colors ${
                link.to === '/admin_data'
                  ? 'text-yellow-400 hover:bg-yellow-500/20'
                  : 'text-gray-300 hover:bg-purple-600/30 hover:text-white'
              }`}
            >
              {link.icon}
              <span>{link.label}</span>
            </Link>
          ))}
        </nav>

        <footer className="mt-auto text-center text-xs text-muted-foreground">
          <p>© {new Date().getFullYear()} Clank Clank Mushi</p>
        </footer>
      </aside>
    </>
  );
};

export default Sidebar;

--- FILE_END: ./mushi-frontend/src/components/navigation/Sidebar.jsx ---

--- FILE_START: ./mushi-frontend/src/components/categorycard/CategoryCard.css ---
.overlay {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    to top,
    rgba(32, 31, 49, 1) 0%,
    rgba(32, 31, 49, 0) 20%,
    rgba(32, 31, 49, 0) 100%
  );

  z-index: 50;
}
.dot {
  width: 5px;
  height: 5px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.3);
  display: inline-block;
}

--- FILE_END: ./mushi-frontend/src/components/categorycard/CategoryCard.css ---

--- FILE_START: ./mushi-frontend/src/components/categorycard/CategoryCard.jsx ---
import React, { useCallback, useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faClosedCaptioning,
  faMicrophone,
  faPlay,
} from "@fortawesome/free-solid-svg-icons";
import { FaChevronRight } from "react-icons/fa";
import "./CategoryCard.css";
import { useLanguage } from "@/src/context/LanguageContext";
import { Link, useNavigate } from "react-router-dom";
import Qtip from "../qtip/Qtip";
import useToolTipPosition from "@/src/hooks/useToolTipPosition";

const CategoryCard = React.memo(
  ({
    label,
    data,
    showViewMore = true,
    className,
    categoryPage = false,
    cardStyle,
    path,
    limit,
  }) => {
    const { language } = useLanguage();
    const navigate = useNavigate();
    const [showPlay, setShowPlay] = useState(false);
    if (limit) {
      data = data.slice(0, limit);
    }

    const [itemsToRender, setItemsToRender] = useState({
      firstRow: [],
      remainingItems: [],
    });

    const getItemsToRender = useCallback(() => {
      if (categoryPage) {
        const firstRow =
          window.innerWidth > 758 && data.length > 4 ? data.slice(0, 4) : [];
        const remainingItems =
          window.innerWidth > 758 && data.length > 4
            ? data.slice(4)
            : data.slice(0);
        return { firstRow, remainingItems };
      }
      return { firstRow: [], remainingItems: data.slice(0) };
    }, [categoryPage, data]);

    useEffect(() => {
      const handleResize = () => {
        setItemsToRender(getItemsToRender());
      };
      const newItems = getItemsToRender();
      setItemsToRender((prev) => {
        if (
          JSON.stringify(prev.firstRow) !== JSON.stringify(newItems.firstRow) ||
          JSON.stringify(prev.remainingItems) !==
            JSON.stringify(newItems.remainingItems)
        ) {
          return newItems;
        }
        return prev;
      });

      window.addEventListener("resize", handleResize);
      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, [getItemsToRender]);
    const [hoveredItem, setHoveredItem] = useState(null);
    const [hoverTimeout, setHoverTimeout] = useState(null);
    const { tooltipPosition, tooltipHorizontalPosition, cardRefs } =
      useToolTipPosition(hoveredItem, data);
    const handleMouseEnter = (item, index) => {
      const timeout = setTimeout(() => {
        setHoveredItem(item.id + index);
        setShowPlay(true);
      }, 400);
      setHoverTimeout(timeout);
    };
    const handleMouseLeave = () => {
      clearTimeout(hoverTimeout);
      setHoveredItem(null);
      setShowPlay(false);
    };
    return (
      <div className={`w-full ${className}`}>
        <div className="flex items-center justify-between">
          <h1 className="font-bold text-2xl text-[#ffbade] max-[478px]:text-[18px] capitalize">
            {label}
          </h1>
          {showViewMore && (
            <Link
              to={`/${path}`}
              className="flex w-fit items-baseline h-fit rounded-3xl gap-x-1 group"
            >
              <p className="text-white text-[12px] font-semibold h-fit leading-0 group-hover:text-[#ffbade] transition-all ease-out">
                View more
              </p>
              <FaChevronRight className="text-white text-[10px] group-hover:text-[#ffbade] transition-all ease-out" />
            </Link>
          )}
        </div>
        <>
          {categoryPage && (
            <div
              className={`grid grid-cols-4 gap-x-3 gap-y-8 transition-all duration-300 ease-in-out ${
                categoryPage && itemsToRender.firstRow.length > 0
                  ? "mt-8 max-[758px]:hidden"
                  : ""
              }`}
            >
              {itemsToRender.firstRow.map((item, index) => (
                <div
                  key={index}
                  className="flex flex-col transition-transform duration-300 ease-in-out"
                  style={{ height: "fit-content" }}
                  ref={(el) => (cardRefs.current[index] = el)}
                >
                  <div
                    className="w-full relative group hover:cursor-pointer"
                    onClick={() =>
                      navigate(
                        `${
                          path === "top-upcoming"
                            ? `/${item.id}`
                            : `/watch/${item.id}`
                        }`
                      )
                    }
                    onMouseEnter={() => handleMouseEnter(item, index)}
                    onMouseLeave={handleMouseLeave}
                  >
                    {hoveredItem === item.id + index && showPlay && (
                      <FontAwesomeIcon
                        icon={faPlay}
                        className="text-[40px] text-white absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[10000]"
                      />
                    )}

                    <div className="overlay"></div>
                    <div className="overflow-hidden">
                      <img
                        src={`https://wsrv.nl/?url=${item.poster}`}
                        alt={item.title}
                        className={`w-full h-[320px] object-cover max-[1200px]:h-[35vw] max-[758px]:h-[45vw] max-[478px]:h-[60vw] group-hover:blur-[7px] transform transition-all duration-300 ease-in-out ultra-wide:h-[400px] ${cardStyle}`}
                      />
                    </div>
                    {(item.tvInfo?.rating === "18+" ||
                      item?.adultContent === true) && (
                      <div className="text-white px-2 rounded-md bg-[#FF5700] absolute top-2 left-2 flex items-center justify-center text-[14px] font-bold">
                        18+
                      </div>
                    )}
                    <div className="absolute left-2 bottom-3 flex items-center justify-center w-fit space-x-1 z-[100] max-[270px]:flex-col max-[270px]:gap-y-[3px]">
                      {item.tvInfo?.sub && (
                        <div className="flex space-x-1 justify-center items-center bg-[#B0E3AF] rounded-[2px] px-[4px] text-black py-[2px]">
                          <FontAwesomeIcon
                            icon={faClosedCaptioning}
                            className="text-[12px]"
                          />
                          <p className="text-[12px] font-bold">
                            {item.tvInfo.sub}
                          </p>
                        </div>
                      )}
                      {item.tvInfo?.dub && (
                        <div className="flex space-x-1 justify-center items-center bg-[#B9E7FF] rounded-[2px] px-[8px] text-black py-[2px]">
                          <FontAwesomeIcon
                            icon={faMicrophone}
                            className="text-[12px]"
                          />
                          <p className="text-[12px] font-bold">
                            {item.tvInfo.dub}
                          </p>
                        </div>
                      )}
                      {item.tvInfo?.eps && (
                        <div className="flex space-x-1 justify-center items-center bg-[#a9a6b16f] rounded-[2px] px-[8px] text-white py-[2px]">
                          <p className="text-[12px] font-extrabold">
                            {item.tvInfo.eps}
                          </p>
                        </div>
                      )}
                    </div>
                    {hoveredItem === item.id + index &&
                      window.innerWidth > 1024 && (
                        <div
                          className={`absolute ${tooltipPosition} ${tooltipHorizontalPosition} z-[100000] transform transition-all duration-300 ease-in-out ${
                            hoveredItem === item.id + index
                              ? "opacity-100 translate-y-0"
                              : "opacity-0 translate-y-2"
                          }`}
                        >
                          <Qtip id={item.id} />
                        </div>
                      )}
                  </div>
                  <Link
                    to={`/${item.id}`}
                    className="text-white font-semibold mt-1 item-title hover:text-[#FFBADE] hover:cursor-pointer line-clamp-1"
                  >
                    {language === "EN" ? item.title : item.japanese_title}
                  </Link>
                  {item.description && (
                    <div className="line-clamp-3 text-[13px] font-extralight text-[#b1b0b0] max-[1200px]:hidden">
                      {item.description}
                    </div>
                  )}
                  <div className="flex items-center gap-x-2 w-full mt-2 overflow-hidden">
                    <div className="text-gray-400 text-[14px] text-nowrap overflow-hidden text-ellipsis">
                      {item.tvInfo.showType.split(" ").shift()}
                    </div>
                    <div className="dot"></div>
                    <div className="text-gray-400 text-[14px] text-nowrap overflow-hidden text-ellipsis">
                      {item.tvInfo?.duration === "m" ||
                      item.tvInfo?.duration === "?" ||
                      item.duration === "m" ||
                      item.duration === "?"
                        ? "N/A"
                        : item.tvInfo?.duration || item.duration || "N/A"}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
          <div className="grid grid-cols-6 gap-x-3 gap-y-8 mt-6 transition-all duration-300 ease-in-out max-[1400px]:grid-cols-4 max-[758px]:grid-cols-3 max-[478px]:grid-cols-2">
            {itemsToRender.remainingItems.map((item, index) => (
              <div
                key={index}
                className="flex flex-col transition-transform duration-300 ease-in-out"
                style={{ height: "fit-content" }}
                ref={(el) => (cardRefs.current[index] = el)}
              >
                <div
                  className="w-full relative group hover:cursor-pointer"
                  onClick={() =>
                    navigate(
                      `${
                        path === "top-upcoming"
                          ? `/${item.id}`
                          : `/watch/${item.id}`
                      }`
                    )
                  }
                  onMouseEnter={() => handleMouseEnter(item, index)}
                  onMouseLeave={handleMouseLeave}
                >
                  {hoveredItem === item.id + index && showPlay && (
                    <FontAwesomeIcon
                      icon={faPlay}
                      className="text-[40px] text-white absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-[10000]"
                    />
                  )}
                  <div className="overlay"></div>
                  <div className="overflow-hidden">
                    <img
                      src={`https://wsrv.nl/?url=${item.poster}`}
                      alt={item.title}
                      className={`w-full h-[250px] object-cover max-[1200px]:h-[35vw] max-[758px]:h-[45vw] max-[478px]:h-[60vw] ${cardStyle} group-hover:blur-[7px] transform transition-all duration-300 ease-in-out `}
                    />
                  </div>
                  {(item.tvInfo?.rating === "18+" ||
                    item?.adultContent === true) && (
                    <div className="text-white px-2 rounded-md bg-[#FF5700] absolute top-2 left-2 flex items-center justify-center text-[14px] font-bold">
                      18+
                    </div>
                  )}
                  <div className="absolute left-2 bottom-4 flex items-center justify-center w-fit space-x-1 z-[100] max-[270px]:flex-col max-[270px]:gap-y-[3px]">
                    {item.tvInfo?.sub && (
                      <div className="flex space-x-1 justify-center items-center bg-[#B0E3AF] rounded-[2px] px-[4px] text-black py-[2px]">
                        <FontAwesomeIcon
                          icon={faClosedCaptioning}
                          className="text-[12px]"
                        />
                        <p className="text-[12px] font-bold">
                          {item.tvInfo.sub}
                        </p>
                      </div>
                    )}
                    {item.tvInfo?.dub && (
                      <div className="flex space-x-1 justify-center items-center bg-[#B9E7FF] rounded-[2px] px-[8px] text-black py-[2px]">
                        <FontAwesomeIcon
                          icon={faMicrophone}
                          className="text-[12px]"
                        />
                        <p className="text-[12px] font-bold">
                          {item.tvInfo.dub}
                        </p>
                      </div>
                    )}
                  </div>
                  {hoveredItem === item.id + index &&
                    window.innerWidth > 1024 && (
                      <div
                        className={`absolute ${tooltipPosition} ${tooltipHorizontalPosition} z-[100000] transform transition-all duration-300 ease-in-out ${
                          hoveredItem === item.id + index
                            ? "opacity-100 translate-y-0"
                            : "opacity-0 translate-y-2"
                        }`}
                      >
                        <Qtip id={item.id} />
                      </div>
                    )}
                </div>
                <Link
                  to={`/${item.id}`}
                  className="text-white font-semibold mt-1 item-title hover:text-[#FFBADE] hover:cursor-pointer line-clamp-1"
                >
                  {language === "EN" ? item.title : item.japanese_title}
                </Link>
                <div className="flex items-center gap-x-2 w-full mt-2 overflow-hidden">
                  <div className="text-gray-400 text-[14px] text-nowrap overflow-hidden text-ellipsis">
                    {item.tvInfo.showType.split(" ").shift()}
                  </div>
                  <div className="dot"></div>
                  <div className="text-gray-400 text-[14px] text-nowrap overflow-hidden text-ellipsis">
                    {item.tvInfo?.duration === "m" ||
                    item.tvInfo?.duration === "?" ||
                    item.duration === "m" ||
                    item.duration === "?"
                      ? "N/A"
                      : item.tvInfo?.duration || item.duration || "N/A"}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </>
      </div>
    );
  }
);

CategoryCard.displayName = "CategoryCard";

export default CategoryCard;

--- FILE_END: ./mushi-frontend/src/components/categorycard/CategoryCard.jsx ---

--- FILE_START: ./mushi-frontend/src/components/common/LLMInfoModal.jsx ---
// mushi-frontend/src/components/llm/ProviderSelector.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // This correctly imports the 'api' object from its separate file

function ProviderSelector() {
  const [providers, setProviders] = useState({});
  // Initialize selectedProvider to the desired default ('ollama_anime').
  // It will be updated by the API call if a different provider is currently active on the backend.
  const [selectedProvider, setSelectedProvider] = useState('ollama_anime');
  const [feedback, setFeedback] = useState('');
  const [isLoading, setIsLoading] = useState(true); // New loading state

  // Fetch the available providers and the current selected provider when the component mounts
  useEffect(() => {
    const fetchLLMInfo = async () => {
      setIsLoading(true); // Start loading
      try {
        // Fetch all available providers
        const providerData = await api.llm.getProviders();
        setProviders(providerData);

        // Fetch the currently selected provider from the backend
        const currentProviderResponse = await api.llm.getCurrentProvider();

        // If the backend successfully returns a current provider, use it.
        // Otherwise, stick with our initial default ('ollama_anime').
        if (currentProviderResponse && currentProviderResponse.current_provider) {
          setSelectedProvider(currentProviderResponse.current_provider);
        } else {
          // If backend did not return a specific current provider,
          // the component will remain at its initialized 'ollama_anime' state.
          console.warn("Backend did not return a specific current LLM provider. Displaying initial default.");
        }
      } catch (error) {
        console.error('Failed to load LLM providers or current provider:', error);
        setFeedback('Failed to load LLM providers or current provider.');
        // If there's an error fetching, the component will remain at its initialized 'ollama_anime' state.
        // No explicit setSelectedProvider('ollama_anime') needed here as it's the initial state.
      } finally {
        setIsLoading(false); // End loading
      }
    };
    fetchLLMInfo();
  }, []); // Empty dependency array means this effect runs once on mount

  const handleProviderChange = async (event) => {
    const newProvider = event.target.value;
    setSelectedProvider(newProvider); // Optimistically update UI
    setFeedback('Setting provider...');
    try {
      const result = await api.llm.setProvider(newProvider);
      setFeedback(result.message); // e.g., "LLM provider set to ollama_anime"
    } catch (error) {
      console.error('Failed to set LLM provider:', error);
      setFeedback(`Error setting provider: ${error.message || 'Unknown error'}`);
    }
  };

  return (
    <div className="bg-white/5 p-4 rounded-xl shadow-lg mb-4 border border-white/10"> {/* Softened background, rounded, shadow, border */}
      <label htmlFor="llm-provider" className="block text-sm font-medium text-gray-300 mb-2">
        Choose LLM Provider
      </label>
      {isLoading ? (
        <p className="text-gray-400">Loading providers...</p>
      ) : (
        <select
          id="llm-provider"
          value={selectedProvider}
          onChange={handleProviderChange}
          className="w-full bg-white/10 border border-white/20 rounded-lg p-2 text-white focus:ring-2 focus:ring-pink-500" // Softened background, border, focus ring
          disabled={Object.keys(providers).length === 0}
        >
          {/* The "Select a provider" option is now less likely to be seen if selectedProvider defaults correctly.
              It serves as a fallback if selectedProvider is somehow an empty string,
              or if no options are available. */}
          <option value="" disabled>Select a provider</option>
          {Object.entries(providers).map(([key, name]) => (
            <option key={key} value={key}>
              {name}
            </option>
          ))}
        </select>
      )}
      {feedback && <p className="text-xs text-gray-400 mt-2">{feedback}</p>}
    </div>
  );
}

export default ProviderSelector;

--- FILE_END: ./mushi-frontend/src/components/common/LLMInfoModal.jsx ---

--- FILE_START: ./mushi-frontend/src/components/hooks/useDebounce.js ---
// src/hooks/useDebounce.js (NEW FILE)
import { useState, useEffect } from 'react';

function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    // Set debouncedValue to value after the specified delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Return a cleanup function that will be called every time ...
    // ... useEffect is re-called. useEffect will only be re-called ...
    // ... if value or delay changes.
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]); // Only re-call effect if value or delay changes

  return debouncedValue;
}

export default useDebounce;

--- FILE_END: ./mushi-frontend/src/components/hooks/useDebounce.js ---

--- FILE_START: ./mushi-frontend/src/components/hooks/useSearch.js ---
// src/hooks/useSearch.js (NEW FILE)
import { useState, useRef } from 'react';
import useDebounce from './useDebounce'; // Import our new debounce hook

export default function useSearch() {
  const [searchValue, setSearchValue] = useState('');
  const [isFocused, setIsFocused] = useState(false);
  const debouncedValue = useDebounce(searchValue, 300); // 300ms delay

  const suggestionRef = useRef(null);

  // This function will be passed to the onBlur handler of the input
  const handleBlur = () => {
    // We delay the blur event slightly to allow a click on the suggestion box
    // to register before the input loses focus and hides the suggestions.
    setTimeout(() => {
      // If the currently focused element is NOT inside the suggestion box, hide it.
      if (suggestionRef.current && !suggestionRef.current.contains(document.activeElement)) {
        setIsFocused(false);
      }
    }, 150);
  };

  return {
    searchValue,
    setSearchValue,
    isFocused,
    setIsFocused,
    debouncedValue,
    suggestionRef,
    handleBlur,
  };
}

--- FILE_END: ./mushi-frontend/src/components/hooks/useSearch.js ---

--- FILE_START: ./mushi-frontend/src/components/cart/Cart.css ---
.dot {
    width: 4px;
    height: 4px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background: rgba(255, 255, 255, .3);
    display: inline-block;
}

--- FILE_END: ./mushi-frontend/src/components/cart/Cart.css ---

--- FILE_START: ./mushi-frontend/src/components/cart/Cart.jsx ---
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faClosedCaptioning,
  faMicrophone,
} from "@fortawesome/free-solid-svg-icons";
import { FaChevronRight } from "react-icons/fa";
import { useLanguage } from "@/src/context/LanguageContext";
import "./Cart.css";
import { Link, useNavigate } from "react-router-dom";
import { useState } from "react";
import useToolTipPosition from "@/src/hooks/useToolTipPosition";
import Qtip from "../qtip/Qtip";

function Cart({ label, data, path }) {
  const { language } = useLanguage();
  const navigate = useNavigate();
  const [hoveredItem, setHoveredItem] = useState(null);
  const [hoverTimeout, setHoverTimeout] = useState(null);
  const { tooltipPosition, tooltipHorizontalPosition, cardRefs } =
    useToolTipPosition(hoveredItem, data);

  const handleImageEnter = (item, index) => {
    if (hoverTimeout) clearTimeout(hoverTimeout);
    setHoveredItem(item.id + index);
  };

  const handleImageLeave = () => {
    setHoverTimeout(
      setTimeout(() => {
        setHoveredItem(null);
      }, 300) 
    );
  };

  return (
    <div className="flex flex-col w-1/4 space-y-7 max-[1200px]:w-full">
      <h1 className="font-bold text-2xl text-[#ffbade] max-md:text-xl">
        {label}
      </h1>
      <div className="w-full space-y-4 flex flex-col">
        {data &&
          data.slice(0, 5).map((item, index) => (
            <div
              key={index}
              style={{ borderBottom: "1px solid rgba(255, 255, 255, .075)" }}
              className="flex pb-4 items-center relative"
              ref={(el) => (cardRefs.current[index] = el)}
            >
              <img
                src={`https://wsrv.nl/?url=${item.poster}`}
                alt={item.title}
                className="flex-shrink-0 w-[60px] h-[75px] rounded-md object-cover cursor-pointer"
                onClick={() => navigate(`/watch/${item.id}`)}
                onMouseEnter={() => handleImageEnter(item, index)}
                onMouseLeave={handleImageLeave}
              />

              {hoveredItem === item.id + index && window.innerWidth > 1024 && (
                <div
                  className={`absolute ${tooltipPosition} ${tooltipHorizontalPosition} 
                    ${
                      tooltipHorizontalPosition === "left-1/2"
                        ? "translate-x-[-100px]"
                        : "translate-x-[-200px]"
                    } 
                    z-[100000] transform transition-all duration-300 ease-in-out 
                    ${
                      hoveredItem === item.id + index
                        ? "opacity-100 translate-y-0"
                        : "opacity-0 translate-y-2"
                    }`}
                  onMouseEnter={() => {
                    if (hoverTimeout) clearTimeout(hoverTimeout); 
                  }}
                  onMouseLeave={handleImageLeave}
                >
                  <Qtip id={item.id} />
                </div>
              )}

              <div className="flex flex-col ml-4 space-y-2 w-full">
                <Link
                  to={`/${item.id}`}
                  className="w-full line-clamp-2 text-[1em] font-[500] hover:cursor-pointer hover:text-[#ffbade] transform transition-all ease-out max-[1200px]:text-[14px]"
                >
                  {language === "EN" ? item.title : item.japanese_title}
                </Link>
                <div className="flex items-center flex-wrap w-fit space-x-1">
                  {item.tvInfo?.sub && (
                    <div className="flex space-x-1 justify-center items-center bg-[#B0E3AF] rounded-[4px] px-[4px] text-black py-[2px]">
                      <FontAwesomeIcon
                        icon={faClosedCaptioning}
                        className="text-[12px]"
                      />
                      <p className="text-[12px] font-bold">{item.tvInfo.sub}</p>
                    </div>
                  )}

                  {item.tvInfo?.dub && (
                    <div className="flex space-x-1 justify-center items-center bg-[#B9E7FF] rounded-[4px] px-[8px] text-black py-[2px]">
                      <FontAwesomeIcon
                        icon={faMicrophone}
                        className="text-[12px]"
                      />
                      <p className="text-[12px] font-bold">{item.tvInfo.dub}</p>
                    </div>
                  )}
                  <div className="flex items-center w-fit pl-1 gap-x-1">
                    <div className="dot"></div>
                    <p className="text-[14px] text-[#D2D2D3]">
                      {item.tvInfo.showType}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          ))}
        <Link
          to={`/${path}`}
          className="flex w-fit items-baseline rounded-3xl gap-x-2 group"
        >
          <p className="text-white text-[17px] h-fit leading-4 group-hover:text-[#ffbade] transform transition-all ease-out">
            View more
          </p>
          <FaChevronRight className="text-white text-[10px] group-hover:text-[#ffbade] transform transition-all ease-out" />
        </Link>
      </div>
    </div>
  );
}

export default Cart;

--- FILE_END: ./mushi-frontend/src/components/cart/Cart.jsx ---

--- FILE_START: ./mushi-frontend/src/components/trending/Trending.jsx ---
import { Pagination, Navigation } from "swiper/modules";
import { Swiper, SwiperSlide } from "swiper/react";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { useLanguage } from "@/src/context/LanguageContext";
import { Link, useNavigate } from "react-router-dom";

const Trending = ({ trending }) => {
  const { language } = useLanguage();
  const navigate = useNavigate();
  return (
    <div className="mt-6 max-[1200px]:px-4 max-md:px-0">
      <h1 className="text-[#ffbade] text-2xl font-bold max-md:pl-4">
        Trending
      </h1>
      <div className="pr-[60px] relative mx-auto overflow-hidden z-[1] mt-6 max-[759px]:pr-0">
        <Swiper
          className="w-full h-full"
          slidesPerView={3}
          spaceBetween={2}
          breakpoints={{
            479: { spaceBetween: 15 },
            575: { spaceBetween: 15 },
            640: { slidesPerView: 3, spaceBetween: 15 },
            900: { slidesPerView: 4, spaceBetween: 15 },
            1300: { slidesPerView: 6, spaceBetween: 15 },
          }}
          modules={[Pagination, Navigation]}
          navigation={{
            nextEl: ".btn-next",
            prevEl: ".btn-prev",
          }}
        >
          {trending &&
            trending.map((item, idx) => (
              <SwiperSlide
                key={idx}
                className="text-center flex text-[18px] justify-center items-center"
                onClick={() => navigate(`/watch/${item.id}`)}
              >
                <div className="w-full h-auto pb-[115%] relative inline-block overflow-hidden max-[575px]:pb-[150%]">
                  <div className="absolute left-0 top-0 bottom-0 overflow-hidden w-[40px] text-center font-semibold bg-[#201F31] max-[575px]:top-0 max-[575px]:h-[30px] max-[575px]:z-[9] max-[575px]:bg-white">
                    <span className="absolute left-0 right-0 bottom-0 text-[24px] leading-[1.1em] text-center z-[9] transform -rotate-90 max-[575px]:transform max-[575px]:rotate-0 max-[575px]:text-[#111] max-[575px]:text-[18px] max-[575px]:leading-[30px]">
                      {item.number}
                    </span>
                    <div className="w-[150px] h-fit text-left transform -rotate-90 absolute bottom-[100px] left-[-55px] leading-[40px] text-ellipsis whitespace-nowrap overflow-hidden text-white text-[16px] font-medium">
                      {language === "EN" ? item.title : item.japanese_title}
                    </div>
                  </div>
                  <Link
                    to={`/${item.id}`}
                    className="inline-block bg-[#2a2c31] absolute w-auto left-[40px] right-0 top-0 bottom-0 max-[575px]:left-0 max-[575px]:top-0 max-[575px]:bottom-0"
                  >
                    <img
                      src={`https://wsrv.nl/?url=${item.poster}`}
                      alt={item.title}
                      className="block w-full h-full object-cover hover:cursor-pointer"
                      title={item.title}
                    />
                  </Link>
                </div>
              </SwiperSlide>
            ))}
        </Swiper>
        <div className="absolute top-0 right-0 bottom-0 w-[45px] flex flex-col space-y-2 max-[759px]:hidden">
          <div className="btn-next bg-[#383747] h-[50%] flex justify-center items-center rounded-[8px] cursor-pointer transition-all duration-300 ease-out hover:bg-[#ffbade] hover:text-[#383747]">
            <FaChevronRight />
          </div>
          <div className="btn-prev bg-[#383747] h-[50%] flex justify-center items-center rounded-[8px] cursor-pointer transition-all duration-300 ease-out hover:bg-[#ffbade] hover:text-[#383747]">
            <FaChevronLeft />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Trending;

--- FILE_END: ./mushi-frontend/src/components/trending/Trending.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/searchbar/MobileSearch.jsx ---
import { faMagnifyingGlass } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useNavigate } from "react-router-dom";
import useSearch from '@/src/hooks/useSearch'; // Import the new hook
import Suggestion from "./Suggestion"; // Import the suggestion component

function MobileSearch() {
        const navigate = useNavigate();
    const {
        searchValue,
        setSearchValue,
        isFocused,
        setIsFocused,
        debouncedValue,
        suggestionRef,
        handleBlur,
    } = useSearch();

    const handleSearchSubmit = () => {
        if (searchValue.trim()) {
            navigate(`/anime_search?keyword=${encodeURIComponent(searchValue)}`);
            setIsFocused(false); // Hide suggestions after search
        }
    };

    return (
        // The relative positioning is crucial for the absolute positioned suggestion box
        <div className="relative w-full max-w-sm">
            <div className="flex items-center">
                <input
                    type="text"
                    className="bg-white/10 border border-white/20 text-white rounded-l-full py-2 px-4 focus:outline-none focus:ring-2 focus:ring-pink-400 w-full"
                    placeholder="Search anime..."
                    value={searchValue}
                    onChange={(e) => setSearchValue(e.target.value)}
                    onFocus={() => setIsFocused(true)}
                    onBlur={handleBlur}
                    onKeyDown={(e) => e.key === 'Enter' && handleSearchSubmit()}
                />
                <button
                    className="bg-pink-500 hover:bg-pink-600 p-3 rounded-r-full text-white"
                    onClick={handleSearchSubmit}
                    aria-label="Search"
                >
                    <FontAwesomeIcon icon={faMagnifyingGlass} />
                </button>
            </div>

            {/* Conditionally render the suggestion box */}
            {isFocused && debouncedValue && (
                <div ref={suggestionRef}>
                    <Suggestion keyword={debouncedValue} />
                </div>
            )}
        </div>
    );
}


export default MobileSearch;

--- FILE_END: ./mushi-frontend/src/components/anime/searchbar/MobileSearch.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/searchbar/WebSearch.jsx ---
// src/components/anime/searchbar/WebSearch.jsx (UPDATED)
import { faMagnifyingGlass } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useNavigate } from "react-router-dom";
import useSearch from '@/src/hooks/useSearch'; // Import the new hook
import Suggestion from "./Suggestion"; // Import the suggestion component

function WebSearch() {
    const navigate = useNavigate();
    const {
        searchValue,
        setSearchValue,
        isFocused,
        setIsFocused,
        debouncedValue,
        suggestionRef,
        handleBlur,
    } = useSearch();

    const handleSearchSubmit = () => {
        if (searchValue.trim()) {
            navigate(`/anime_search?keyword=${encodeURIComponent(searchValue)}`);
            setIsFocused(false); // Hide suggestions after search
        }
    };

    return (
        // The relative positioning is crucial for the absolute positioned suggestion box
        <div className="relative w-full max-w-sm">
            <div className="flex items-center">
                <input
                    type="text"
                    className="bg-white/10 border border-white/20 text-white rounded-l-full py-2 px-4 focus:outline-none focus:ring-2 focus:ring-pink-400 w-full"
                    placeholder="Search anime..."
                    value={searchValue}
                    onChange={(e) => setSearchValue(e.target.value)}
                    onFocus={() => setIsFocused(true)}
                    onBlur={handleBlur}
                    onKeyDown={(e) => e.key === 'Enter' && handleSearchSubmit()}
                />
                <button
                    className="bg-pink-500 hover:bg-pink-600 p-3 rounded-r-full text-white"
                    onClick={handleSearchSubmit}
                    aria-label="Search"
                >
                    <FontAwesomeIcon icon={faMagnifyingGlass} />
                </button>
            </div>

            {/* Conditionally render the suggestion box */}
            {isFocused && debouncedValue && (
                <div ref={suggestionRef}>
                    <Suggestion keyword={debouncedValue} />
                </div>
            )}
        </div>
    );
}

export default WebSearch;

--- FILE_END: ./mushi-frontend/src/components/anime/searchbar/WebSearch.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/searchbar/Suggestion.jsx ---
// src/components/anime/searchbar/Suggestion.jsx (NEW FILE)
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { api } from '@/src/services/api';

function Suggestion({ keyword }) {
  const [suggestions, setSuggestions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!keyword) {
      setSuggestions([]);
      return;
    }

    setIsLoading(true);
    const fetchSuggestions = async () => {
      try {
        const data = await api.anime.getSearchSuggestions(keyword);
        // The API returns an object with a 'results' array
        setSuggestions(data?.results || []);
      } catch (error) {
        console.error("Failed to fetch search suggestions:", error);
        setSuggestions([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchSuggestions();
  }, [keyword]); // Depends on the debounced keyword

  if (isLoading) {
    return (
      <div className="absolute top-full mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg shadow-lg p-4 text-center text-gray-400">
        Mushi is searching...
      </div>
    );
  }

  if (suggestions.length === 0) {
    return null; // Don't render if no suggestions
  }

  return (
    <div className="absolute top-full mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg shadow-lg max-h-80 overflow-y-auto">
      <ul className="divide-y divide-gray-700">
        {suggestions.map((anime) => (
          <li key={anime.id}>
            <Link
              to={`/anime/details/${anime.id}`}
              className="flex items-center gap-4 p-3 hover:bg-purple-600/50 transition-colors"
            >
              <img src={anime.poster_url} alt={anime.title} className="w-10 h-14 object-cover rounded-md flex-shrink-0" />
              <div className="flex-grow">
                <p className="font-semibold text-white line-clamp-1">{anime.title}</p>
                <p className="text-sm text-gray-400">{anime.show_type}</p>
              </div>
            </Link>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Suggestion;

--- FILE_END: ./mushi-frontend/src/components/anime/searchbar/Suggestion.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/AnimeTopTenList.jsx ---
// mushi-frontend/src/components/anime/AnimeTopTenList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Import your API service

/**
 * AnimeTopTenList component fetches and displays the top 10 anime for today,
 * this week, and this month from the backend.
 */
function AnimeTopTenList() {
  const [topTenData, setTopTenData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTopTenData = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.anime.getTopTen(); // Call the API to get top ten data
        if (data) {
          setTopTenData(data);
          console.log("Mushi fetched the sparkling Top 10 lists for you, Senpai! (ﾉ´ヮ´)ﾉ*:･ﾟ✧", data); // Debugging log
        } else {
          setError("Eeeh~ Mushi couldn't fetch the Top 10 anime data, gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch Top 10 anime data:", err);
        setError(`Mushi encountered an error while fetching Top 10 data: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchTopTenData();
  }, []);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-60 text-indigo-300 text-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-purple-500/30">
        Mushi is ranking the top anime! Calculating, calculating!~ ヾ(＾-＾)ノ
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900/30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!topTenData || (Object.keys(topTenData).length === 0 && topTenData.constructor === Object)) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg mx-auto max-w-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-gray-700/50">
        Muu... No Top 10 anime data found. (T_T)
      </div>
    );
  }

  // Helper function to render each top 10 list
  const renderTopTenList = (title, list) => {
    if (!list || list.length === 0) return null; // Don't render section if list is empty
    return (
      <section className="mb-10 p-6 bg-white/5 backdrop-blur-md rounded-3xl shadow-2xl border border-white/10">
        <h3 className="text-3xl font-extrabold text-center mb-6
                       bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                       drop-shadow-lg [text-shadow:0_0_10px_rgba(255,100,255,0.2)]">
          {title}
        </h3>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
          {list.map((anime) => (
            <div key={anime.id || anime.name} className="bg-gray-800 rounded-xl shadow-lg overflow-hidden
                                                      transform hover:scale-105 transition-transform duration-300
                                                      border border-gray-700 hover:border-indigo-500">
              <img
                src={anime.poster_url || 'https://placehold.co/150x220/333/FFF?text=No+Image'}
                alt={anime.title || anime.name || 'Anime Poster'}
                className="w-full h-auto object-cover rounded-t-xl"
                onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/150x220/333/FFF?text=Image+Error'; }}
              />
              <div className="p-4">
                <h4 className="text-white text-lg font-semibold truncate">{anime.title || anime.name}</h4>
                {anime.show_type && <p className="text-gray-400 text-sm">{anime.show_type}</p>}
                {anime.number && <p className="text-indigo-300 font-bold text-lg mt-1">#{anime.number}</p>}
                {anime.score && (
                  <p className="text-yellow-400 text-sm mt-1 flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.538 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.783.57-1.838-.197-1.538-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.929 8.72c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                    {anime.score.toFixed(2)}
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      </section>
    );
  };

  return (
    <div className="p-6 text-gray-100">
      <h2 className="text-4xl font-extrabold text-center mb-10
                     bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600
                     drop-shadow-lg [text-shadow:0_0_15px_rgba(150,100,255,0.4)]">
        Mushi's Top 10 Anime Lists! 👑
      </h2>

      {renderTopTenList("Top 10 Today", topTenData.today)}
      {renderTopTenList("Top 10 This Week", topTenData.week)}
      {renderTopTenList("Top 10 This Month", topTenData.month)}

      {/* You can add more sections or integrate genres here later! */}
    </div>
  );
}

export default AnimeTopTenList;

--- FILE_END: ./mushi-frontend/src/components/anime/AnimeTopTenList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/category/AnimeCategoryList.jsx ---
// mushi-frontend/src/components/anime/category/AnimeCategoryList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../../services/api'; // Correct path to api.js
import { ChevronLeft, ChevronRight } from 'lucide-react'; // For pagination icons
import { Link } from 'react-router-dom'; // For linking to anime details

/**
 * AnimeCategoryList component fetches and displays a list of anime for a specific category.
 * It includes pagination controls.
 *
 * @param {object} props
 * @param {string} props.category - The category slug to fetch anime for (e.g., 'genre/action', 'top-airing').
 * @param {string} [props.categoryTitle] - Optional human-readable title for the category (e.g., 'Action Anime').
 */
function AnimeCategoryList({ category, categoryTitle = "Category" }) {
  const [animeList, setAnimeList] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    const fetchCategoryAnime = async () => {
      if (!category) {
        setError("Eeeh~ Senpai, Mushi needs a category to find anime! (•́-•̀)");
        setIsLoading(false);
        return;
      }

      try {
        setIsLoading(true);
        setError(null); // Clear previous errors
        const data = await api.anime.getByCategory(category, currentPage); // Pass category and page

        // CORRECTED: Access data.results.data for the anime list and data.results.totalPages
        if (data && data.data) { // Check if data and data.data exist
          setAnimeList(data.data); // Set animeList to data.data (the actual array of anime)
          setTotalPages(data.totalPages || 1); // Get totalPages from data.totalPages
          console.log(`Mushi found anime for category '${category}' on page ${currentPage}, desu!~`, data.data);
        } else {
          setError("Muu... Mushi couldn't find anime for that category. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error(`Uwaah! Failed to fetch anime for category '${category}' on page ${currentPage}:`, err);
        setError(`Mushi encountered an error while fetching category data: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCategoryAnime();
  }, [category, currentPage]); // Re-run effect when category or currentPage changes

  const handlePrevPage = () => {
    setCurrentPage((prev) => Math.max(1, prev - 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(totalPages, prev + 1));
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-60 text-indigo-300 text-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-purple-500/30">
        Mushi is fetching {categoryTitle} anime! Waku waku!~ ☆
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900/30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!animeList || animeList.length === 0) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg mx-auto max-w-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-gray-700/50">
        Muu... No anime found for {categoryTitle}. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 text-gray-100">
      <h2 className="text-4xl font-extrabold text-center mb-10
                     bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600
                     drop-shadow-lg [text-shadow:0_0_15px_rgba(150,100,255,0.4)]">
        {categoryTitle}
      </h2>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
        {animeList.map((anime) => (
          <div key={anime.id} className="bg-white/5 backdrop-blur-md rounded-xl shadow-lg overflow-hidden
                                        transform hover:scale-105 transition-transform duration-300
                                        border border-white/10 hover:border-indigo-500">
            <Link to={`/app/anime/details/${anime.id}`} className="block">
              <img
                src={anime.poster_url || 'https://placehold.co/150x220/333/FFF?text=No+Image'}
                alt={anime.title}
                className="w-full h-auto object-cover rounded-t-xl"
                onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/150x220/333/FFF?text=Image+Error'; }}
              />
              <div className="p-4">
                <h4 className="text-white text-lg font-semibold truncate mb-1">{anime.title}</h4>
                {anime.show_type && <p className="text-gray-400 text-sm">{anime.show_type}</p>}
                {anime.adult_content && <span className="text-red-400 text-xs font-bold mt-1 inline-block">18+</span>}
                {anime.score && (
                  <p className="text-yellow-400 text-sm mt-1 flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.538 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.783.57-1.838-.197-1.538-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.929 8.72c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                    {anime.score.toFixed(2)}
                  </p>
                )}
              </div>
            </Link>
          </div>
        ))}
      </div>

      {/* Pagination Controls */}
      {totalPages > 1 && (
        <div className="flex justify-center items-center gap-4 mt-10">
          <button
            onClick={handlePrevPage}
            disabled={currentPage === 1}
            className="p-3 rounded-full bg-purple-600 text-white hover:bg-purple-700
                       disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200
                       shadow-lg hover:shadow-xl"
            title="Previous Page"
          >
            <ChevronLeft size={24} />
          </button>
          <span className="text-gray-300 font-medium text-lg">Page {currentPage} of {totalPages}</span>
          <button
            onClick={handleNextPage}
            disabled={currentPage === totalPages}
            className="p-3 rounded-full bg-purple-600 text-white hover:bg-purple-700
                       disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200
                       shadow-lg hover:shadow-xl"
            title="Next Page"
          >
            <ChevronRight size={24} />
          </button>
        </div>
      )}
    </div>
  );
}

export default AnimeCategoryList;

--- FILE_END: ./mushi-frontend/src/components/anime/category/AnimeCategoryList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/details/AnimeDetailViewer.jsx ---
// src/views/AnimeDetailView.jsx
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { api } from '@/src/services/api';

// Import our new and existing components
import VoiceActorList from '@/src/components/anime/actors/VoiceActorList';
import CategoryCard from '@/src/components/categorycard/CategoryCard'; // For related/recommended

function AnimeDetailView() {
  const { animeId } = useParams();
  const navigate = useNavigate();

  const [animeDetails, setAnimeDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    window.scrollTo(0, 0); // Scroll to top on new anime load
    setIsLoading(true);
    api.anime.getDetails(animeId)
      .then(data => {
        if (data) {
          setAnimeDetails(data);
        } else {
          setError("No details found for this anime.");
        }
      })
      .catch(err => setError(`Failed to fetch anime details: ${err.message}`))
      .finally(() => setIsLoading(false));
  }, [animeId]);

  const handleAskMushi = () => {
    if (!animeDetails) return;
    const preloadedQuery = `Tell me more about the anime "${animeDetails.title}". Here is a quick summary to give you context: ${animeDetails.synopsis}`;
    navigate('/mushi_ai', { state: { preloadedQuery } });
  };

  if (isLoading) return <div className="text-center p-10 text-indigo-300 animate-pulse">Mushi is loading the details...</div>;
  if (error) return <div className="text-center p-10 text-red-400">{error}</div>;
  if (!animeDetails) return null;

  const firstEpisodeId = animeDetails.episodes?.[0]?.id;

  // Helper for displaying info neatly
  const infoItems = [
    { label: 'Type', value: animeDetails.show_type },
    { label: 'Status', value: animeDetails.status },
    { label: 'Aired', value: animeDetails.aired },
    { label: 'Premiered', value: animeDetails.premiered },
    { label: 'Episodes', value: animeDetails.total_episodes_count || 'N/A' },
    { label: 'Duration', value: animeDetails.duration },
    { label: 'Rating', value: animeDetails.rating },
  ].filter(item => item.value); // Filter out items with no value

  return (
    <div className="p-4 md:p-6 text-gray-100">
      {/* Header with Title and Watch/Ask Buttons */}
      <div className="mb-8">
        <h1 className="text-3xl md:text-5xl font-extrabold text-white mb-4 drop-shadow-lg">{animeDetails.title}</h1>
        <div className="flex flex-wrap gap-4">
          {firstEpisodeId && (
            <Link to={`/watch/${animeId}/${firstEpisodeId}`} className="flex-shrink-0">
              <button className="px-6 py-3 bg-gradient-to-r from-pink-500 to-purple-500 text-white font-bold text-lg rounded-full shadow-lg hover:scale-105 transition-transform">
                Watch Now
              </button>
            </Link>
          )}
          <button
            onClick={handleAskMushi}
            className="px-6 py-3 bg-gradient-to-r from-teal-500 to-cyan-500 text-white font-bold text-lg rounded-full shadow-lg hover:scale-105 transition-transform"
          >
            Ask Mushi about this...
          </button>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Left Sidebar / Info Column */}
        <aside className="lg:col-span-1 space-y-6">
          <img src={animeDetails.poster_url} alt={animeDetails.title} className="w-full h-auto object-cover rounded-2xl shadow-xl" />
          <div className="bg-white/5 p-4 rounded-xl border border-white/10">
            <h3 className="text-xl font-bold mb-3 text-pink-400">Information</h3>
            <div className="space-y-2 text-sm">
              {infoItems.map(item => (
                <p key={item.label}><strong className="font-semibold text-gray-300">{item.label}:</strong> {item.value}</p>
              ))}
               {animeDetails.genres?.length > 0 && (
                 <p><strong className="font-semibold text-gray-300">Genres:</strong> {animeDetails.genres.join(', ')}</p>
               )}
            </div>
          </div>
        </aside>

        {/* Right Content Area */}
        <main className="lg:col-span-3 space-y-8">
          <div>
            <h3 className="text-2xl font-bold mb-2 text-gray-200">Synopsis</h3>
            <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">{animeDetails.synopsis}</p>
          </div>

          <VoiceActorList characters={animeDetails.characters_voice_actors} />

          {animeDetails.related_anime?.length > 0 && (
             <CategoryCard
                label="Related Anime"
                data={animeDetails.related_anime}
                showViewMore={false} // Don't need a "view more" link here
             />
          )}

          {animeDetails.recommended_anime?.length > 0 && (
             <CategoryCard
                label="Recommended Anime"
                data={animeDetails.recommended_anime}
                showViewMore={false}
             />
          )}
        </main>
      </div>
    </div>
  );
}

export default AnimeDetailView;

--- FILE_END: ./mushi-frontend/src/components/anime/details/AnimeDetailViewer.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/AnimeHomeDashboard.jsx ---
// mushi-frontend/src/components/anime/AnimeHomeDashboard.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Import your API service
import { Link } from 'react-router-dom'; // NEW: Import Link for navigation

/**
 * AnimeHomeDashboard component fetches and displays various categorized lists of anime
 * for a home or dashboard view, such as spotlights, trending, and schedules.
 */
function AnimeHomeDashboard() {
  const [homeData, setHomeData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchHomeData = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        const data = await api.anime.getHomeData();
        if (data) {
          setHomeData(data);
          console.log("Mushi found home data for you, Senpai! ✨", data); // Debugging log
        } else {
          // This case might be hit if handleError in api.js throws, but returns null from catch
          setError("Eeeh~ Mushi couldn't fetch the home anime data, gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch anime home data:", err);
        setError(`Mushi encountered an error while fetching home data: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchHomeData();
  }, []);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-48 text-indigo-300 text-lg">
        Mushi is fetching your anime dashboard! Please wait warmly~ (≧∇≦)/
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900 bg-opacity-30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!homeData) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg mx-auto max-w-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-gray-700/50">
        Muu... No anime home data found. (T_T)
      </div>
    );
  }

  // Helper function to render common anime lists
  const renderAnimeList = (title, list) => {
    if (!list || list.length === 0) return null;
    return (
      <section className="mb-10 p-6 bg-white/5 backdrop-blur-md rounded-3xl shadow-2xl border border-white/10">
        <h3 className="text-3xl font-extrabold text-center mb-6
                       bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                       drop-shadow-lg [text-shadow:0_0_10px_rgba(255,100,255,0.2)]">
          {title}
        </h3>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6">
          {list.map((anime) => (
            // NEW: Wrap each anime card with a Link to its detail page
            <Link to={`/app/anime/details/${anime.id}`} key={anime.id} className="block bg-gray-800 rounded-xl shadow-lg overflow-hidden transform hover:scale-105 transition-transform duration-300 border border-gray-700 hover:border-indigo-500">
              <img
                src={anime.poster_url || 'https://placehold.co/150x220/333/FFF?text=No+Image'}
                alt={anime.title}
                className="w-full h-auto object-cover rounded-t-xl"
                onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/150x220/333/FFF?text=Image+Error'; }}
              />
              <div className="p-4">
                <h4 className="text-white text-lg font-semibold truncate mb-1">{anime.title}</h4>
                {anime.show_type && <p className="text-gray-400 text-sm">{anime.show_type}</p>}
                {anime.score && (
                  <p className="text-yellow-400 text-sm mt-1 flex items-center">
                    <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.538 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.783.57-1.838-.197-1.538-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.929 8.72c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69l1.07-3.292z" />
                    </svg>
                    {anime.score.toFixed(2)}
                  </p>
                )}
              </div>
            </Link>
          ))}
        </div>
      </section>
    );
  };

  // Helper function to render schedule lists
  const renderScheduleList = (title, list) => {
    if (!list || list.length === 0) return null;
    return (
      <section className="mb-10 p-6 bg-white/5 backdrop-blur-md rounded-3xl shadow-2xl border border-white/10">
        <h3 className="text-3xl font-extrabold text-center mb-6
                       bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                       drop-shadow-lg [text-shadow:0_0_10px_rgba(255,100,255,0.2)]">
          {title}
        </h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {list.map((item, index) => (
            <div key={item.id || index} className="bg-gray-800 rounded-xl shadow-lg p-4 transform hover:scale-105 transition-transform duration-300 border border-gray-700 hover:border-indigo-500">
              <h4 className="text-white text-lg font-semibold truncate mb-1">{item.title}</h4>
              <p className="text-gray-400 text-sm">Episode: {item.episode_no}</p> {/* Changed from item.episode to item.episode_no */}
              <p className="text-gray-400 text-sm">Release: {item.release_date}</p>
            </div>
          ))}
        </div>
      </section>
    );
  };

  return (
    <div className="p-6 text-gray-100 min-h-screen">
      <h2 className="text-4xl font-extrabold text-center mb-10
                     bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600
                     drop-shadow-lg [text-shadow:0_0_15px_rgba(150,100,255,0.4)]">
        Welcome to Mushi's Anime Wonderland, Senpai! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>

      {renderAnimeList("Spotlights", homeData.spotlights)}
      {renderAnimeList("Trending Anime", homeData.trending)}
      {renderScheduleList("Today's Schedule", homeData.today_schedule)}
      {renderAnimeList("Top Airing Anime", homeData.top_airing)}
      {renderAnimeList("Most Popular Anime", homeData.most_popular)}
      {renderAnimeList("Most Favorite Anime", homeData.most_favorite)}
      {renderAnimeList("Latest Completed Anime", homeData.latest_completed)}
      {renderAnimeList("Latest Episodes", homeData.latest_episode)}

      {/* Genres Section - styled similarly to other sections */}
      {homeData.genres && homeData.genres.length > 0 && (
        <section className="mb-10 p-6 bg-white/5 backdrop-blur-md rounded-3xl shadow-2xl border border-white/10">
          <h3 className="text-3xl font-extrabold text-center mb-6
                         bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                         drop-shadow-lg [text-shadow:0_0_10px_rgba(255,100,255,0.2)]">
            Explore Genres
          </h3>
          <div className="flex flex-wrap justify-center gap-3">
            {homeData.genres.map((genre, index) => (
              <span key={index} className="bg-purple-700 text-white text-sm font-medium py-2 px-4 rounded-full
                                          hover:bg-purple-600 transition-colors duration-200 cursor-pointer
                                          shadow-md hover:shadow-lg transform hover:scale-105">
                {genre}
              </span>
            ))}
          </div>
        </section>
      )}
    </div>
  );
}

export default AnimeHomeDashboard;

--- FILE_END: ./mushi-frontend/src/components/anime/AnimeHomeDashboard.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/actors/VoiceActorList.jsx ---
// src/components/anime/actors/VoiceActorList.jsx
import React from 'react';
import VoiceActor from './VoiceActor';

function VoiceActorList({ characters }) {
  if (!characters || characters.length === 0) {
    return null; // Don't render if there's no data
  }

  return (
    <div className="bg-white/5 p-4 rounded-xl border border-white/10">
      <h3 className="text-xl font-bold mb-4 text-pink-400">Characters & Voice Actors</h3>
      <div className="space-y-3">
        {characters.map((charInfo) =>
          // A character can have multiple voice actors (e.g., Japanese, English)
          charInfo.voice_actors.map((va) => (
            <VoiceActor
              key={`${charInfo.character_id}-${va.id}`}
              character={charInfo}
              voiceActor={va}
            />
          ))
        )}
      </div>
    </div>
  );
}

export default VoiceActorList;

--- FILE_END: ./mushi-frontend/src/components/anime/actors/VoiceActorList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/actors/VoiceActor.jsx ---
// src/components/anime/actors/VoiceActor.jsx
import React from 'react';
import { Link } from 'react-router-dom';

function VoiceActor({ character, voiceActor }) {
  return (
    <div className="flex items-center gap-3 p-2 bg-gray-800/50 rounded-lg transition-colors hover:bg-gray-700/70">
      {/* Character Info */}
      <Link to={`/anime/character/${character.character_id}`} className="flex items-center gap-2 flex-1 hover:opacity-80 transition-opacity">
        <img
          src={character.character_poster_url}
          alt={character.character_name}
          className="w-12 h-12 object-cover rounded-md flex-shrink-0"
        />
        <div className="text-left">
          <p className="text-sm font-semibold text-gray-200 line-clamp-2">{character.character_name}</p>
          <p className="text-xs text-gray-400">{character.character_cast}</p>
        </div>
      </Link>

      {/* Voice Actor Info */}
      <Link to={`/anime/actors/${voiceActor.id}`} className="flex items-center gap-2 flex-1 text-right justify-end hover:opacity-80 transition-opacity">
        <div className="text-right">
          <p className="text-sm font-semibold text-gray-200 line-clamp-2">{voiceActor.name}</p>
          <p className="text-xs text-gray-400">Voice Actor</p>
        </div>
        <img
          src={voiceActor.poster_url}
          alt={voiceActor.name}
          className="w-12 h-12 object-cover rounded-md flex-shrink-0"
        />
      </Link>
    </div>
  );
}

export default VoiceActor;

--- FILE_END: ./mushi-frontend/src/components/anime/actors/VoiceActor.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/AnimeQuickInfoCard.jsx ---
// mushi-frontend/src/components/anime/AnimeQuickInfoCard.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * AnimeQuickInfoCard component fetches and displays a "quick tip" or brief information
 * about a specific anime based on its qtipId.
 *
 * @param {object} props
 * @param {number} props.qtipId - The ID of the Qtip/quick info to display.
 */
function AnimeQuickInfoCard({ qtipId }) {
  const [qtipInfo, setQtipInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchQtip = async () => {
      if (!qtipId) {
        setError("Eeeh~ Senpai, Mushi needs a Qtip ID to show quick info! (•́-•̀)");
        setIsLoading(false);
        return;
      }

      try {
        setIsLoading(true);
        setError(null); // Clear previous errors
        const data = await api.anime.getQtipInfo(qtipId); // Fetch Qtip info

        if (data) {
          setQtipInfo(data);
          console.log(`Mushi found quick info for Qtip ID: ${qtipId}, desu!~`, data);
        } else {
          setError("Muu... Mushi couldn't find quick info for that ID. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error(`Uwaah! Failed to fetch Qtip info for ID ${qtipId}:`, err);
        setError(`Mushi encountered an error while fetching quick info: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchQtip();
  }, [qtipId]); // Re-run effect when qtipId changes

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-24 text-indigo-300 text-sm
                      bg-white/5 backdrop-blur-sm rounded-xl shadow-inner border border-purple-500/30">
        Mushi is thinking of a quick tip! Waku waku!~ ☆
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-xl bg-red-900/30 text-sm shadow-md">
        Oh no! {error}
      </div>
    );
  }

  if (!qtipInfo) {
    return (
      <div className="text-gray-400 text-center p-4 text-sm
                      bg-white/5 backdrop-blur-sm rounded-xl shadow-inner border border-gray-700/50">
        Muu... No quick info found. (T_T)
      </div>
    );
  }

  return (
    <div className="bg-white/5 backdrop-blur-md rounded-xl shadow-2xl p-6 text-gray-100 border border-purple-500/30
                    transform hover:scale-[1.02] transition-transform duration-300 hover:shadow-purple-500/20">
      <h3 className="text-2xl font-bold mb-3
                     bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400
                     drop-shadow-lg [text-shadow:0_0_8px_rgba(255,100,255,0.2)]">
        {qtipInfo.title || "Quick Info"}
      </h3>
      <p className="text-gray-200 text-base leading-relaxed mb-4">{qtipInfo.description || "No description provided."}</p>

      {/* Optional: Add a link or button for more details */}
      {qtipInfo.link && (
        <a
          href={qtipInfo.link}
          target="_blank"
          rel="noopener noreferrer"
          className="inline-flex items-center text-indigo-400 hover:text-indigo-300 text-sm font-medium
                     bg-purple-800/50 px-4 py-2 rounded-full transition-all duration-200
                     hover:bg-purple-700/70 shadow-md hover:shadow-lg"
        >
          Learn More~
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
            <path strokeLinecap="round" strokeLinejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </a>
      )}
    </div>
  );
}

export default AnimeQuickInfoCard;

--- FILE_END: ./mushi-frontend/src/components/anime/AnimeQuickInfoCard.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/characters/CharacterDetailViewer.jsx ---
// mushi-frontend/src/components/anime/characters/CharacterDetailViewer.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../../services/api'; // Correct path to api.js
import { Link } from 'react-router-dom'; // For linking to anime details

/**
 * CharacterDetailViewer component fetches and displays comprehensive details for a specific anime character.
 * It takes the character ID as a prop.
 *
 * @param {object} props
 * @param {string} props.characterId - The ID of the character to display details for.
 */
function CharacterDetailViewer({ characterId }) {
  const [characterDetails, setCharacterDetails] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDetails = async () => {
      if (!characterId) {
        setError("Eeeh~ Senpai, Mushi needs a Character ID to show details! (•́-•̀)");
        setIsLoading(false);
        return;
      }

      try {
        setIsLoading(true);
        setError(null); // Clear previous errors
        const data = await api.anime.getCharacterDetails(characterId); // Fetch character details

        if (data) {
          setCharacterDetails(data);
          console.log(`Mushi found all the sparkling details for Character ID: ${characterId}, desu!~`, data);
        } else {
          setError("Muu... Mushi couldn't find details for that character. Gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error(`Uwaah! Failed to fetch details for character ID ${characterId}:`, err);
        setError(`Mushi encountered an error while fetching character details: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchDetails();
  }, [characterId]); // Re-run effect when characterId changes

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen-75 text-indigo-300 text-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-purple-500/30">
        Mushi is gathering character details! Please wait warmly~ (≧∇≦)/
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900/30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!characterDetails) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg mx-auto max-w-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-gray-700/50">
        Muu... No character details found. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 text-gray-100 min-h-screen">
      <div className="bg-white/5 backdrop-blur-md rounded-3xl shadow-2xl p-8 border border-white/10">
        <h2 className="text-4xl font-extrabold text-center mb-8
                       bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600
                       drop-shadow-lg [text-shadow:0_0_15px_rgba(150,100,255,0.4)]">
          {characterDetails.name} <span className="text-purple-400 text-xl">({characterDetails.japanese_name})</span>
        </h2>

        <div className="flex flex-col md:flex-row gap-8 mb-8 items-start">
          {/* Character Image */}
          <div className="flex-shrink-0 w-full md:w-1/3 lg:w-1/4">
            <img
              src={characterDetails.image_url || 'https://placehold.co/300x450/333/FFF?text=Character+Image'}
              alt={characterDetails.name}
              className="w-full h-auto object-cover rounded-2xl shadow-xl border-4 border-indigo-600/50"
              onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/300x450/333/FFF?text=Image+Error'; }}
            />
          </div>

          {/* Character Info */}
          <div className="flex-grow">
            <p className="text-gray-300 text-base leading-relaxed mb-6 whitespace-pre-wrap">
              {characterDetails.description || "No description available. Gomen'nasai!"}
            </p>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-lg">
              {characterDetails.anime_debut && (
                <p className="text-purple-300"><strong className="text-white">Anime Debut:</strong> {characterDetails.anime_debut}</p>
              )}
              {characterDetails.manga_debut && (
                <p className="text-purple-300"><strong className="text-white">Manga Debut:</strong> {characterDetails.manga_debut}</p>
              )}
              {characterDetails.birth_date && (
                <p className="text-purple-300"><strong className="text-white">Birthday:</strong> {characterDetails.birth_date}</p>
              )}
              {characterDetails.age && (
                <p className="text-purple-300"><strong className="text-white">Age:</strong> {characterDetails.age}</p>
              )}
              {characterDetails.gender && (
                <p className="text-purple-300"><strong className="text-white">Gender:</strong> {characterDetails.gender}</p>
              )}
              {characterDetails.height && (
                <p className="text-purple-300"><strong className="text-white">Height:</strong> {characterDetails.height}</p>
              )}
              {characterDetails.weight && (
                <p className="text-purple-300"><strong className="text-white">Weight:</strong> {characterDetails.weight}</p>
              )}
              {characterDetails.blood_type && (
                <p className="text-purple-300"><strong className="text-white">Blood Type:</strong> {characterDetails.blood_type}</p>
              )}
            </div>
          </div>
        </div>

        {/* Voice Actors Section */}
        {characterDetails.voice_actors && characterDetails.voice_actors.length > 0 && (
          <section className="mb-8 p-6 bg-white/5 rounded-2xl border border-white/10 shadow-inner">
            <h3 className="text-2xl font-bold mb-4
                           bg-clip-text text-transparent bg-gradient-to-r from-pink-300 to-purple-300
                           drop-shadow-lg [text-shadow:0_0_8px_rgba(255,100,255,0.1)]">
              Voice Actors
            </h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {characterDetails.voice_actors.map((actor) => (
                <Link to={`/app/anime/voice_actor/${actor.id}`} key={actor.id} className="block bg-gray-800 rounded-xl shadow-md overflow-hidden
                                                                                              transform hover:scale-105 transition-transform duration-300
                                                                                              border border-gray-700 hover:border-purple-500">
                  <img
                    src={actor.image_url || 'https://placehold.co/100x100/444/CCC?text=VA'}
                    alt={actor.name}
                    className="w-full h-auto object-cover rounded-t-xl"
                    onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/100x100/444/CCC?text=VA'; }}
                  />
                  <div className="p-3 text-center">
                    <h4 className="text-white text-md font-semibold line-clamp-2">{actor.name}</h4>
                    <p className="text-gray-400 text-sm">{actor.language}</p>
                  </div>
                </Link>
              ))}
            </div>
          </section>
        )}

        {/* Animeography Section */}
        {characterDetails.animeography && characterDetails.animeography.length > 0 && (
          <section className="mb-8 p-6 bg-white/5 rounded-2xl border border-white/10 shadow-inner">
            <h3 className="text-2xl font-bold mb-4
                           bg-clip-text text-transparent bg-gradient-to-r from-pink-300 to-purple-300
                           drop-shadow-lg [text-shadow:0_0_8px_rgba(255,100,255,0.1)]">
              Animeography
            </h3>
            <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-4">
              {characterDetails.animeography.map((anime) => (
                <Link to={`/app/anime/details/${anime.id}`} key={anime.id} className="block bg-gray-800 rounded-xl shadow-md overflow-hidden
                                                                                           transform hover:scale-105 transition-transform duration-300
                                                                                           border border-gray-700 hover:border-purple-500">
                  <img
                    src={anime.poster_url || 'https://placehold.co/80x120/444/CCC?text=Anime'}
                    alt={anime.title || 'Anime'}
                    className="w-full h-auto object-cover rounded-t-xl"
                    onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/80x120/444/CCC?text=Anime'; }}
                  />
                  <div className="p-3 text-center">
                    <h5 className="text-white text-sm font-semibold line-clamp-2">{anime.title}</h5>
                    <p className="text-gray-400 text-xs mt-1">{anime.role}</p>
                  </div>
                </Link>
              ))}
            </div>
          </section>
        )}

        {/* Mangaography Section (if applicable) */}
        {characterDetails.mangaography && characterDetails.mangaography.length > 0 && (
          <section className="mb-8 p-6 bg-white/5 rounded-2xl border border-white/10 shadow-inner">
            <h3 className="text-2xl font-bold mb-4
                           bg-clip-text text-transparent bg-gradient-to-r from-pink-300 to-purple-300
                           drop-shadow-lg [text-shadow:0_0_8px_rgba(255,100,255,0.1)]">
              Mangaography
            </h3>
            <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-4">
              {characterDetails.mangaography.map((manga) => (
                <div key={manga.id} className="block bg-gray-800 rounded-xl shadow-md overflow-hidden
                                              transform hover:scale-105 transition-transform duration-300
                                              border border-gray-700 hover:border-purple-500">
                  {/* Assuming manga also has a poster_url and title */}
                  <img
                    src={manga.poster_url || 'https://placehold.co/80x120/444/CCC?text=Manga'}
                    alt={manga.title || 'Manga'}
                    className="w-full h-auto object-cover rounded-t-xl"
                    onError={(e) => { e.target.onerror = null; e.target.src='https://placehold.co/80x120/444/CCC?text=Manga'; }}
                  />
                  <div className="p-3 text-center">
                    <h5 className="text-white text-sm font-semibold line-clamp-2">{manga.title}</h5>
                    <p className="text-gray-400 text-xs mt-1">{manga.role}</p>
                  </div>
                </div>
              ))}
            </div>
          </section>
        )}

      </div>
    </div>
  );
}

export default CharacterDetailViewer;

--- FILE_END: ./mushi-frontend/src/components/anime/characters/CharacterDetailViewer.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/AnimeTopSearchList.jsx ---
// mushi-frontend/src/components/anime/AnimeTopSearchList.jsx
import React, { useState, useEffect } from 'react';
import { api } from '../../services/api'; // Import your API service

/**
 * AnimeTopSearchList component fetches and displays a list of top searched anime
 * or popular search terms from the backend.
 */
function AnimeTopSearchList() {
  const [topSearchData, setTopSearchData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTopSearchData = async () => {
      try {
        setIsLoading(true);
        setError(null); // Clear any previous errors
        // You can specify a limit here if desired, e.g., api.anime.getTopSearch(10)
        const data = await api.anime.getTopSearch();
        if (data && data.results) { // Ensure 'results' key exists from backend
          setTopSearchData(data.results);
          console.log("Mushi found the top searches for you, Senpai! Hehe~", data.results); // Debugging log
        } else {
          setError("Eeeh~ Mushi couldn't fetch the Top Search anime data, gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch Top Search anime data:", err);
        setError(`Mushi encountered an error while fetching Top Search data: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchTopSearchData();
  }, []);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-48 text-indigo-300 text-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-purple-500/30">
        Mushi is fetching the most popular searches! Searching, searching!~ ☆
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900/30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!topSearchData || topSearchData.length === 0) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg mx-auto max-w-lg
                      bg-white/5 backdrop-blur-sm rounded-3xl shadow-inner border border-gray-700/50">
        Muu... Mushi couldn't find any Top Search anime data. (T_T)
      </div>
    );
  }

  return (
    <div className="p-6 text-gray-100">
      <h2 className="text-4xl font-extrabold text-center mb-10
                     bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-600
                     drop-shadow-lg [text-shadow:0_0_15px_rgba(150,100,255,0.4)]">
        Mushi's Popular Search Picks! ✨
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {topSearchData.map((item, index) => (
          <div key={index} className="bg-white/5 backdrop-blur-md rounded-xl shadow-lg p-5
                                      transform hover:scale-105 transition-transform duration-300
                                      border border-white/10 hover:border-indigo-500">
            {/* Assuming 'title' and 'link' are available for each item */}
            <h3 className="text-white text-xl font-semibold truncate mb-2">
              {item.title}
            </h3>
            {item.link && (
              <a
                href={item.link}
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center text-indigo-400 hover:text-indigo-300 text-sm font-medium
                           bg-purple-800/50 px-4 py-2 rounded-full transition-all duration-200
                           hover:bg-purple-700/70 shadow-md hover:shadow-lg"
              >
                View Details~
                <svg xmlns="http://www.w3.org/2000/svg" className="ml-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              </a>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

export default AnimeTopSearchList;

--- FILE_END: ./mushi-frontend/src/components/anime/AnimeTopSearchList.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/player/Player.jsx ---
// src/components/anime/player/Player.jsx
import React, { useEffect, useRef } from 'react';
import Artplayer from 'artplayer';
import Hls from 'hls.js';

function Player({ option, getInstance, onVideoError }) {
  const artRef = useRef(null);

  useEffect(() => {
    // Initialize Artplayer
    const art = new Artplayer({
      ...option,
      container: artRef.current,
      // Add HLS.js support
      customType: {
        m3u8: function playM3u8(video, url, art) {
          if (Hls.isSupported()) {
            const hls = new Hls();
            hls.loadSource(url);
            hls.attachMedia(video);
            art.hls = hls;
            art.once('destroy', () => hls.destroy());
          } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = url;
          } else {
            art.notice.show('Unsupported playback format: m3u8');
          }
        },
      },
    });

    // Add error handling
    art.on('error', (error, reconnect) => {
        console.error('Artplayer Error:', error);
        if (onVideoError) {
            onVideoError(); // Notify parent component of the error
        }
        // Artplayer will attempt to reconnect automatically if reconnect is true
    });

    if (getInstance && typeof getInstance === 'function') {
      getInstance(art);
    }

    // Cleanup on component unmount
    return () => {
      if (art && art.destroy) {
        art.destroy(false);
      }
    };
  }, []); // Run only once on mount

  return <div ref={artRef} className="w-full bg-black rounded-lg aspect-video"></div>;
}

export default Player;

--- FILE_END: ./mushi-frontend/src/components/anime/player/Player.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/player/Episodelist.jsx ---
// src/components/anime/player/Episodelist.jsx
import React from 'react';

function EpisodeList({ episodes, currentEpisodeId, onEpisodeSelect }) {
  if (!episodes || episodes.length === 0) {
    return <p className="text-gray-400">No episodes available.</p>;
  }

  return (
    <div className="bg-white/5 p-4 rounded-xl border border-white/10 max-h-[80vh] overflow-y-auto">
      <h3 className="text-xl font-bold mb-4 text-pink-400">Episodes</h3>
      <div className="flex flex-col gap-2">
        {episodes.map((episode) => (
          <button
            key={episode.id}
            onClick={() => onEpisodeSelect(episode)}
            className={`w-full text-left p-3 rounded-lg text-sm transition-all duration-200 ${
              episode.id === currentEpisodeId
                ? 'bg-purple-600 text-white font-semibold shadow-lg'
                : 'bg-gray-700/50 text-gray-300 hover:bg-purple-500/50'
            }`}
          >
            Ep. {episode.episode_no}: {episode.title || 'Untitled'}
          </button>
        ))}
      </div>
    </div>
  );
}

export default EpisodeList;

--- FILE_END: ./mushi-frontend/src/components/anime/player/Episodelist.jsx ---

--- FILE_START: ./mushi-frontend/src/components/anime/player/Servers.jsx ---
// src/components/anime/player/Servers.jsx
import React from 'react';

function Servers({ servers, currentServer, onServerSelect, isLoading }) {
  if (isLoading) {
     return <p className="text-gray-400 animate-pulse">Fetching servers...</p>;
  }

  if (!servers || servers.length === 0) {
    return <p className="text-gray-400">No servers available for this episode.</p>;
  }

  return (
    <div className="my-4">
      <h4 className="text-lg font-semibold mb-2 text-gray-300">Available Servers:</h4>
      <div className="flex flex-wrap gap-2">
        {servers.map((server) => (
          <button
            key={`${server.server_id}-${server.type}`}
            onClick={() => onServerSelect(server)}
            className={`px-3 py-1 rounded-full text-xs font-medium transition-colors duration-200 ${
              currentServer?.server_name === server.server_name && currentServer?.type === server.type
                ? 'bg-teal-500 text-white shadow-md'
                : 'bg-gray-600/70 text-gray-300 hover:bg-teal-500/70'
            }`}
          >
            {server.server_name} ({server.type})
          </button>
        ))}
      </div>
    </div>
  );
}

export default Servers;

--- FILE_END: ./mushi-frontend/src/components/anime/player/Servers.jsx ---

--- FILE_START: ./mushi-frontend/src/components/data/DataClusterViewer.jsx ---
// mushi-frontend/src/components/data/DataClusterViewer.jsx
import React, { useState, useEffect, useRef } from 'react';
import { api } from '../../services/api'; // Correct path to api.js
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'; // For interactive camera control

/**
 * DataClusterViewer component fetches and displays clustered data documents
 * in a 3D visualization using Three.js.
 */
function DataClusterViewer() {
  const mountRef = useRef(null); // Ref for the div where the Three.js scene will be mounted
  const [clusteredData, setClusteredData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [numClusters, setNumClusters] = useState(5); // Default number of clusters

  // Color palette for clusters (you can expand this for more clusters)
  const clusterColors = [
    0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0xff00ff, 0x00ffff, 0xff8800, 0x8800ff, 0x00ff88, 0x88ff00
  ];

  // --- Fetch Clustered Data ---
  useEffect(() => {
    const fetchClusteredData = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await api.data.getClusteredData(numClusters);

        if (data && data.clustered_documents) {
          setClusteredData(data);
          console.log(`Mushi found sparkling clustered data with ${numClusters} clusters, desu!~`, data);
        } else {
          setError(`Muu... Mushi couldn't fetch clustered data with ${numClusters} clusters. Gomen'nasai! (T_T)`);
        }
      } catch (err) {
        console.error(`Uwaah! Failed to fetch clustered data with ${numClusters} clusters:`, err);
        setError(`Mushi encountered an error while fetching clustered data: ${err.message || "Unknown error"} (>_<)`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchClusteredData();
  }, [numClusters]); // Re-run effect when numClusters changes

  // --- Three.js Scene Setup ---
  useEffect(() => {
    if (!mountRef.current || isLoading || error || !clusteredData) return;

    const currentMount = mountRef.current;
    let scene, camera, renderer, controls;
    let animationFrameId; // To store the ID of the animation frame

    const initThree = () => {
      // Scene
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x1a202c); // Dark background similar to Tailwind gray-900

      // Camera
      camera = new THREE.PerspectiveCamera(
        75,
        currentMount.clientWidth / currentMount.clientHeight,
        0.1,
        1000
      );
      camera.position.z = 50; // Move camera back to see objects

      // Renderer
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);
      currentMount.appendChild(renderer.domElement);

      // Controls (OrbitControls for interactive camera)
      controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true; // An animation loop is required when damping is enabled
      controls.dampingFactor = 0.05;

      // Lights
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5); // Soft white light
      scene.add(ambientLight);
      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
      directionalLight.position.set(0, 1, 1).normalize();
      scene.add(directionalLight);

      // --- Add 3D objects based on clustered data ---
      const clusterCenters = new Map(); // To store the average position for each cluster
      const clusterCounts = new Map(); // To store the number of documents in each cluster

      // First, calculate bounding box of document positions within each cluster
      // and determine average positions for initial cluster placement.
      // For simplicity, we'll just place them randomly within a sphere for now.

      const sphereRadius = 20; // Radius for distributing clusters

      Object.entries(clusteredData.clustered_documents).forEach(([clusterId, documents]) => {
        const clusterIndex = parseInt(clusterId, 10);
        const color = new THREE.Color(clusterColors[clusterIndex % clusterColors.length]);

        // Position clusters in a spherical arrangement
        // For a more meaningful visualization, you'd use embedding positions.
        // Here, we're just spreading them out for visual distinction.
        const angle = (clusterIndex / numClusters) * Math.PI * 2;
        const x = sphereRadius * Math.cos(angle);
        const y = sphereRadius * Math.sin(angle);
        const z = (Math.random() - 0.5) * 10; // Slight variation in Z

        // Create a representative object for the cluster (e.g., a larger sphere)
        const clusterGeometry = new THREE.SphereGeometry(1.5, 32, 32);
        const clusterMaterial = new THREE.MeshPhongMaterial({ color: color, transparent: true, opacity: 0.7 });
        const clusterMesh = new THREE.Mesh(clusterGeometry, clusterMaterial);
        clusterMesh.position.set(x, y, z);
        scene.add(clusterMesh);

        // Add a label for the cluster (basic text geometry, more advanced options exist)
        // This requires a font loader, which is more complex. For now, we'll skip 3D text.
        // You can use a CSS2DRenderer for HTML-based labels.

        // Place small spheres for each document within its cluster's vicinity
        documents.forEach((doc, docIndex) => {
          const docGeometry = new THREE.SphereGeometry(0.3, 16, 16);
          const docMaterial = new THREE.MeshPhongMaterial({ color: color.clone().offsetHSL(0, 0, 0.2), flatShading: true }); // Lighter shade
          const docMesh = new THREE.Mesh(docGeometry, docMaterial);

          // Position documents randomly around their cluster center
          const docOffsetX = (Math.random() - 0.5) * 5;
          const docOffsetY = (Math.random() - 0.5) * 5;
          const docOffsetZ = (Math.random() - 0.5) * 5;
          docMesh.position.set(x + docOffsetX, y + docOffsetY, z + docOffsetZ);
          scene.add(docMesh);

          // You could store references to these meshes and
          // attach data (e.g., doc.content) for interactivity (e.g., on click popups).
        });
      });

      // Animation loop
      const animate = () => {
        animationFrameId = requestAnimationFrame(animate);
        controls.update(); // only required if controls.enableDamping or controls.autoRotate are set to true
        renderer.render(scene, camera);
      };

      animate();

      // Handle window resize
      const handleResize = () => {
        camera.aspect = currentMount.clientWidth / currentMount.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(currentMount.clientWidth, currentMount.clientHeight);
      };
      window.addEventListener('resize', handleResize);

      // Cleanup function
      return () => {
        cancelAnimationFrame(animationFrameId); // Stop the animation loop
        window.removeEventListener('resize', handleResize);
        if (currentMount) {
          currentMount.removeChild(renderer.domElement);
        }
        renderer.dispose();
        controls.dispose();
        // Dispose of geometries and materials if created inside the loop for performance
        scene.clear(); // Clear all objects from the scene
      };
    };

    initThree();
  }, [clusteredData, isLoading, error, numClusters]); // Re-initialize Three.js if data or parameters change

  const handleNumClustersChange = (e) => {
    const value = parseInt(e.target.value, 10);
    if (!isNaN(value) && value > 0) {
      setNumClusters(value);
    } else if (e.target.value === '') {
      setNumClusters(''); // Allow empty input temporarily
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is organizing all the data into neat clusters for you, Senpai! Waku waku!~ ☆
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {error}
      </div>
    );
  }

  if (!clusteredData || !clusteredData.clustered_documents || Object.keys(clusteredData.clustered_documents).length === 0) {
    return (
      <div className="text-gray-400 text-center p-4">
        Muu... No clustered data found to visualize. (T_T) Please ensure data is ingested.
      </div>
    );
  }

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen flex flex-col">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        Mushi's 3D Data Clusters! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>

      <div className="max-w-md mx-auto mb-8 p-4 bg-gray-800 rounded-lg shadow-lg flex items-center gap-4">
        <label htmlFor="numClusters" className="text-gray-300 font-medium">Number of Clusters:</label>
        <input
          id="numClusters"
          type="number"
          min="1"
          value={numClusters}
          onChange={handleNumClustersChange}
          className="w-24 p-2 rounded-md bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
          aria-label="Number of clusters"
        />
      </div>

      <div
        ref={mountRef}
        className="flex-grow bg-gray-800 rounded-lg shadow-lg overflow-hidden"
        style={{ minHeight: '600px', width: '100%' }} // Ensure the canvas has space
      >
        {/* Three.js scene will be rendered inside this div */}
      </div>

      <div className="mt-8 text-center text-gray-400">
        <p>Senpai, you can drag to rotate the 3D view and scroll to zoom! </p>
        <p>Currently, clusters are randomly positioned for visibility. For true cluster visualization, you'd use the actual embedding vectors to determine their positions in 3D space, which would involve dimensionality reduction (e.g., PCA, t-SNE) if your embeddings are high-dimensional.</p>
        <p>This is a foundational setup, and Mushi is excited to see what amazing visualizations you'll create!</p>
      </div>
    </div>
  );
}

export default DataClusterViewer;

--- FILE_END: ./mushi-frontend/src/components/data/DataClusterViewer.jsx ---

--- FILE_START: ./mushi-frontend/src/components/data/DataIngestionControls.jsx ---
// mushi-frontend/src/components/data/DataIngestionControls.jsx
import React, { useState } from 'react';
import { api } from '../../services/api'; // Correct path to api.js

/**
 * DataIngestionControls component provides UI to trigger data ingestion processes.
 * This component is intended for admin use only.
 */
function DataIngestionControls() {
  const [ingestAllLoading, setIngestAllLoading] = useState(false);
  const [ingestAllMessage, setIngestAllMessage] = useState('');
  const [ingestAllError, setIngestAllError] = useState('');

  const [ingestCategoryLoading, setIngestCategoryLoading] = useState(false);
  const [ingestCategoryMessage, setIngestCategoryMessage] = useState('');
  const [ingestCategoryError, setIngestCategoryError] = useState('');
  const [categoriesInput, setCategoriesInput] = useState('action,comedy,fantasy'); // Default categories
  const [limitPerCategoryInput, setLimitPerCategoryInput] = useState(50); // Default limit

  const handleIngestAllData = async () => {
    setIngestAllLoading(true);
    setIngestAllMessage('');
    setIngestAllError('');
    try {
      const response = await api.data.ingestAllData();
      if (response && response.message) {
        setIngestAllMessage(`Success! ${response.message} ✨`);
      } else {
        setIngestAllError("Eeeh~ Mushi didn't get a clear success message after ingesting all data. (T_T)");
      }
    } catch (err) {
      console.error("Uwaah! Failed to ingest all data:", err);
      setIngestAllError(`Mushi encountered an error while ingesting all data: ${err.message || "Unknown error"} (>_<)`);
    } finally {
      setIngestAllLoading(false);
    }
  };

  const handleIngestAnimeApiCategoryData = async () => {
    setIngestCategoryLoading(true);
    setIngestCategoryMessage('');
    setIngestCategoryError('');

    const categories = categoriesInput.split(',').map(c => c.trim()).filter(c => c !== '');
    const limit = parseInt(limitPerCategoryInput, 10);

    if (categories.length === 0) {
      setIngestCategoryError("Senpai, Mushi needs at least one category to ingest! (•́-•̀)");
      setIngestCategoryLoading(false);
      return;
    }
    if (isNaN(limit) || limit <= 0) {
      setIngestCategoryError("Senpai, the limit per category must be a positive number! (•́-•̀)");
      setIngestCategoryLoading(false);
      return;
    }

    try {
      const response = await api.data.ingestAnimeApiCategoryData(categories.join(','), limit);
      if (response && response.message) {
        setIngestCategoryMessage(`Success! ${response.message} ✨`);
      } else {
        setIngestCategoryError("Eeeh~ Mushi didn't get a clear success message after ingesting category data. (T_T)");
      }
    } catch (err) {
      console.error("Uwaah! Failed to ingest category data:", err);
      setIngestCategoryError(`Mushi encountered an error while ingesting category data: ${err.message || "Unknown error"} (>_<)`);
    } finally {
      setIngestCategoryLoading(false);
    }
  };

  return (
    <div className="p-6 bg-gray-900 text-gray-100 min-h-screen">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        Mushi's Data Ingestion Controls! (ﾉ´ヮ´)ﾉ*:･ﾟ✧
      </h2>

      {/* Ingest All Data Section */}
      <section className="mb-12 p-6 bg-gray-800 rounded-lg shadow-xl border border-indigo-600 max-w-2xl mx-auto">
        <h3 className="text-2xl font-bold text-indigo-400 mb-4">Ingest All Data Sources~</h3>
        <p className="text-gray-300 mb-4">
          This will fetch and embed data from all configured sources (One Piece, ANN, Anime API, etc.) into the vector store. This might take a while, desu!
        </p>
        <button
          onClick={handleIngestAllData}
          disabled={ingestAllLoading}
          className="px-6 py-3 bg-blue-600 text-white font-bold text-lg rounded-full shadow-lg
                     hover:bg-blue-700 transform hover:scale-105 transition-all duration-300
                     disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {ingestAllLoading ? "Mushi is working hard... ✨" : "Ingest All Data!~"}
        </button>
        {ingestAllMessage && <p className="text-green-400 mt-4 text-sm">{ingestAllMessage}</p>}
        {ingestAllError && <p className="text-red-400 mt-4 text-sm">{ingestAllError}</p>}
      </section>

      {/* Ingest Anime API Category Data Section */}
      <section className="p-6 bg-gray-800 rounded-lg shadow-xl border border-indigo-600 max-w-2xl mx-auto">
        <h3 className="text-2xl font-bold text-indigo-400 mb-4">Ingest Anime API Category Data~</h3>
        <p className="text-gray-300 mb-4">
          This will fetch and embed anime data for specific categories from the 'anime-api' Node.js project.
        </p>
        <div className="mb-4">
          <label htmlFor="categoriesInput" className="block text-gray-300 text-sm font-medium mb-2">
            Categories (comma-separated slugs, e.g., action,comedy):
          </label>
          <input
            id="categoriesInput"
            type="text"
            value={categoriesInput}
            onChange={(e) => setCategoriesInput(e.target.value)}
            placeholder="action,comedy,genre/fantasy"
            className="w-full p-3 rounded-md bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
        </div>
        <div className="mb-4">
          <label htmlFor="limitInput" className="block text-gray-300 text-sm font-medium mb-2">
            Limit Per Category (e.g., 50):
          </label>
          <input
            id="limitInput"
            type="number"
            min="1"
            value={limitPerCategoryInput}
            onChange={(e) => setLimitPerCategoryInput(e.target.value)}
            placeholder="50"
            className="w-full p-3 rounded-md bg-gray-700 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
        </div>
        <button
          onClick={handleIngestAnimeApiCategoryData}
          disabled={ingestCategoryLoading}
          className="px-6 py-3 bg-blue-600 text-white font-bold text-lg rounded-full shadow-lg
                     hover:bg-blue-700 transform hover:scale-105 transition-all duration-300
                     disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {ingestCategoryLoading ? "Mushi is collecting anime... ✨" : "Ingest Category Data!~"}
        </button>
        {ingestCategoryMessage && <p className="text-green-400 mt-4 text-sm">{ingestCategoryMessage}</p>}
        {ingestCategoryError && <p className="text-red-400 mt-4 text-sm">{ingestCategoryError}</p>}
      </section>
    </div>
  );
}

export default DataIngestionControls;

--- FILE_END: ./mushi-frontend/src/components/data/DataIngestionControls.jsx ---

--- FILE_START: ./mushi-frontend/src/components/banner/Banner.css ---
.spotlight {
  overflow: hidden;
}

.spotlight-overlay {
  width: 100.1%;
  height: 100.1%;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom:0;
  background: radial-gradient(
      circle at 130% center,
      rgba(32, 31, 49, 0) 50%,
      rgba(32, 31, 49, 0.5) 60%,
      rgba(32, 31, 49, 1) 80%,
      rgba(32, 31, 49, 1) 100%
    ),
    linear-gradient(
      to top,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to left,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to bottom,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    );

  z-index: 1;
}
@media only screen and (max-width: 1300px) {
  .spotlight-overlay {
    background: radial-gradient(
      circle at 130% center,
      rgba(32, 31, 49, 0) 50%,
      rgba(32, 31, 49, 0.5) 60%,
      rgba(32, 31, 49, 1) 80%,
      rgba(32, 31, 49, 1) 100%
    ),
    linear-gradient(
      to top,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to left,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to bottom,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 50%,
      rgba(32, 31, 49, 0) 100%
    );
  }
}
@media only screen and (max-width: 1200px) {
  .spotlight-overlay {
    background: radial-gradient(
      circle at 100% center,
      rgba(32, 31, 49, 0) 50%,
      rgba(32, 31, 49, 0.5) 60%,
      rgba(32, 31, 49, 1) 95%,
      rgba(32, 31, 49, 1) 100%
    ),
    linear-gradient(
      to top,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to left,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to bottom,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 70%,
      rgba(32, 31, 49, 0) 100%
    );
  }
}
@media only screen and (max-width: 900px) {
  .spotlight-overlay {
    background: radial-gradient(
      circle at 60% center,
      rgba(32, 31, 49, 0) 50%,
      rgba(32, 31, 49, 0.5) 85%,
      rgba(32, 31, 49, 1) 95%,
      rgba(32, 31, 49, 1) 100%
    ),
    linear-gradient(
      to top,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 70%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to left,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 20%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to bottom,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 70%,
      rgba(32, 31, 49, 0) 100%
    ),
    linear-gradient(
      to right,
      rgba(32, 31, 49, 1) 0%,
      rgba(32, 31, 49, 0) 15%,
      rgba(32, 31, 49, 0) 100%
    );
  }
}

--- FILE_END: ./mushi-frontend/src/components/banner/Banner.css ---

--- FILE_START: ./mushi-frontend/src/components/banner/Banner.jsx ---
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faPlay,
  faClosedCaptioning,
  faMicrophone,
  faCalendar,
  faClock,
} from "@fortawesome/free-solid-svg-icons";
import { FaChevronRight } from "react-icons/fa";
import { Link } from "react-router-dom";
import { useLanguage } from "@/src/context/LanguageContext";
import "./Banner.css";

function Banner({ item, index }) {
  const { language } = useLanguage();
  return (
    <section className="spotlight w-full h-full">
      <img
        src={`https://wsrv.nl/?url=${item.poster}`}
        alt={item.title}
        className="absolute right-0 object-cover h-full w-[80%] bg-auto max-[1200px]:w-full max-[1200px]:bottom-0"
      />
      <div className="spotlight-overlay"></div>
      <div className="absolute flex flex-col left-0 bottom-[50px] w-[55%] p-4 z-10 max-[1390px]:w-[45%] max-[1390px]:bottom-[10px] max-[1300px]:w-[600px] max-[1120px]:w-[60%] max-md:w-[90%] max-[300px]:w-full">
        <p className="text-[#ffbade] font-semibold text-[20px] w-fit max-[1300px]:text-[15px]">
          #{index + 1} Spotlight
        </p>
        <h3 className="text-white line-clamp-2 text-5xl font-bold mt-6 text-left max-[1390px]:text-[45px] max-[1300px]:text-3xl max-[1300px]:mt-4 max-md:text-2xl max-md:mt-1 max-[575px]:text-[22px] max-sm:leading-6 max-sm:w-[80%] max-[320px]:w-full ">
          {language === "EN" ? item.title : item.japanese_title}
        </h3>
        <div className="flex h-fit justify-center items-center w-fit space-x-5 mt-8 max-[1300px]:mt-6 max-md:hidden">
          {item.tvInfo && (
            <>
              {item.tvInfo.showType && (
                <div className="flex space-x-1 justify-center items-center">
                  <FontAwesomeIcon
                    icon={faPlay}
                    className="text-[8px] bg-white px-[4px] py-[3px] rounded-full"
                  />
                  <p className="text-white text-[16px]">
                    {item.tvInfo.showType}
                  </p>
                </div>
              )}

              {item.tvInfo.duration && (
                <div className="flex space-x-1 justify-center items-center">
                  <FontAwesomeIcon
                    icon={faClock}
                    className="text-white text-[14px]"
                  />
                  <p className="text-white text-[17px]">
                    {item.tvInfo.duration}
                  </p>
                </div>
              )}

              {item.tvInfo.releaseDate && (
                <div className="flex space-x-1 justify-center items-center">
                  <FontAwesomeIcon
                    icon={faCalendar}
                    className="text-white text-[14px]"
                  />
                  <p className="text-white text-[16px]">
                    {item.tvInfo.releaseDate}
                  </p>
                </div>
              )}

              <div className="flex space-x-3 w-fit">
                {item.tvInfo.quality && (
                  <div className="bg-[#ffbade] py-[1px] px-[6px] rounded-md w-fit text-[11px] font-bold h-fit">
                    {item.tvInfo.quality}
                  </div>
                )}
                <div className="flex space-x-[1px] rounded-r-[5px] rounded-l-[5px] w-fit py-[1px] overflow-hidden">
                  {item.tvInfo.episodeInfo?.sub && (
                    <div className="flex space-x-1 justify-center items-center bg-[#B0E3AF] px-[4px]">
                      <FontAwesomeIcon
                        icon={faClosedCaptioning}
                        className="text-[12px]"
                      />
                      <p className="text-[12px] font-bold">
                        {item.tvInfo.episodeInfo.sub}
                      </p>
                    </div>
                  )}

                  {item.tvInfo.episodeInfo?.dub && (
                    <div className="flex space-x-1 justify-center items-center bg-[#B9E7FF] px-[4px]">
                      <FontAwesomeIcon
                        icon={faMicrophone}
                        className="text-[12px]"
                      />
                      <p className="text-[12px] font-semibold">
                        {item.tvInfo.episodeInfo.dub}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </>
          )}
        </div>
        <p className="text-white text-[17px] font-sm mt-6 text-left line-clamp-3 max-[1200px]:line-clamp-2 max-[1300px]:w-[500px] max-[1120px]:w-[90%] max-md:hidden">
          {item.description}
        </p>
        <div className="flex gap-x-5 mt-10 max-md:mt-6 max-sm:w-full max-[320px]:flex-col max-[320px]:space-y-3">
          <button className="flex justify-center items-center bg-[#ffbade] px-4 py-2 rounded-3xl gap-x-2 max-[320px]:w-fit ">
            <FontAwesomeIcon
              icon={faPlay}
              className="text-[8px] bg-[#000000] px-[6px] py-[6px] rounded-full text-[#ffbade] max-[320px]:text-[6px]"
            />
            <Link
              to={`/watch/${item.id}`}
              className="max-[1000px]:text-[15px] font-semibold max-[320px]:text-[12px]"
            >
              Watch Now
            </Link>
          </button>
          <Link
            to={`/${item.id}`}
            className="flex bg-[#3B3A52] justify-center items-center px-4 py-2 rounded-3xl gap-x-2 max-[320px]:w-fit max-[320px]:px-3"
          >
            <p className="text-white max-[1000px]:text-[15px] font-semibold max-[320px]:text-[12px]">
              Detail
            </p>
            <FaChevronRight className="text-white max-[320px]:text-[10px]" />
          </Link>
        </div>
      </div>
    </section>
  );
}

export default Banner;

--- FILE_END: ./mushi-frontend/src/components/banner/Banner.jsx ---

--- FILE_START: ./mushi-frontend/src/main.jsx ---
// src/index.jsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App.jsx';

createRoot(document.getElementById('root')).render(
  // <React.StrictMode>
    <App />
  // </React.StrictMode>
);

--- FILE_END: ./mushi-frontend/src/main.jsx ---

--- FILE_START: ./mushi-frontend/src/App.jsx ---
// mushi-frontend/src/App.jsx
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Outlet, Navigate } from 'react-router-dom';

// Import Layout Components
import TopNav from './components/navigation/TopNav';
import FooterNav from './components/navigation/FooterNav';
import MushiFab from './components/chat/MushiFab';
import ChatModal from './components/chat/ChatModal';

// Import Views (SplashScreen is new, LandingView is replaced)
import SplashScreen from './views/SplashScreen'; // NEW: Replaces LandingView for the root route
import HomeView from './views/HomeView';
import MushiAiView from './views/MushiAiView';
import AnimeSearchView from './views/AnimeSearchView';
import AnimeDetailView from './views/AnimeDetailView';
import AnimeCategoryView from './views/AnimeCategoryView';
import CharacterDetailView from './views/CharacterDetailView';
import VoiceActorDetailView from './views/VoiceActorDetailView';
import DataView from './views/DataView';
import AdminView from './views/AdminView';
import WatchView from './views/WatchView';
import AtoZListView from './views/AtoZListView';

// AppLayout remains the same, acting as the shared UI for the main application.
// It receives props for the carousel and renders the active route via <Outlet />.
const AppLayout = ({ images, currentIndex }) => {
  const [isChatOpen, setIsChatOpen] = useState(false); // State for the chat modal

  return (
    <div className="min-h-screen flex flex-col bg-background text-foreground font-inter">
      <TopNav images={images} currentIndex={currentIndex} />
      <main className="flex-grow p-6">
        <Outlet />
      </main>
      <FooterNav images={images} currentIndex={currentIndex} />

      {/* Mushi AI Chat Components */}
      <MushiFab onClick={() => setIsChatOpen(true)} />
      <ChatModal isOpen={isChatOpen} onClose={() => setIsChatOpen(false)} />
    </div>
  );
};

function App() {
  // State for the background carousel remains in App, so it's shared by TopNav and FooterNav.
  const images = [
    '/luffy_idea.png',
    '/luffy_gross.png',
    '/zoro_gross.png',
    '/ginny_mad.png',
    '/captured.png',
    '/hair_flash.png',
    '/heart_attack.png',
    '/kuma_dad_dead.png',
    '/luffy_eat.png',
    '/luffy_goggles.png',
    '/luffy_gross2.png',
    '/luffy_sorring.png',
    '/punk_nose.png'
  ];

  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
    }, 12000); // Rotate every 12 seconds
    return () => clearInterval(interval);
  }, [images.length]);

  return (
    <Router>
      <Routes>
        <Route path="/" element={<SplashScreen />} />

        <Route element={<AppLayout images={images} currentIndex={currentIndex} />}>
          <Route path="/home" element={<HomeView />} />
          <Route path="/mushi_ai" element={<MushiAiView />} />

          {/* Update the search route path for clarity */}
          <Route path="/search" element={<AnimeSearchView />} />

          {/* Add the new A-Z List route */}
          <Route path="/az-list" element={<AtoZListView />} />
          <Route path="/az-list/:letter" element={<AtoZListView />} />

          <Route path="/anime/details/:animeId" element={<AnimeDetailView />} />
          <Route path="/watch/:animeId/:episodeId" element={<WatchView />} />
          <Route path="/anime_category" element={<AnimeCategoryView />} />
          <Route path="/anime/character/:characterId" element={<CharacterDetailView />} />
          <Route path="/anime/actors/:actorId" element={<VoiceActorDetailView />} />
          <Route path="/data_insights" element={<DataView />} />
          <Route path="/admin_data" element={<AdminView />} />

          {/* Old search path redirect (optional but good) */}
          <Route path="/anime_search" element={<Navigate to="/search" replace />} />
        </Route>

        <Route path="/app" element={<Navigate to="/home" replace />} />
      </Routes>
    </Router>
  );
}

export default App;

--- FILE_END: ./mushi-frontend/src/App.jsx ---

--- FILE_START: ./mushi-frontend/src/views/AnimeSearchView.jsx ---
// mushi-frontend/src/views/AnimeSearchView.jsx
import React, { useState } from 'react';
import AnimeSearchBar from '../components/anime/search/AnimeSearchBar';
import AnimeSearchResults from '../components/anime/search/AnimeSearchResults';

/**
 * AnimeSearchView component provides a dedicated page for searching anime.
 * It combines the search input and search results display.
 */
function AnimeSearchView() {
  const [searchQuery, setSearchQuery] = useState(''); // State to hold the current search query

  // Callback function to handle search submission from AnimeSearchBar
  const handleSearch = (query) => {
    setSearchQuery(query); // Update the search query state
  };

  return (
    <div className="container mx-auto py-6">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        Search for Your Favorite Anime, Senpai! 🔍
      </h2>
      <div className="max-w-xl mx-auto mb-8">
        {/* AnimeSearchBar to get user input */}
        <AnimeSearchBar onSearch={handleSearch} />
      </div>

      {/* AnimeSearchResults to display results based on searchQuery */}
      <AnimeSearchResults query={searchQuery} />
    </div>
  );
}

export default AnimeSearchView;

--- FILE_END: ./mushi-frontend/src/views/AnimeSearchView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/HomeView.jsx ---
// mushi-frontend/src/views/HomeView.jsx
import React, { useState, useEffect } from 'react';

// Import the API service to fetch data
import { api } from '@/src/services/api';

// Import the new dashboard components
import Spotlight from '@/src/components/spotlight/Spotlight';
import Trending from '@/src/components/trending/Trending';
import CategoryCard from '@/src/components/categorycard/CategoryCard';
import Cart from '@/src/components/cart/Cart';

/**
 * HomeView component now functions as a rich dashboard.
 * It fetches all necessary data from the /api/anime/home endpoint
 * and distributes it to specialized child components.
 */
function HomeView() {
  const [homeData, setHomeData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    // Define an async function to fetch data when the component mounts
    const fetchHomeData = async () => {
      setIsLoading(true);
      setError(null);
      try {
        const data = await api.anime.getHomeData();
        if (data) {
          setHomeData(data);
          console.log("Mushi fetched home data, Senpai! ✨", data);
        } else {
          setError("Mushi couldn't fetch the home data, gomen'nasai! (T_T)");
        }
      } catch (err) {
        console.error("Uwaah! Failed to fetch home data:", err);
        setError(`Mushi encountered an error while fetching home data: ${err.message}`);
      } finally {
        setIsLoading(false);
      }
    };

    fetchHomeData();
  }, []); // Empty dependency array ensures this runs only once on mount

  // --- Render Loading State ---
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen-75 text-indigo-300 text-lg">
        Mushi is preparing your awesome anime dashboard! Please wait warmly~ (≧∇≦)/
      </div>
    );
  }

  // --- Render Error State ---
  if (error) {
    return (
      <div className="text-red-400 text-center p-6 border border-red-500 rounded-lg bg-red-900/30 text-lg mx-auto max-w-lg shadow-lg">
        Oh no! {error}
      </div>
    );
  }

  // --- Render "No Data" State ---
  if (!homeData) {
    return (
      <div className="text-gray-400 text-center p-6 text-lg">
        Muu... No anime home data was found. Please check the backend. (T_T)
      </div>
    );
  }

  // --- Render Success State: The Dashboard ---
  return (
    // We remove the old background and container, as the App's layout handles it.
    // This view is now focused on arranging its components.
    <div className="w-full space-y-12">
      {/* Spotlight/Hero section at the top */}
      {homeData.spotlights && <Spotlight spotlights={homeData.spotlights} />}

      {/* Trending slider below the spotlight */}
      {homeData.trending && <Trending trending={homeData.trending} />}

      {/* Main content layout with sidebar */}
      <div className="flex flex-col lg:flex-row gap-8 mt-8">

        {/* Main Content Area (Larger Section) */}
        <main className="flex-grow lg:w-3/4 space-y-12">
          {homeData.latest_episode && (
            <CategoryCard
              label="Latest Episodes"
              data={homeData.latest_episode}
              path="latest-episodes" // Example path for "View more" link
            />
          )}
          {homeData.latest_completed && (
            <CategoryCard
              label="Recently Completed"
              data={homeData.latest_completed}
              path="completed" // Example path for "View more" link
            />
          )}
        </main>

        {/* Sidebar (Smaller Section) */}
        <aside className="lg:w-1/4 flex-shrink-0 space-y-12">
          {homeData.top_airing && (
            <Cart
              label="Top Airing"
              data={homeData.top_airing}
              path="top-airing"
            />
          )}
          {homeData.most_popular && (
            <Cart
              label="Most Popular"
              data={homeData.most_popular}
              path="most-popular"
            />
          )}
           {homeData.most_favorite && (
            <Cart
              label="Most Favorited"
              data={homeData.most_favorite}
              path="most-favorite"
            />
          )}
        </aside>

      </div>
    </div>
  );
}

export default HomeView;

--- FILE_END: ./mushi-frontend/src/views/HomeView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/WatchView.jsx ---
// src/views/WatchView.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { api } from '@/src/services/api';
import Player from '@/src/components/anime/player/Player';
import EpisodeList from '@/src/components/anime/player/Episodelist';
import Servers from '@/src/components/anime/player/Servers';
import { Link } from 'react-router-dom';

function WatchView() {
  const { animeId, episodeId } = useParams();
  const navigate = useNavigate();

  // State for all data
  const [animeDetails, setAnimeDetails] = useState(null);
  const [currentEpisode, setCurrentEpisode] = useState(null);
  const [servers, setServers] = useState([]);
  const [currentServer, setCurrentServer] = useState(null);
  const [streamUrl, setStreamUrl] = useState('');

  // State for UI feedback
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [playerStatus, setPlayerStatus] = useState("Loading...");

  // Fetch initial anime details and episode list
  useEffect(() => {
    setIsLoading(true);
    api.anime.getDetails(animeId)
      .then(data => {
        setAnimeDetails(data);
        const targetEpisode = data.episodes.find(ep => ep.id === episodeId);
        if (targetEpisode) {
          setCurrentEpisode(targetEpisode);
        } else if (data.episodes.length > 0) {
          // If episodeId is invalid/missing, redirect to the first episode
          navigate(`/watch/${animeId}/${data.episodes[0].id}`, { replace: true });
        } else {
          setError("This anime has no episodes available.");
        }
      })
      .catch(err => setError(`Failed to load anime details: ${err.message}`))
      .finally(() => setIsLoading(false));
  }, [animeId, episodeId, navigate]);

  // Fetch servers when the current episode changes
  useEffect(() => {
    if (!currentEpisode) return;
    setPlayerStatus("Fetching server list...");
    setServers([]);
    setCurrentServer(null);
    setStreamUrl('');

    api.anime.getAvailableServers(animeId, currentEpisode.data_id)
      .then(data => {
        if (data?.servers?.length > 0) {
          setServers(data.servers);
          setCurrentServer(data.servers[0]); // Auto-select the first server
        } else {
          setPlayerStatus("No servers found for this episode.");
        }
      })
      .catch(err => setPlayerStatus(`Error fetching servers: ${err.message}`));
  }, [currentEpisode, animeId]);

  // Fetch stream URL when the server changes
  useEffect(() => {
    if (!currentServer || !currentEpisode) return;
    setPlayerStatus(`Loading stream from ${currentServer.server_name}...`);

    api.anime.getStreamingInfo(currentEpisode.id, currentServer.server_name, currentServer.type)
      .then(data => {
        if (data?.streaming_links?.[0]?.file) {
          const info = data.streaming_links[0];
          const referer = info.headers?.Referer || info.headers?.referer;
          let src = `http://127.0.0.1:8001/api/anime/proxy-stream?url=${encodeURIComponent(info.file)}`;
          if (referer) {
            src += `&referer=${encodeURIComponent(referer)}`;
          }
          setStreamUrl(src);
          setPlayerStatus(null); // Clear status to show player
        } else {
          setPlayerStatus("Failed to get streaming link from this server.");
        }
      })
      .catch(err => setPlayerStatus(`Error getting stream: ${err.message}`));
  }, [currentServer, currentEpisode]);

  const handleEpisodeSelect = (episode) => {
    navigate(`/watch/${animeId}/${episode.id}`);
  };

  if (isLoading) return <div className="text-center p-10">Loading anime...</div>;
  if (error) return <div className="text-center p-10 text-red-400">{error}</div>;
  if (!animeDetails) return null;

  const playerOption = {
    url: streamUrl,
    title: `${animeDetails.title} - Ep ${currentEpisode?.episode_no}`,
    poster: animeDetails.poster_url,
    volume: 0.5,
    isLive: false,
    autoplay: true,
    autoSize: true,
    fullscreen: true,
    backdrop: true,
  };

  return (
    <div className="flex flex-col lg:flex-row gap-8">
      <main className="lg:w-3/4">
        <h2 className="text-2xl md:text-3xl font-bold mb-2 text-white">
          <Link to={`/anime/details/${animeId}`} className="hover:text-pink-400">
            {animeDetails.title}
          </Link>
        </h2>
        <p className="text-lg text-gray-300 mb-4">
          Episode {currentEpisode?.episode_no}: {currentEpisode?.title}
        </p>

        {playerStatus ? (
          <div className="w-full bg-black rounded-lg aspect-video flex items-center justify-center">
            <p className="text-gray-300 animate-pulse">{playerStatus}</p>
          </div>
        ) : (
          <Player option={playerOption} />
        )}

        <Servers
          servers={servers}
          currentServer={currentServer}
          onServerSelect={setCurrentServer}
        />

        <div className="mt-6 p-4 bg-white/5 rounded-xl">
          <h3 className="text-xl font-bold text-gray-200">Synopsis</h3>
          <p className="text-gray-400 mt-2 text-sm">{animeDetails.synopsis}</p>
        </div>
      </main>

      <aside className="lg:w-1/4 flex-shrink-0">
        <EpisodeList
          episodes={animeDetails.episodes}
          currentEpisodeId={currentEpisode?.id}
          onEpisodeSelect={handleEpisodeSelect}
        />
      </aside>
    </div>
  );
}

export default WatchView;

--- FILE_END: ./mushi-frontend/src/views/WatchView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/MushiAiView.jsx ---
// src/views/MushiAiView.jsx
import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import ProviderSelector from '../components/llm/ProviderSelector';
import ChatWindow from '../components/chat/ChatWindow';

function MushiAiView() {
  const location = useLocation();
  const initialQueryFromState = location.state?.preloadedQuery;
  const [initialQuery, setInitialQuery] = useState(initialQueryFromState);

  useEffect(() => {
    if (initialQuery) {
      const timer = setTimeout(() => setInitialQuery(null), 1);
      return () => clearTimeout(timer);
    }
  }, [initialQuery]);

  // The component now assumes it's being rendered within the AppLayout, which provides the background and base padding.
  return (
    // We add a container to constrain the content width, similar to other views.
    <div className="container mx-auto">
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Sidebar for settings */}
        <aside className="lg:col-span-1 p-6 bg-background/50 backdrop-blur-md rounded-2xl shadow-lg border border-border self-start">
          <h2 className="text-xl font-bold mb-4 text-center bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400 drop-shadow-lg">
            Mushi AI Settings
          </h2>
          <ProviderSelector />
          {/* You could add more settings here in the future */}
          <div className="mt-6 text-xs text-muted-foreground p-3 bg-muted/50 rounded-lg">
            <p className="font-bold mb-2 text-foreground">What is this?</p>
            <p>You can choose which AI model powers Mushi's brain. 'Anime Expert' is specialized for anime topics, while 'Qwen' is a general-purpose model. 'Gemini' is a powerful cloud-based model.</p>
          </div>
        </aside>

        {/* Main chat window area */}
        <main className="lg:col-span-3">
          {/* The ChatWindow component takes up the full space allocated to it */}
          <ChatWindow initialQuery={initialQuery} />
        </main>
      </div>
    </div>
  );
}

export default MushiAiView;

--- FILE_END: ./mushi-frontend/src/views/MushiAiView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/SplashScreen.jsx ---
// mushi-frontend/src/views/SplashScreen.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faMagnifyingGlass, faCircleArrowRight } from '@fortawesome/free-solid-svg-icons';

// --- Mushi Features ---
import LLMInfoModal from '../components/common/LLMInfoModal';

// --- Zenime Features ---
// This assumes you have a utility function to fetch top searches.
// If not, you can mock it or remove this section for now.
// import getTopSearch from '@/src/utils/getTopSearch.utils';

// MOCK: Mocking the Zenime API call for now.
const getTopSearch = async () => [
  { title: "One Piece", link: "/anime/details/21" },
  { title: "Jujutsu Kaisen", link: "/anime/details/51137" },
  { title: "Frieren: Beyond Journey's End", link: "/anime/details/52991" },
];

// MERGED: Navigation links now point to Mushi's routes.
const NAV_LINKS = [
  { to: "/home", label: "Home" },
  { to: "/mushi_ai", label: "Mushi AI" },
  { to: "/anime_search", label: "Anime Search" },
  { to: "/data_insights", label: "Data Insights" },
];

function SplashScreen() {
  const navigate = useNavigate();

  // State from Zenime
  const [search, setSearch] = useState("");
  const [isMenuModalOpen, setIsMenuModalOpen] = useState(false);
  const [topSearch, setTopSearch] = useState([]);

  // State from Mushi
  const [adminPassword, setAdminPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [isLLMModalOpen, setIsLLMModalOpen] = useState(false);

  // --- Logic from Zenime ---
  useEffect(() => {
    const fetchTopSearch = async () => {
      const data = await getTopSearch();
      if (data) setTopSearch(data);
    };
    fetchTopSearch();
  }, []);

  const handleSearchSubmit = useCallback(() => {
    if (!search.trim()) return;
    // NOTE: This now navigates to your existing Anime Search view
    navigate(`/anime_search?keyword=${encodeURIComponent(search.trim())}`);
  }, [search, navigate]);

  const handleKeyDown = useCallback((e) => {
    if (e.key === "Enter") handleSearchSubmit();
  }, [handleSearchSubmit]);

  // --- Logic from Mushi ---
  const handleAdminLogin = (e) => {
    e.preventDefault();
    setPasswordError('');
    const CORRECT_ADMIN_PASSWORD = 'mushisecurepassword'; // Keep your password
    if (adminPassword === CORRECT_ADMIN_PASSWORD) {
      navigate('/admin_data'); // Navigate to the correct admin route
    } else {
      setPasswordError("Eeeh~ That's not Mushi's secret password, Gomen'nasai! (T_T)");
    }
  };

  return (
    // KEPT (from Mushi): The glowing radial background now serves as the page's base layer.
    <div className="relative min-h-screen w-full bg-neutral-950 text-white overflow-x-hidden">
      <div className="absolute top-0 z-[-1] h-screen w-screen bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"></div>

      {/* KEPT (from Zenime): The main centered container structure */}
      <div className="w-full max-w-[1300px] mx-auto pt-12 relative max-[1350px]:w-full max-[1350px]:px-8 max-[780px]:px-4 max-[520px]:px-0 max-[520px]:pt-6">

        {/* --- Top Navigation (from Zenime, adapted for Mushi) --- */}
        <nav className="relative w-full z-50">
          <div className="w-fit flex gap-x-12 mx-auto font-semibold max-[780px]:hidden">
            {NAV_LINKS.map((link) => (
              <Link key={link.to} to={link.to} className="hover:text-pink-400 transition-colors">
                {link.label}
              </Link>
            ))}
          </div>
          {/* Mobile Menu */}
          <div className="max-[780px]:block hidden max-[520px]:px-4">
            <button onClick={() => setIsMenuModalOpen(true)} className="p-2 flex items-center gap-x-2 group">
              <svg className="w-6 h-6 group-hover:text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" /></svg>
              <span className="font-semibold group-hover:text-pink-400">Menu</span>
            </button>
          </div>
          {isMenuModalOpen && (
            <div className="max-[780px]:block w-full hidden absolute top-10">
              <div className="bg-neutral-900/90 backdrop-blur-md w-full p-6 rounded-2xl flex flex-col gap-y-6 items-center border border-white/10">
                <button onClick={() => setIsMenuModalOpen(false)} className="self-end text-black text-xl absolute top-0 right-0 bg-white px-3 py-1 rounded-tr-xl rounded-bl-xl font-bold">×</button>
                {NAV_LINKS.map((link) => (
                  <Link key={link.to} to={link.to} onClick={() => setIsMenuModalOpen(false)} className="hover:text-pink-400 text-white text-lg">{link.label}</Link>
                ))}
              </div>
            </div>
          )}
        </nav>

        {/* --- Main Content Box (Structure from Zenime) --- */}
        <div className="min-h-[480px] bg-black/20 backdrop-blur-sm border border-white/10 rounded-[40px] flex relative mt-7 max-[780px]:w-full items-stretch max-[780px]:rounded-[30px] max-[520px]:rounded-none max-[520px]:min-h-fit max-[520px]:pb-4 max-[520px]:mt-4">

          <div className="h-auto flex flex-col w-[700px] relative z-40 px-20 py-10 max-[1200px]:py-12 max-[780px]:px-12 max-[780px]:w-full max-[520px]:py-4 max-[520px]:px-8">

            {/* MERGED: Using Mushi's expressive title with Zenime's layout */}
            <h1 className="text-5xl font-extrabold tracking-wide max-[520px]:text-4xl max-[520px]:text-center bg-clip-text text-transparent bg-gradient-to-r from-pink-400 to-purple-400 drop-shadow-lg">
              Clank Clank Mushi <span className="text-2xl">(ﾉ´ヮ´)ﾉ*</span>
            </h1>

            {/* KEPT (from Zenime): Search Bar */}
            <div className="w-full flex gap-x-3 mt-6">
              <input type="text" placeholder="Search anime..." className="w-full py-3 px-6 rounded-xl bg-white text-lg text-black placeholder:text-gray-500" value={search} onChange={(e) => setSearch(e.target.value)} onKeyDown={handleKeyDown} />
              <button className="bg-pink-400 text-black py-3 px-4 rounded-xl font-extrabold" onClick={handleSearchSubmit}><FontAwesomeIcon icon={faMagnifyingGlass} className="text-lg" /></button>
            </div>

            {/* KEPT (from Zenime): Top Search */}
            <div className="mt-4 text-sm leading-relaxed max-[520px]:text-xs">
              <span className="font-semibold text-gray-300">Top search: </span>
              {topSearch.map((item, index) => (
                <Link to={item.link} key={index} className="text-gray-400 hover:text-pink-300 hover:underline">{item.title}{index < topSearch.length - 1 && ', '}</Link>
              ))}
            </div>

            {/* MERGED: Using Mushi's dual buttons, styled like Zenime's */}
            <div className="flex flex-col sm:flex-row gap-4 mt-8">
              <Link to="/home" className="flex-1">
                <button className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-3 px-6 rounded-xl font-bold text-lg transform hover:scale-105 transition-transform">Explore Mushi's World</button>
              </Link>
              <Link to="/mushi_ai" className="flex-1">
                 <button className="w-full bg-gradient-to-r from-indigo-500 to-blue-500 text-white py-3 px-6 rounded-xl font-bold text-lg transform hover:scale-105 transition-transform">Chat with Mushi AI!</button>
              </Link>
            </div>

            {/* KEPT (from Mushi): The Admin Login Panel, restyled to fit */}
            <div className="mt-10 p-6 bg-white/5 backdrop-blur-md rounded-2xl border border-white/10 max-w-lg w-full">
              <h3 className="text-xl font-bold mb-4 text-purple-300 text-center">Admin Area 🤫</h3>
              <form onSubmit={handleAdminLogin} className="flex flex-col gap-4">
                <input type="password" value={adminPassword} onChange={(e) => setAdminPassword(e.target.value)} placeholder="Enter Mushi's secret password~" className="w-full p-3 rounded-lg bg-white/10 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-pink-400 border border-white/20" />
                {passwordError && <p className="text-red-300 text-sm text-center font-medium">{passwordError}</p>}
                <button type="submit" className="w-full py-2 bg-gradient-to-r from-red-400 to-pink-400 text-white font-bold rounded-lg transform hover:scale-105 transition-transform">Access Admin Area</button>
              </form>
            </div>

          </div>

          {/* KEPT (from Zenime): The decorative image on the right */}
          <div className="h-full w-[600px] absolute right-0 max-[780px]:hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-neutral-950/80 via-neutral-950/20 to-transparent z-10"></div>
            <img src="/splash.webp" alt="Splash" className="bg-cover rounded-r-[40px] w-full h-full object-cover" />
          </div>
        </div>

        {/* MERGED: Footer combining Zenime's copyright with Mushi's LLM info link */}
        <footer className="mt-10 text-center pb-4 text-sm text-gray-400">
          <p>© Clank Clank Mushi. All rights reserved.</p>
          <button onClick={() => setIsLLMModalOpen(true)} className="mt-2 text-purple-300 underline hover:text-purple-200 transition-colors">What is an LLM?~</button>
        </footer>

        {/* KEPT (from Mushi): The modal component itself */}
        <LLMInfoModal isOpen={isLLMModalOpen} onClose={() => setIsLLMModalOpen(false)} />
      </div>
    </div>
  );
}

export default SplashScreen;

--- FILE_END: ./mushi-frontend/src/views/SplashScreen.jsx ---

--- FILE_START: ./mushi-frontend/src/views/AnimeDetailView.jsx ---
// mushi-frontend/src/views/AnimeDetailView.jsx
import React from 'react';
import { useParams } from 'react-router-dom'; // To get the animeId from the URL
import AnimeDetailViewer from '../components/anime/details/AnimeDetailViewer'; // Import the detail viewer component

/**
 * AnimeDetailView component serves as a dedicated page to display the details of a single anime.
 * It extracts the animeId from the URL parameters and passes it to the AnimeDetailViewer.
 */
function AnimeDetailView() {
  // Use useParams to extract the animeId from the URL (e.g., /app/anime/details/some-anime-id)
  const { animeId } = useParams();

  if (!animeId) {
    return (
      <div className="text-red-400 text-center p-4">
        Eeeh~ Senpai, Mushi couldn't find an Anime ID in the URL. Gomen'nasai! (T_T)
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6">
      {/* AnimeDetailViewer will fetch and display details for the given animeId */}
      <AnimeDetailViewer animeId={animeId} />
    </div>
  );
}

export default AnimeDetailView;

--- FILE_END: ./mushi-frontend/src/views/AnimeDetailView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/AnimeCategoryView.jsx ---
// mushi-frontend/src/views/AnimeCategoryView.jsx
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom'; // For URL params/navigation
import AnimeCategoryList from '../components/anime/category/AnimeCategoryList';
import { api } from '../services/api'; // To fetch available genres/categories

/**
 * AnimeCategoryView component allows users to browse anime by category.
 * It displays a list of clickable categories and shows the selected category's anime.
 */
function AnimeCategoryView() {
  const navigate = useNavigate();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);

  // Get category from URL query parameter, default to 'top-airing' if not present
  const initialCategory = queryParams.get('category') || 'top-airing';
  const initialCategoryTitle = queryParams.get('title') || 'Top Airing';

  const [selectedCategory, setSelectedCategory] = useState(initialCategory);
  const [selectedCategoryTitle, setSelectedCategoryTitle] = useState(initialCategoryTitle);
  const [availableCategories, setAvailableCategories] = useState([]);
  const [isLoadingCategories, setIsLoadingCategories] = useState(true);
  const [categoriesError, setCategoriesError] = useState(null);

  // Define some common categories to display for easy navigation
  // These are slugs from the backend's AnimeAPIService
  const commonCategories = [
    { slug: 'top-airing', title: 'Top Airing' },
    { slug: 'most-popular', title: 'Most Popular' },
    { slug: 'completed', title: 'Completed' },
    { slug: 'movie', title: 'Movies' },
    { slug: 'tv', title: 'TV Series' },
    { slug: 'genre/action', title: 'Action' },
    { slug: 'genre/comedy', title: 'Comedy' },
    { slug: 'genre/fantasy', title: 'Fantasy' },
    { slug: 'genre/adventure', title: 'Adventure' },
    { slug: 'genre/sci-fi', title: 'Sci-Fi' },
    { slug: 'genre/drama', title: 'Drama' },
    { slug: 'genre/slice-of-life', title: 'Slice of Life' },
    { slug: 'genre/thriller', title: 'Thriller' },
    { slug: 'genre/supernatural', title: 'Supernatural' },
    { slug: 'genre/romance', title: 'Romance' },
    { slug: 'genre/mystery', title: 'Mystery' },
  ];

  useEffect(() => {
    // We can potentially fetch dynamic categories later, but for now, use a predefined list.
    // If you enable getHomeData() here, remember to handle its loading/error states.
    // For now, Mushi will just use a predefined list to make it easier, desu!~
    setAvailableCategories(commonCategories);
    setIsLoadingCategories(false);

    // Update state if URL parameters change from external navigation
    const currentCategoryFromUrl = queryParams.get('category');
    const currentTitleFromUrl = queryParams.get('title');
    if (currentCategoryFromUrl && currentCategoryFromUrl !== selectedCategory) {
      setSelectedCategory(currentCategoryFromUrl);
      setSelectedCategoryTitle(currentTitleFromUrl || currentCategoryFromUrl.replace('genre/', '').replace('-', ' ').split('/').pop().split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '));
    }
  }, [location.search, selectedCategory]); // Depend on location.search to react to URL changes

  const handleCategorySelect = (categorySlug, categoryTitle) => {
    setSelectedCategory(categorySlug);
    setSelectedCategoryTitle(categoryTitle);
    // Update URL to reflect the selected category, which is good for sharing!
    navigate(`/app/anime_category?category=${categorySlug}&title=${encodeURIComponent(categoryTitle)}`);
  };

  if (isLoadingCategories) {
    return (
      <div className="flex justify-center items-center h-64 text-indigo-300 text-lg">
        Mushi is loading all the sparkling categories for you, Senpai! Waku waku!~ ☆
      </div>
    );
  }

  if (categoriesError) {
    return (
      <div className="text-red-400 text-center p-4 border border-red-500 rounded-lg">
        Oh no! {categoriesError}
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6">
      <h2 className="text-3xl font-extrabold text-white text-center mb-8">
        Browse Anime by Category, Senpai! ✨
      </h2>

      {/* Category selection buttons */}
      <div className="flex flex-wrap justify-center gap-3 mb-8 p-4 bg-gray-800 rounded-lg shadow-lg">
        {availableCategories.map((cat) => (
          <button
            key={cat.slug}
            onClick={() => handleCategorySelect(cat.slug, cat.title)}
            className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200
              ${selectedCategory === cat.slug
                ? 'bg-indigo-600 text-white shadow-md'
                : 'bg-gray-700 text-gray-300 hover:bg-indigo-500 hover:text-white'
              }`}
          >
            {cat.title}
          </button>
        ))}
      </div>

      {/* Display AnimeCategoryList for the selected category */}
      {selectedCategory && (
        <AnimeCategoryList category={selectedCategory} categoryTitle={selectedCategoryTitle} />
      )}
      {!selectedCategory && (
        <div className="text-gray-400 text-center p-4">
          Please select a category above, Senpai! Mushi is ready to help! (´• ω •`)
        </div>
      )}
    </div>
  );
}

export default AnimeCategoryView;

--- FILE_END: ./mushi-frontend/src/views/AnimeCategoryView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/DataView.jsx ---
import React from 'react';
import DataClusterViewer from '../components/data/DataClusterViewer';
import { BrainCircuit } from 'lucide-react';

/**
 * DataView component presents the unique 3D cluster visualization of the site's knowledge base.
 */
function DataView() {
  return (
    <div className="container mx-auto py-6">
      <div className="text-center mb-10">
        <h2 className="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-teal-400 to-cyan-500 drop-shadow-lg mb-3">
          Mushi's Data Insights
        </h2>
        <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
          Welcome to the Anime Universe Explorer! This is a unique 3D visualization of all the data Mushi has learned. Each point represents a piece of information, and they are grouped together based on how similar they are.
        </p>
      </div>

      {/* The main feature component */}
      <DataClusterViewer />

      <div className="mt-12 p-6 bg-background/50 backdrop-blur-md rounded-2xl border border-border max-w-4xl mx-auto text-sm text-muted-foreground">
        <div className="flex items-start gap-4">
          <BrainCircuit className="w-10 h-10 text-teal-400 flex-shrink-0 mt-1" />
          <div>
            <h3 className="font-bold text-base text-foreground mb-1">How does this work?</h3>
            <p>Mushi uses a process called "embedding" to turn text into numbers. Then, a clustering algorithm (K-Means) groups these numbers. This visualization is a 3D representation of those clusters. It's a fun way to see how different anime topics relate to each other in Mushi's digital brain!</p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default DataView;

--- FILE_END: ./mushi-frontend/src/views/DataView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/CharacterDetailView.jsx ---
// mushi-frontend/src/views/CharacterDetailView.jsx
import React from 'react';
import { useParams } from 'react-router-dom'; // To get the characterId from the URL
import CharacterDetailViewer from '../components/anime/characters/CharacterDetailViewer'; // Import the character detail viewer component

/**
 * CharacterDetailView component serves as a dedicated page to display the details of a single anime character.
 * It extracts the characterId from the URL parameters and passes it to the CharacterDetailViewer.
 */
function CharacterDetailView() {
  // Use useParams to extract the characterId from the URL (e.g., /app/anime/character/some-character-id)
  const { characterId } = useParams();

  if (!characterId) {
    return (
      <div className="text-red-400 text-center p-4">
        Eeeh~ Senpai, Mushi couldn't find a Character ID in the URL. Gomen'nasai! (T_T)
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6">
      {/* CharacterDetailViewer will fetch and display details for the given characterId */}
      <CharacterDetailViewer characterId={characterId} />
    </div>
  );
}

export default CharacterDetailView;

--- FILE_END: ./mushi-frontend/src/views/CharacterDetailView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/VoiceActorDetailView.jsx ---
// mushi-frontend/src/views/VoiceActorDetailView.jsx
import React from 'react';
import { useParams } from 'react-router-dom'; // To get the actorId from the URL
import VoiceActorDetailViewer from '../components/anime/actors/VoiceActorDetailViewer'; // Import the voice actor detail viewer component

/**
 * VoiceActorDetailView component serves as a dedicated page to display the details of a single voice actor.
 * It extracts the actorId from the URL parameters and passes it to the VoiceActorDetailViewer.
 */
function VoiceActorDetailView() {
  // Use useParams to extract the actorId from the URL (e.g., /app/anime/actors/some-actor-id)
  const { actorId } = useParams();

  if (!actorId) {
    return (
      <div className="text-red-400 text-center p-4">
        Eeeh~ Senpai, Mushi couldn't find an Actor ID in the URL. Gomen'nasai! (T_T)
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6">
      {/* VoiceActorDetailViewer will fetch and display details for the given actorId */}
      <VoiceActorDetailViewer actorId={actorId} />
    </div>
  );
}

export default VoiceActorDetailView;

--- FILE_END: ./mushi-frontend/src/views/VoiceActorDetailView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/AdminView.jsx ---
import React from 'react';
import DataIngestionControls from '../components/data/DataIngestionControls';
import { AlertTriangle } from 'lucide-react';

/**
 * AdminView serves as the command center for managing the site's data knowledge base.
 */
function AdminView() {
  return (
    <div className="container mx-auto py-6">
      <div className="text-center mb-10">
        <h2 className="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-orange-500 drop-shadow-lg mb-3">
          Admin Command Center
        </h2>
        <p className="text-lg text-muted-foreground max-w-3xl mx-auto">
          This is the control panel for Mushi's knowledge base. Use these tools to ingest new data and update the vector store.
        </p>
      </div>

      <div className="max-w-3xl mx-auto p-6 bg-destructive/10 border border-destructive/30 rounded-lg mb-8 text-destructive-foreground">
        <div className="flex items-center gap-4">
          <AlertTriangle className="w-8 h-8 flex-shrink-0" />
          <p className="text-sm">
            <span className="font-bold">Warning:</span> These actions directly modify the site's data. Ingesting large amounts of data can be resource-intensive and take a long time. Proceed with caution.
          </p>
        </div>
      </div>

      {/* The main admin controls component */}
      <DataIngestionControls />

    </div>
  );
}

export default AdminView;

--- FILE_END: ./mushi-frontend/src/views/AdminView.jsx ---

--- FILE_START: ./mushi-frontend/src/views/AtoZListView.jsx ---
// src/views/AtoZListView.jsx (NEW FILE)
import React, { useState, useEffect } from 'react';
import { useParams, Link, useLocation } from 'react-router-dom';
import { api } from '@/src/services/api';
import CategoryCard from '@/src/components/categorycard/CategoryCard'; // Reusing for grid display

const ALPHABET = ["All", "#", "0-9", ...Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i))];

function AtoZListView() {
  const { letter } = useParams();
  const location = useLocation();
  const [animeList, setAnimeList] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  const activeLetter = letter || 'All';

  useEffect(() => {
    window.scrollTo(0, 0);
    setIsLoading(true);
    setError(null);

    // Construct the category slug for the API call
    const categorySlug = `az-list/${activeLetter === 'All' ? '' : activeLetter}`;

    api.anime.getByCategory(categorySlug)
      .then(data => {
        // The API returns { data: [...] } for this endpoint
        setAnimeList(data?.data || []);
      })
      .catch(err => {
        console.error("Failed to fetch A-Z list:", err);
        setError(`Mushi couldn't fetch the list for '${activeLetter}'. Gomen'nasai!`);
      })
      .finally(() => setIsLoading(false));

  }, [activeLetter, location.key]); // Rerun when the letter changes

  return (
    <div className="container mx-auto py-6">
      <h2 className="text-3xl font-extrabold text-white text-center mb-6">A-Z Anime List</h2>

      {/* A-Z Navigation */}
      <nav className="flex flex-wrap justify-center gap-2 mb-8 p-4 bg-white/5 rounded-lg">
        {ALPHABET.map(char => (
          <Link
            key={char}
            to={`/az-list/${char}`}
            className={`px-3 py-1 rounded-md font-bold transition-colors ${
              activeLetter === char
                ? 'bg-pink-500 text-black'
                : 'bg-gray-700 text-gray-300 hover:bg-pink-400/50'
            }`}
          >
            {char}
          </Link>
        ))}
      </nav>

      {/* Results Display */}
      {isLoading && <div className="text-center p-10 text-indigo-300 animate-pulse">Mushi is sorting the library...</div>}
      {error && <div className="text-center p-10 text-red-400">{error}</div>}
      {!isLoading && !error && (
        <CategoryCard
          label={`Showing results for: ${activeLetter}`}
          data={animeList}
          showViewMore={false} // We are already on the full view
        />
      )}
    </div>
  );
}

export default AtoZListView;

--- FILE_END: ./mushi-frontend/src/views/AtoZListView.jsx ---

--- FILE_START: ./mushi-frontend/src/services/api.js ---
// mushi-frontend/src/services/api.js
import axios from 'axios';

// The base URL for your Flask backend, derived from your config.py
const API_BASE_URL = 'http://127.0.0.1:8001';

/**
 * Create a configured instance of axios.
 * This instance will be used for all API calls.
 */
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

/**
 * A generic error handler to log errors and re-throw them for components to handle.
 * @param {string} context - The context of the API call (e.g., 'fetching LLM response').
 * @param {Error} error - The error object from axios.
 */
const handleError = (context, error) => {
  if (axios.isCancel(error)) {
    console.log('Request cancelled:', error.message);
    return;
  }
  const errorMessage = error.response?.data?.error || error.message;
  console.error(`Error ${context}:`, errorMessage);
  throw new Error(errorMessage);
};

// --- API Service Object ---
export const api = {
  llm: {
    chat: async (query, onChunkReceived, signal) => {
        try {
            const response = await fetch(`${API_BASE_URL}/api/llm/chat`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ query }),
                signal: signal,
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }

            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                const chunk = decoder.decode(value, { stream: true });
                onChunkReceived(chunk);
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                console.log('Chat request aborted by user.');
            } else {
                handleError('fetching LLM response', error);
            }
            throw error;
        }
    },
    getProviders: async () => {
      try {
        const response = await apiClient.get('/api/llm/providers');
        return response.data;
      } catch (error) {
        handleError('fetching LLM providers', error);
      }
    },
    setProvider: async (providerKey) => {
      try {
        const response = await apiClient.post('/api/llm/set-provider', { provider: providerKey });
        return response.data;
      } catch (error) {
        handleError('setting LLM provider', error);
      }
    },
    getCurrentProvider: async () => {
      try {
        const response = await apiClient.get('/api/llm/current_provider');
        return response.data;
      } catch (error) {
        handleError('fetching current LLM provider', error);
      }
    },
    getSuggestedQuestions: async (content) => {
      try {
        const response = await apiClient.post('/api/llm/suggest-questions', { content });
        return response.data;
      } catch (error) {
        handleError('fetching suggested questions', error);
      }
    },
  },

  onePiece: {
    getArcs: async () => {
      try {
        const response = await apiClient.get('/api/one-piece/arcs');
        return response.data;
      } catch (error) {
        handleError('fetching One Piece arcs', error);
      }
    },
    getSagas: async () => {
      try {
        const response = await apiClient.get('/api/one-piece/sagas');
        return response.data;
      } catch (error) {
        handleError('fetching One Piece sagas', error);
      }
    },
    getCharacters: async () => {
      try {
        const response = await apiClient.get('/api/one-piece/characters');
        return response.data;
      } catch (error) {
        handleError('fetching One Piece characters', error);
      }
    },
    getFruits: async () => {
      try {
        const response = await apiClient.get('/api/one-piece/fruits');
        return response.data;
      } catch (error) {
        handleError('fetching One Piece fruits', error);
      }
    },
    getCrews: async () => {
        try {
            const response = await apiClient.get('/api/one-piece/crews');
            return response.data;
        } catch (error) {
            handleError('fetching One Piece crews', error);
        }
    },
    getIslands: async () => {
        try {
            const response = await apiClient.get('/api/one-piece/islands');
            return response.data;
        } catch (error) {
            handleError('fetching One Piece islands', error);
        }
    },
  },

  anime: {
    getHomeData: async () => {
      try {
        const response = await apiClient.get('/api/anime/home');
        return response.data;
      } catch (error) {
        handleError('fetching anime home data', error);
      }
    },
    getTopTen: async () => {
      try {
        const response = await apiClient.get('/api/anime/top-ten');
        return response.data;
      } catch (error) {
        handleError('fetching top ten anime', error);
      }
    },
    getTopSearch: async () => {
      try {
        const response = await apiClient.get('/api/anime/top-search');
        return response.data;
      } catch (error) {
        handleError('fetching top search anime', error);
      }
    },
    getDetails: async (animeId) => {
      try {
        const response = await apiClient.get(`/api/anime/details/${animeId}`);
        return response.data;
      } catch (error) {
        handleError(`fetching details for anime ID ${animeId}`, error);
      }
    },
    getByCategory: async (category, page = 1) => {
      try {
        const response = await apiClient.get(`/api/anime/category/${category}`, { params: { page } });
        return response.data;
      } catch (error) {
        handleError(`fetching anime for category '${category}'`, error);
      }
    },
    search: async (query, page = 1) => {
      try {
        const response = await apiClient.get(`/api/anime/search`, { params: { q: query, page } });
        return response.data;
      } catch (error) {
        handleError(`searching for anime with query '${query}'`, error);
      }
    },
    getSearchSuggestions: async (keyword) => {
      try {
        const response = await apiClient.get(`/api/anime/search-suggestions`, { params: { keyword } });
        return response.data;
      } catch (error) {
        handleError(`fetching search suggestions for '${keyword}'`, error);
      }
    },
    getCharacterDetails: async (characterId) => {
      try {
        const response = await apiClient.get(`/api/anime/character/${characterId}`);
        return response.data;
      } catch (error) {
        handleError(`fetching character details for ID ${characterId}`, error);
      }
    },
    getVoiceActorDetails: async (actorId) => {
      try {
        const response = await apiClient.get(`/api/anime/actors/${actorId}`);
        return response.data;
      } catch (error) {
        handleError(`fetching voice actor details for ID ${actorId}`, error);
      }
    },
    getQtipInfo: async (qtipId) => {
      try {
        const response = await apiClient.get(`/api/anime/qtip/${qtipId}`);
        return response.data;
      } catch (error) {
        handleError(`fetching Qtip info for ID ${qtipId}`, error);
      }
    },
    getAvailableServers: async (animeId, episodeDataId) => {
      try {
        const response = await apiClient.get(`/api/anime/servers/${animeId}`, { params: { ep: episodeDataId } });
        return response.data;
      } catch (error) {
        handleError(`fetching available servers for anime ID ${animeId}, episode ID ${episodeDataId}`, error);
      }
    },
    getStreamingInfo: async (episodeId, serverId, streamType) => {
      try {
        const response = await apiClient.get(`/api/anime/stream`, {
          params: {
            id: episodeId,
            server: serverId,
            type: streamType
          }
        });
        return response.data;
      } catch (error) {
        handleError(`fetching streaming info for episode ID ${episodeId}, server ${serverId}, type ${streamType}`, error);
      }
    },
  },

  data: {
    getClusteredData: async (numClusters = 5) => {
      try {
        const response = await apiClient.get('/api/data/clusters', { params: { n_clusters: numClusters } });
        return response.data;
      } catch (error) {
        handleError(`fetching clustered data with ${numClusters} clusters`, error);
      }
    },
    ingestAllData: async () => {
      try {
        const response = await apiClient.post('/api/data/ingest_all_data');
        return response.data;
      } catch (error) {
        handleError('ingesting all data', error);
      }
    },
    ingestAnimeApiCategoryData: async (categories, limit) => {
      try {
        const response = await apiClient.post('/api/data/ingest_anime_api_category_data', null, {
          params: { categories, limit_per_category: limit }
        });
        return response.data;
      } catch (error) {
        handleError(`ingesting category data for ${categories}`, error);
      }
    },
  },

  news: {
    getLatestNews: async () => {
      try {
        const response = await apiClient.get('/api/news/latest');
        return response.data;
      } catch (error) {
        handleError('fetching latest news', error);
      }
    },
    searchNews: async (query) => {
      try {
        const response = await apiClient.get(`/api/news/search?query=${encodeURIComponent(query)}`);
        return response.data;
      } catch (error) {
        handleError('searching news', error);
      }
    },
  },
};

--- FILE_END: ./mushi-frontend/src/services/api.js ---

--- FILE_START: ./backend/embeddings/ollama_embedder.py ---
# backend/embeddings/ollama_embedder.py
import requests
import json
from config import Config

class OllamaEmbedder:
    """
    Handles generating embeddings using a local Ollama instance.
    """
    def __init__(self):
        self.base_url = Config.OLLAMA_BASE_URL
        self.embedding_model = Config.OLLAMA_EMBEDDING_MODEL
        self.headers = {'Content-Type': 'application/json'}

    def embed_text(self, text: str) -> list[float] | None:
        """
        Generates an embedding for the given text using the configured Ollama model.

        Args:
            text (str): The text to embed.

        Returns:
            list[float] | None: A list of floats representing the embedding vector,
                                 or None if an error occurs.
        """
        url = f"{self.base_url}/api/embeddings"
        payload = {
            "model": self.embedding_model,
            "prompt": text
        }
        print(f"DEBUG: OllamaEmbedder: Sending embedding request for text (first 50 chars): '{text[:50]}...'")
        try:
            response = requests.post(url, headers=self.headers, data=json.dumps(payload), timeout=60)
            response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)
            embedding_data = response.json()
            if 'embedding' in embedding_data:
                print("DEBUG: OllamaEmbedder: Successfully generated embedding.")
                return embedding_data['embedding']
            else:
                print(f"ERROR: OllamaEmbedder: 'embedding' key not found in response: {embedding_data}")
                return None
        except requests.exceptions.ConnectionError as e:
            print(f"ERROR: OllamaEmbedder: Connection error to Ollama server at {url}: {e}")
            return None
        except requests.exceptions.Timeout:
            print(f"ERROR: OllamaEmbedder: Embedding request timed out for model {self.embedding_model}.")
            return None
        except requests.exceptions.RequestException as e:
            print(f"ERROR: OllamaEmbedder: An error occurred during embedding request: {e}")
            return None
        except json.JSONDecodeError:
            print(f"ERROR: OllamaEmbedder: Failed to decode JSON response from Ollama: {response.text if 'response' in locals() else 'No response'}")
            return None
        except Exception as e:
            print(f"ERROR: OllamaEmbedder: An unexpected error occurred: {e}")
            return None

--- FILE_END: ./backend/embeddings/ollama_embedder.py ---

--- FILE_START: ./backend/embeddings/vector_store.py ---
# backend/embeddings/vector_store.py
import numpy as np
import pickle # For saving/loading Python objects
import gzip   # For compression
import os     # For file path operations
import logging
from typing import List, Dict, Optional, Any, Tuple # Added Tuple for similarity_search return type

# Configure logging for this module
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class VectorStore:
    """
    A simple in-memory vector store for storing documents and their embeddings.
    Provides basic similarity search using cosine similarity.
    Supports persistence to a .pkl.gz file.
    """
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.documents: List[Dict] = []
        self.next_id = 0
        logger.info(f"VectorStore: Initializing VectorStore with persistence path: {self.db_path}")
        self.load() # Attempt to load existing data on initialization

    def add_document(self, content: str, embedding: List[float], metadata: Optional[Dict] = None, source_item_id: Optional[str] = None):
        """
        Adds a document to the vector store.

        Args:
            content (str): The original text content of the document.
            embedding (List[float]): The embedding vector of the content.
            metadata (Optional[Dict]): Optional dictionary of additional metadata for the document.
            source_item_id (Optional[str]): A unique identifier from the original data source (e.g., aniwatch_id, ann_id).
        """
        # Ensure embedding is a numpy array for consistent operations
        if not isinstance(embedding, np.ndarray):
            embedding = np.array(embedding)

        # Check for duplicate source_item_id to prevent re-embedding the same item
        if source_item_id:
            for doc in self.documents:
                if doc.get("source_item_id") == source_item_id:
                    logger.debug(f"VectorStore: Document with source_item_id '{source_item_id}' already exists. Skipping.")
                    return

        document = {
            "id": self.next_id,
            "content": content,
            "embedding": embedding,
            "metadata": metadata if metadata is not None else {},
            "source_item_id": source_item_id
        }
        self.documents.append(document)
        self.next_id += 1
        logger.debug(f"VectorStore: Added document ID {document['id']} (Source ID: {source_item_id}). Total documents: {len(self.documents)}")


    def get_document_by_source_id(self, source_item_id: str) -> Optional[Dict]:
        """
        Retrieves a document by its source_item_id.
        """
        for doc in self.documents:
            if doc.get("source_item_id") == source_item_id:
                return doc
        return None

    def similarity_search(self, query_embedding: List[float], top_k: int = 5) -> List[Dict[str, Any]]:
        """
        Performs a cosine similarity search against stored document embeddings.

        Args:
            query_embedding (List[float]): The embedding vector of the query.
            top_k (int): The number of top similar documents to return.

        Returns:
            List[Dict]: A list of dictionaries, where each dictionary is a document
                        augmented with a 'similarity_score'. Sorted by score descending.
        """
        if not self.documents or not query_embedding:
            logger.warning("VectorStore: No documents or query embedding for similarity search.")
            return []

        query_embedding_array = np.array(query_embedding)
        if query_embedding_array.ndim == 1:
            query_embedding_array = query_embedding_array.reshape(1, -1)

        # Ensure query_embedding is a unit vector (normalized)
        norm_query_embedding = query_embedding_array / np.linalg.norm(query_embedding_array, axis=1, keepdims=True)

        scores = []
        for doc in self.documents:
            doc_embedding = doc.get("embedding")
            # Ensure embedding is a numpy array before performing calculations
            if isinstance(doc_embedding, list):
                doc_embedding = np.array(doc_embedding)

            if doc_embedding is not None and isinstance(doc_embedding, np.ndarray) and doc_embedding.size > 0:
                # Ensure document embedding is a unit vector (normalized)
                norm_doc_embedding = doc_embedding / np.linalg.norm(doc_embedding)

                # Reshape if necessary to perform dot product
                if norm_doc_embedding.ndim == 1:
                    norm_doc_embedding = norm_doc_embedding.reshape(1, -1)

                similarity = np.dot(norm_query_embedding, norm_doc_embedding.T)[0][0]
                scores.append((similarity, doc))
            else:
                logger.warning(f"VectorStore: Skipping document ID {doc.get('id')} due to missing or invalid embedding for similarity search.")

        # Sort by similarity score in descending order
        scores.sort(key=lambda x: x[0], reverse=True)

        # Return top_k documents with their scores
        result = []
        for score, doc in scores[:top_k]:
            doc_copy = doc.copy()
            doc_copy['similarity_score'] = float(score) # Ensure score is standard float
            result.append(doc_copy)

        logger.debug(f"VectorStore: Found {len(result)} relevant documents.")
        return result

    def get_all_documents_with_embeddings(self) -> List[Dict[str, Any]]:
        """
        Returns all documents currently in the store, ensuring embeddings are NumPy arrays.
        """
        return [doc for doc in self.documents if doc.get('embedding') is not None]

    def save(self):
        """
        Saves the current state of the vector store to a gzipped pickle file.
        Converts numpy arrays to lists for serialization if necessary.
        """
        try:
            # Prepare documents for serialization: convert numpy arrays to lists
            serializable_documents = []
            for doc in self.documents:
                doc_copy = doc.copy()
                if isinstance(doc_copy.get("embedding"), np.ndarray):
                    doc_copy["embedding"] = doc_copy["embedding"].tolist()
                serializable_documents.append(doc_copy)

            data_to_save = {
                "documents": serializable_documents,
                "next_id": self.next_id
            }
            with gzip.open(self.db_path, 'wb') as f:
                pickle.dump(data_to_save, f)
            logger.info(f"VectorStore: Successfully saved {len(self.documents)} documents to {self.db_path}. Next ID: {self.next_id}")
        except Exception as e:
            logger.error(f"VectorStore: Failed to save vector store to {self.db_path}: {e}", exc_info=True)

    def load(self):
        """
        Loads the vector store from a gzipped pickle file.
        Converts embedding lists back to numpy arrays upon loading.
        """
        if not os.path.exists(self.db_path):
            logger.warning(f"VectorStore: Database file not found at {self.db_path}. Starting fresh.")
            self.documents = []
            self.next_id = 0
            return

        try:
            with gzip.open(self.db_path, 'rb') as f:
                data = pickle.load(f)

            loaded_documents = []
            for doc in data.get("documents", []):
                # Convert embedding lists back to NumPy arrays if they were saved as lists
                if isinstance(doc.get("embedding"), list):
                    doc["embedding"] = np.array(doc["embedding"])
                loaded_documents.append(doc)

            self.documents = loaded_documents
            self.next_id = data.get("next_id", 0)
            logger.info(f"VectorStore: Successfully loaded {len(self.documents)} documents from {self.db_path}.")
            if self.documents:
                # Recalculate next_id to ensure it's correct even if not perfectly saved or if IDs are not sequential
                self.next_id = max([doc["id"] for doc in self.documents]) + 1
                logger.info(f"VectorStore: Recalculated next_id to {self.next_id} after loading.")

        except EOFError:
            logger.warning(f"VectorStore: {self.db_path} is empty or corrupted (EOFError). Starting fresh.")
            self.documents = []
            self.next_id = 0
        except Exception as e:
            logger.error(f"VectorStore: Failed to load vector store from {self.db_path}: {e}. Starting fresh.")
            self.documents = []
            self.next_id = 0

    def clear(self):
        """Clears all documents from the vector store."""
        self.documents = []
        self.next_id = 0
        logger.info("VectorStore: Cleared all documents.")
        self.save() # Save the empty state

--- FILE_END: ./backend/embeddings/vector_store.py ---

--- FILE_START: ./backend/embeddings/__init__.py ---

--- FILE_END: ./backend/embeddings/__init__.py ---

--- FILE_START: ./backend/api.md ---
# Mushi Backend API Specification for Frontend Service Generation

## Objective
This document provides a complete, robust, and structured specification for the Mushi backend API. The goal is to use this specification to generate a comprehensive `api.js` file for a frontend application. The generated file should export an asynchronous function for each endpoint defined below.

---
## Section 1: LLM API
**Base Path:** `/api/llm`
---

### 1.1 Endpoint: Chat with LLM
- **JS Function Name:** `chatWithLlm`
- **Description:** Sends a user's query to the backend for a RAG-enhanced LLM response.
- **Method:** `POST`
- **Full Path:** `/api/llm/chat`
- **Request Body (JSON):**
  ```json
  {
    "query": "string"
  }

  Success Response (200 OK):
  {
  "response": "string"
  }


  Error Response (4xx/5xx):
  {
  "error": "string"
  }

1.2 Endpoint: Suggest Follow-up Questions
JS Function Name: getSuggestedQuestions
Description: Generates follow-up questions based on the user's last input.
Method: POST
Full Path: /api/llm/suggest-questions
Request Body (JSON):

{
  "content": "string"
}

Success Response (200 OK):
{
  "suggested_questions": ["string", "string", "string"]
}

Error Response (4xx/5xx):
{
  "error": "string"
}

1.3 Endpoint: Get LLM Providers
JS Function Name: getLlmProviders
Description: Retrieves the list of available LLM providers.
Method: GET
Full Path: /api/llm/providers
Success Response (200 OK):
{
  "gemini": "Google Gemini (Cloud)",
  "ollama": "Ollama Qwen2.5 (Local)"
}

1.4 Endpoint: Set Active LLM Provider
JS Function Name: setLlmProvider
Description: Sets the active LLM provider on the backend.
Method: POST
Full Path: /api/llm/set-provider
Request Body (JSON):
{
  "provider": "string"
}
Use code with caution.
Json
Success Response (200 OK):
{
  "message": "string"
}
Use code with caution.
Json
Section 2: Data & Clustering API
Base Path: /api/data
2.1 Endpoint: Get Clustered Documents
JS Function Name: getClusteredData
Description: Performs K-Means clustering on all embedded documents.
Method: GET
Full Path: /api/data/clusters
Query Parameters:
name: n_clusters
type: number
status: optional
default: 5
Success Response (200 OK):
{
  "documents": [
    {
      "id": "string",
      "content": "string",
      "source": "string",
      "type": "string",
      "cluster_label": "number"
    }
  ],
  "cluster_info": {
    "centroids": "array",
    "n_clusters": "number"
  }
}
Use code with caution.
Json
Error Response (4xx/5xx):
{
  "error": "string",
  "details": "string"
}
Use code with caution.
Json
Section 3: Shikimori API
Base Path: /api/shikimori
3.1 Endpoint: Search Anime
JS Function Name: searchShikimoriAnime
Description: Searches for anime titles on Shikimori.
Method: GET
Full Path: /api/shikimori/anime/search
Query Parameters:
name: q, type: string, status: required
name: limit, type: number, status: optional, default: 10
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "aired_year": "number | null", "poster_url": "string | null"}]
Use code with caution.
Json
3.2 Endpoint: Get Anime Details
JS Function Name: getShikimoriAnimeDetails
Description: Fetches detailed information for a specific anime.
Method: GET
Full Path: /api/shikimori/anime/<anime_id>
Path Parameters:
name: anime_id, type: number, status: required
Success Response (200 OK):
{"id": "number", "name": "string", "russian_name": "string", "kind": "string", "episodes": "number", "status": "string", "aired_date": "string | null", "released_date": "string | null", "poster_original_url": "string | null", "description_html": "string | null"}
Use code with caution.
Json
3.3 Endpoint: Get Recent Anime
JS Function Name: getRecentShikimoriAnime
Description: Fetches recently updated anime from Shikimori.
Method: GET
Full Path: /api/shikimori/anime/recent
Query Parameters:
name: limit, type: number, status: optional, default: 5
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "aired_year": "number | null", "status": "string", "poster_url": "string | null"}]
Use code with caution.
Json
3.4 Endpoint: Search Manga
JS Function Name: searchShikimoriManga
Description: Searches for manga titles on Shikimori.
Method: GET
Full Path: /api/shikimori/manga/search
Query Parameters:
name: q, type: string, status: required
name: limit, type: number, status: optional, default: 10
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "volumes": "number", "chapters": "number", "status": "string", "poster_url": "string | null"}]
Use code with caution.
Json
3.5 Endpoint: Get Recent Manga
JS Function Name: getRecentShikimoriManga
Description: Fetches recently updated manga from Shikimori.
Method: GET
Full Path: /api/shikimori/manga/recent
Query Parameters:
name: limit, type: number, status: optional, default: 5
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "volumes": "number", "chapters": "number", "status": "string", "poster_url": "string | null"}]
Use code with caution.
Json
3.6 Endpoint: Search Characters
JS Function Name: searchShikimoriCharacters
Description: Searches for characters on Shikimori.
Method: GET
Full Path: /api/shikimori/characters/search
Query Parameters:
name: q, type: string, status: required
name: limit, type: number, status: optional, default: 10
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "poster_url": "string | null"}]
Use code with caution.
Json
3.7 Endpoint: Get Character Details
JS Function Name: getShikimoriCharacterDetails
Description: Fetches detailed information for a specific character.
Method: GET
Full Path: /api/shikimori/characters/<character_id>
Path Parameters:
name: character_id, type: number, status: required
Success Response (200 OK):
{"id": "number", "name": "string", "russian_name": "string", "description_html": "string | null", "poster_url": "string | null"}
Use code with caution.
Json
3.8 Endpoint: Search People
JS Function Name: searchShikimoriPeople
Description: Searches for people (staff, voice actors) on Shikimori.
Method: GET
Full Path: /api/shikimori/people/search
Query Parameters:
name: q, type: string, status: required
name: limit, type: number, status: optional, default: 10
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "russian_name": "string", "poster_url": "string | null"}]
Use code with caution.
Json
3.9 Endpoint: Get Person Details
JS Function Name: getShikimoriPersonDetails
Description: Fetches detailed information for a specific person.
Method: GET
Full Path: /api/shikimori/people/<person_id>
Path Parameters:
name: person_id, type: number, status: required
Success Response (200 OK):
{"id": "number", "name": "string", "russian_name": "string", "website": "string | null", "poster_original_url": "string | null"}
Use code with caution.
Json
Section 4: Anime News Network (ANN) API
Base Path: /api/news
4.1 Endpoint: Search ANN Titles
JS Function Name: searchAnnTitles
Description: Searches for titles in the ANN encyclopedia.
Method: GET
Full Path: /api/news/ann/search
Query Parameters:
name: q, type: string, status: required
Success Response (200 OK): Array<Object>
[{"id": "string", "name": "string", "type": "string"}]
Use code with caution.
Json
4.2 Endpoint: Get ANN Title Details
JS Function Name: getAnnTitleDetails
Description: Fetches details for a specific ANN title.
Method: GET
Full Path: /api/news/ann/title/<title_id>
Path Parameters:
name: title_id, type: number, status: required
Success Response (200 OK):
{"id": "string", "type": "string", "genres": ["string"], "themes": ["string"], "staff": [{"task": "string", "person": "string", "person_id": "string"}], "episodes": "number | null", "vintage": "string | null", "main_title": "string", "alternative_titles": ["string"]}
Use code with caution.
Json
4.3 Endpoint: Get Recent ANN Items
JS Function Name: getRecentAnnItems
Description: Fetches recently added encyclopedia items from ANN.
Method: GET
Full Path: /api/news/ann/recent
Query Parameters:
name: limit, type: number, status: optional, default: 10
Success Response (200 OK): Array<Object>
[{"id": "string", "gid": "string", "type": "string", "name": "string", "precision": "string", "vintage": "string"}]
Use code with caution.
Json
Section 5: One Piece API
Base Path: /api/one-piece
5.1 Endpoint: Get Sagas
JS Function Name: getOnePieceSagas
Description: Fetches all One Piece sagas.
Method: GET
Full Path: /api/one-piece/sagas
Success Response (200 OK): Array<Object>
[{"id": "number", "title": "string", "number_of_arcs": "number"}]
Use code with caution.
Json
5.2 Endpoint: Get Characters
JS Function Name: getOnePieceCharacters
Description: Fetches all One Piece characters.
Method: GET
Full Path: /api/one-piece/characters
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "gender": "string", "status": "string"}]
Use code with caution.
Json
5.3 Endpoint: Get Devil Fruits
JS Function Name: getOnePieceFruits
Description: Fetches all One Piece Devil Fruits.
Method: GET
Full Path: /api/one-piece/fruits
Success Response (200 OK): Array<Object>
[{"id": "number", "name": "string", "type": "string", "description": "string"}]



--- FILE_END: ./backend/api.md ---

--- FILE_START: ./backend/config.py ---
# backend/config.py
import os
from dotenv import load_dotenv

# Load environment variables from .env file at the very start
# This ensures that os.getenv() calls below can find the values
load_dotenv()

class Config:
    # --- API Keys & External Service URLs ---
    GEMINI_API_KEY = os.getenv("GEMINI_KEY")

    # Ollama Configuration
    # Use environment variable for base URL with a common default
    OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
    OLLAMA_EMBEDDING_MODEL = "all-minilm:latest" # Internal, never exposed to user

    # Define specific Ollama models available for generation
    # The new anime model you pulled:
    OLLAMA_ANIME_MODEL_NAME = "sc0v0ne/xeroxvaldo_sharopildo:latest"
    # Your existing qwen2.5 model:
    OLLAMA_QWEN_MODEL_NAME = "qwen2.5:3b"

    # Set the default Ollama model for the OllamaLLMService to use
    # This will be the anime model you want as the primary
    OLLAMA_DEFAULT_GENERATION_MODEL = OLLAMA_ANIME_MODEL_NAME
    # Timeout for Ollama LLM generation in seconds
    OLLAMA_GEN_TIMEOUT = int(os.getenv("OLLAMA_GENERATION_TIMEOUT", 120))


    # AnimeNewsNetwork API (no auth needed, just base URL)
    ANN_API_BASE_URL = "https://www.animenewsnetwork.com/encyclopedia/api.php"

    # One Piece API (no auth needed, just base URL)
    ONE_PIECE_API_BASE_URL = "https://api.api-onepiece.com/v2"

    # Aniwatch API Configuration (your locally hosted instance)
    ANIWATCH_API_BASE_URL = os.getenv("ANIWATCH_API_BASE_URL", "http://localhost:4444")


    # --- LLM Provider Selection ---
    # Dictionary of available LLM providers for the user to choose from for GENERATION
    # Now includes distinct entries for the two Ollama models
    LLM_PROVIDERS = {
        "gemini": "Google Gemini (Cloud)",
        "ollama_anime": "Ollama Anime Expert (Local)",
        "ollama_qwen": "Ollama Qwen2.5 (Local)"
    }
    # This variable will store the currently selected LLM for generation.
    # It can be updated via an API call from the frontend.
    # DEFAULT to the new anime Ollama model if DEFAULT_GENERATION_LLM is not set in .env
    CURRENT_GENERATION_LLM = os.getenv("DEFAULT_GENERATION_LLM", "ollama_anime")

    # Flask App Configuration
    # Set DEBUG to True directly to ensure it's always on for development.
    # This will show errors in the terminal and enable auto-reloading.
    DEBUG = True
    PORT = int(os.getenv("FLASK_PORT", 8001))
    HOST = os.getenv("FLASK_HOST", "127.0.0.1")

    # Vector Store Configuration
    # Path for the persistent vector store data, relative to the backend directory
    # This ensures the .pkl.gz file is created/loaded in the same directory as config.py
    VECTOR_DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vector_db.pkl.gz')

    # --- Scheduler Configuration ---
    # Interval in minutes for how often the data embedding service should update
    EMBEDDING_UPDATE_INTERVAL_MINUTES = int(os.getenv("EMBEDDING_UPDATE_INTERVAL_MINUTES", 1440)) # Default to 24 hours


--- FILE_END: ./backend/config.py ---

--- FILE_START: ./backend/project_goals.md ---
# Clank Clank Mushi - Project Goals

The main goal of the "Clank Clank Mushi" project is to create a personal, intelligent application for consuming anime news and exploring anime lore. This app aims to be more than just a news feed; it's designed to be an interactive companion that enhances understanding and engagement with anime content.

---

### Specific Project Goals

* **Functional News Aggregation:** Successfully connect to and fetch news articles from at least one external anime news API. The retrieved articles should be displayed clearly on the application's interface.

* **Robust LLM Backend Integration:** Implement a stable backend using Flask and Python to seamlessly communicate with the Google Gemini API (or a specified Ollama LLM if configured). This integration will be the backbone for all AI-powered features.

* **Intuitive User Prompt Chat:** Develop a user-friendly chat interface that allows users to type free-form questions and receive relevant text-based responses from the LLM. This chat should be easily accessible from anywhere in the application.

* **Contextual Suggested Questions:** Implement logic to automatically generate and display a set of LLM-powered questions relevant to the current page's content (e.g., a specific news article) or general anime topics when no article is active.

* **"Lore Navigator" Feature:** Create the functionality for users to query the LLM about specific anime terms, characters, or concepts, receiving concise explanations and related information on demand.

* **"Trendspotter" Feature:** Develop the capability for the LLM to analyze aggregated news data, identify emerging trends, perform sentiment analysis, and generate speculative predictions about future anime industry developments.

* **"Debate Arena" Feature:** Implement a system where the LLM can process user-defined scenarios or debates and provide balanced pro/con summaries based on its knowledge of anime lore.

* **Localhost Operability:** Ensure the entire application is configured to run smoothly and reliably on `localhost:8001`, as it is intended for personal use.
* **MVC Architecture Adherence:** Structure the codebase following the Model-View-Controller pattern to ensure modularity, maintainability, and scalability for future enhancements.

--- FILE_END: ./backend/project_goals.md ---

--- FILE_START: ./backend/requirements.txt ---
Flask==3.0.3
python-dotenv==1.0.1
google-generativeai==0.6.0
requests==2.32.3
Flask-Cors==4.0.1
Flask-Cors
numpy
Flask-APScheduler
joblib
scikit-learn

--- FILE_END: ./backend/requirements.txt ---

--- FILE_START: ./backend/one_piece_news.json ---
{
  "alternative_titles": [
    "All'arrembaggio! - One Piece",
    "One Piece - Tutti all'Arrembaggio",
    "Tutti All'arrembaggio",
    "\u0412\u0430\u043d \u041f\u0438\u0441",
    "\u0648\u0646 \u0628\u064a\u0633",
    "\u30ef\u30f3\u30d4\u30fc\u30b9",
    "\u822a\u6d77\u738b",
    "\uc6d0\ud53c\uc2a4"
  ],
  "description": "Before he was executed, the legendary Pirate King Gold Roger revealed that he had hidden the treasure One Piece somewhere in the Grand Line. Now, many pirates are off looking for this legendary treasure to claim the title Pirate King. One pirate, Monkey D. Luffy, is a boy who had eaten the Devil's Fruit and gained rubber powers. Now he and his crew are off to find One Piece, while battling enemies and making new friends along the way.",
  "id": "836",
  "main_title": "One Piece",
  "news": [
    {
      "datetime": "2001-01-16T03:56:48Z",
      "href": "https://www.animenewsnetwork.com/news/2001-01-15/animage-top-100-anime-listing",
      "title": "Animage Top-100 Anime Listing"
    },
    {
      "datetime": "2002-05-10T04:39:39Z",
      "href": "https://www.animenewsnetwork.com/news/2002-05-10/june-animage-ranks-anime",
      "title": "June Animage Ranks Anime"
    },
    {
      "datetime": "2004-05-12T16:51:51Z",
      "href": "https://www.animenewsnetwork.com/news/2004-05-12/animage-awards",
      "title": "Animage Awards"
    },
    {
      "datetime": "2005-08-26T16:17:13Z",
      "href": "https://www.animenewsnetwork.com/news/2005-08-26/white-pirates-black-pirates",
      "title": "White Pirates, Black Pirates?"
    },
    {
      "datetime": "2005-09-23T17:39:30Z",
      "href": "https://www.animenewsnetwork.com/news/2005-09-23/tv-asahi-top-100-anime",
      "title": "TV Asahi Top 100 Anime"
    },
    {
      "datetime": "2005-09-23T20:38:14Z",
      "href": "https://www.animenewsnetwork.com/news/2005-09-23/tv-asahi-top-100-anime-part-2",
      "title": "TV Asahi Top 100 Anime Part 2"
    },
    {
      "datetime": "2006-04-04T15:55:40Z",
      "href": "https://www.animenewsnetwork.com/news/2006-04-04/weekly-shonen-jump-top-anthology-with-girls",
      "title": "Weekly Shonen Jump Top Anthology with Girls"
    },
    {
      "datetime": "2006-10-12T21:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2006-10-13/japans-favorite-tv-anime",
      "title": "Japan's Favorite TV Anime"
    },
    {
      "datetime": "2006-12-06T16:06:38Z",
      "href": "https://www.animenewsnetwork.com/news/2006-12-06/4kids-cancels-one-piece-production",
      "title": "4Kids Cancels One Piece Production"
    },
    {
      "datetime": "2007-04-13T05:04:23Z",
      "href": "https://www.animenewsnetwork.com/news/2007-04-13/funimation-acquires-one-piece",
      "title": "Funimation Acquires One Piece"
    },
    {
      "datetime": "2007-04-19T16:02:01Z",
      "href": "https://www.animenewsnetwork.com/news/2007-04-19/japanese-anime-tv-ranking-april-9-15",
      "title": "Japanese Anime TV Ranking, April 9-15"
    },
    {
      "datetime": "2007-04-20T15:05:39Z",
      "href": "https://www.animenewsnetwork.com/news/2007-04-20/japanese-anime-dvd-ranking-april-11-17",
      "title": "Japanese Anime DVD Ranking, April 11-17"
    },
    {
      "datetime": "2007-04-27T09:48:36Z",
      "href": "https://www.animenewsnetwork.com/news/2007-04-27/japanese-anime-tv-ranking-april-16-22",
      "title": "Japanese Anime TV Ranking, April 16-22"
    },
    {
      "datetime": "2007-05-08T12:46:21Z",
      "href": "https://www.animenewsnetwork.com/news/2007-05-08/japanese-anime-tv-ranking-april-23-29",
      "title": "Japanese Anime TV Ranking, April 23-29"
    },
    {
      "datetime": "2007-05-08T16:09:32Z",
      "href": "https://www.animenewsnetwork.com/news/2007-05-08/japanese-game-ranking-april-23-29",
      "title": "Japanese Game Ranking, April 23-29"
    },
    {
      "datetime": "2007-05-16T20:41:16Z",
      "href": "https://www.animenewsnetwork.com/news/2007-05-16/anime-expo-toei-announces-2-anime-directors-as-guests",
      "title": "Anime Expo, Toei Announces 2 Anime Directors as Guests"
    },
    {
      "datetime": "2007-05-17T20:54:53Z",
      "href": "https://www.animenewsnetwork.com/news/2007-05-17/anime-expo-upgrades-cosplay-with-pc-prize-goth-loli",
      "title": "Anime Expo Upgrades Cosplay with PC Prize, Goth-Loli"
    },
    {
      "datetime": "2007-05-24T20:29:15Z",
      "href": "https://www.animenewsnetwork.com/news/2007-05-24/japanese-anime-tv-ranking-april-30-may-20",
      "title": "Japanese Anime TV Ranking: April 30-May 20"
    },
    {
      "datetime": "2007-06-08T19:40:58Z",
      "href": "https://www.animenewsnetwork.com/news/2007-06-08/japanese-anime-tv-ranking-may-28-june-3",
      "title": "Japanese Anime TV Ranking: May 28-June 3"
    },
    {
      "datetime": "2007-06-12T14:03:33Z",
      "href": "https://www.animenewsnetwork.com/news/2007-06-12/more-distractions-lead-to-falling-kids-anime-ratings",
      "title": "More Distractions Lead to Falling Kids' Anime Ratings"
    },
    {
      "datetime": "2007-06-16T00:12:45Z",
      "href": "https://www.animenewsnetwork.com/news/2007-06-15/japanese-animation-dvd-ranking-june-6-12",
      "title": "Japanese Animation DVD Ranking, June 6\u201312"
    },
    {
      "datetime": "2007-06-18T15:00:18Z",
      "href": "https://www.animenewsnetwork.com/news/2007-06-18/japanese-anime-tv-ranking-june-4-10",
      "title": "Japanese Anime TV Ranking: June 4\u201310"
    },
    {
      "datetime": "2007-07-01T18:22:00Z",
      "href": "https://www.animenewsnetwork.com/news/2007-07-01/funimation-confirms-onepiece-dub-cast-ax-2007",
      "title": "Funimation Confirms <cite>One Piece</cite> Dub Cast"
    },
    {
      "datetime": "2007-07-25T11:15:12Z",
      "href": "https://www.animenewsnetwork.com/news/2007-07-25/japanese-animation-dvd-ranking-july-18-july-24",
      "title": "Japanese Animation DVD Ranking, July 18\u2013July 24"
    },
    {
      "datetime": "2007-08-08T10:43:28Z",
      "href": "https://www.animenewsnetwork.com/news/2007-08-08/toonami-jetstream-to-host-one-piece-dbz-bobobo-bo",
      "title": "Toonami Jetstream to Host <cite>One Piece, DBZ, Bobobo-bo</cite>"
    },
    {
      "datetime": "2007-08-16T03:07:17Z",
      "href": "https://www.animenewsnetwork.com/news/2007-08-15/mattel-recalls-one-piece-figure-due-to-small-magnets",
      "title": "Mattel Recalls <cite>One Piece</cite> Figure Due to Small Magnets"
    },
    {
      "datetime": "2007-09-12T19:46:51Z",
      "href": "https://www.animenewsnetwork.com/news/2007-09-12/bandai-namco-tgs",
      "title": "Bandai Namco Releases Tokyo Game Show Lineup"
    },
    {
      "datetime": "2007-09-19T19:26:59Z",
      "href": "https://www.animenewsnetwork.com/news/2007-09-19/anime-weekend-atlanta-to-premiere-new-one-piece-dub",
      "title": "Anime Weekend Atlanta to Premiere New <cite>One Piece</cite> Dub"
    },
    {
      "datetime": "2007-09-28T14:59:34Z",
      "href": "https://www.animenewsnetwork.com/news/2007-09-28/funimation's-new-one-piece-dub-starts-saturday",
      "title": "Funimation's New <cite>One Piece</cite> Dub Starts Saturday"
    },
    {
      "datetime": "2007-10-11T17:56:45Z",
      "href": "https://www.animenewsnetwork.com/news/2007-10-11/new-york-anime-festival-guests",
      "title": "New York Anime Festival Announces New Guests"
    },
    {
      "datetime": "2007-11-30T12:30:24Z",
      "href": "https://www.animenewsnetwork.com/news/2007-11-30/japanese-anime-tv-ranking-september-17-november-25",
      "title": "Japanese Anime TV Ranking: September 17\u2013November 25"
    },
    {
      "datetime": "2007-12-07T10:02:51Z",
      "href": "https://www.animenewsnetwork.com/news/2007-12-07/japanese-anime-tv-ranking-november-26-december-2",
      "title": "Japanese Anime TV Ranking: November 26\u2013December 2"
    },
    {
      "datetime": "2007-12-14T22:53:50Z",
      "href": "https://www.animenewsnetwork.com/news/2007-12-14/japanese-anime-tv-ranking-december-3-9",
      "title": "Japanese Anime TV Ranking: December 3\u20139"
    },
    {
      "datetime": "2007-12-21T06:37:59Z",
      "href": "https://www.animenewsnetwork.com/news/2007-12-21/japanese-anime-tv-ranking-december-10-16",
      "title": "Japanese Anime TV Ranking: December 10\u201316"
    },
    {
      "datetime": "2007-12-30T11:55:14Z",
      "href": "https://www.animenewsnetwork.com/news/2007-12-30/japanese-anime-tv-ranking-december-17-23",
      "title": "Japanese Anime TV Ranking: December 17\u201323"
    },
    {
      "datetime": "2008-01-17T10:32:58Z",
      "href": "https://www.animenewsnetwork.com/news/2008-01-17/japanese-animation-dvd-ranking-january-2-15",
      "title": "Japanese Animation DVD Ranking, January 2\u201315"
    },
    {
      "datetime": "2008-01-22T06:10:53Z",
      "href": "https://www.animenewsnetwork.com/news/2008-01-22/japanese-anime-tv-ranking-december-31-january-13",
      "title": "Japanese Anime TV Ranking: December 31\u2013January 13"
    },
    {
      "datetime": "2008-02-01T21:07:05Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-01/japanese-anime-tv-ranking-january-14-27",
      "title": "Japanese Anime TV Ranking: January 14\u201327"
    },
    {
      "datetime": "2008-02-07T01:56:05Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-06/one-pieces-american-theatrical-run-starts-thursday",
      "title": "<cite>One Piece's</cite> American Theatrical Run Starts Thursday"
    },
    {
      "datetime": "2008-02-09T21:28:20Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-09/japanese-anime-tv-ranking-january-28-february-3",
      "title": "Japanese Anime TV Ranking: January 28\u2013February 3"
    },
    {
      "datetime": "2008-02-18T04:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-17/japanese-anime-tv-ranking-february-4-10",
      "title": "Japanese Anime TV Ranking: February 4\u201310"
    },
    {
      "datetime": "2008-02-19T22:25:27Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-19/funimations-one-piece-merchandising",
      "title": "Funimations Acquires <cite>One Piece</cite> Merchandising Rights"
    },
    {
      "datetime": "2008-02-20T01:14:39Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-19/one-piece-alabasta-movie-trailer-posted-online",
      "title": "<cite>One Piece Alabasta</cite> Movie's Trailer Posted Online"
    },
    {
      "datetime": "2008-02-20T06:30:54Z",
      "href": "https://www.animenewsnetwork.com/news/2008-02-20/japanese-anime-tv-ranking-february-11-17",
      "title": "Japanese Anime TV Ranking: February 11\u201317"
    },
    {
      "datetime": "2008-03-01T13:13:06Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-01/japanese-anime-tv-ranking-february-18-25",
      "title": "Japanese Anime TV Ranking: February 18\u201325"
    },
    {
      "datetime": "2008-03-06T10:55:43Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-06/disney-madhouse-to-make-stitch-show-for-japanese-tv",
      "title": "Disney, Madhouse to Make <cite>Stitch!</cite> Show for Japanese TV"
    },
    {
      "datetime": "2008-03-08T06:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-08/japanese-anime-tv-ranking-february-25-march-2",
      "title": "Japanese Anime TV Ranking: February 25\u2013March 2"
    },
    {
      "datetime": "2008-03-23T07:47:42Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-23/japanese-anime-tv-ranking-march-10-16",
      "title": "Japanese Anime TV Ranking: March 10\u201316"
    },
    {
      "datetime": "2008-03-28T19:06:44Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-28/jam-project-supergroup-with-dbz-kageyama-at-otakon",
      "title": "JAM Project Supergroup with <cite>DBZ's</cite> Kageyama at Otakon"
    },
    {
      "datetime": "2008-03-29T07:12:11Z",
      "href": "https://www.animenewsnetwork.com/news/2008-03-29/cartoon-network-has-no-plans-for-one-piece-return",
      "title": "Cartoon Network Has No Plans for <cite>One Piece's</cite> Return"
    },
    {
      "datetime": "2008-04-02T03:46:26Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-01/japanese-box-office-march-22-23-29-30",
      "title": "Japanese Box Office: March 22\u201323, 29\u201330"
    },
    {
      "datetime": "2008-04-07T08:25:48Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-07/manga-rule-bookscan-graphic-novel-list",
      "title": "Manga Rule BookScan Graphic Novel List"
    },
    {
      "datetime": "2008-04-09T19:56:05Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-09/japanese-box-office-april-5-6",
      "title": "Japanese Box Office: April 5-6"
    },
    {
      "datetime": "2008-04-14T20:23:57Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-14/japanese-anime-tv-ranking-march-17-23-conan-rises",
      "title": "Japanese Anime TV Ranking, March 17\u201323: <cite>Conan</cite> Rises"
    },
    {
      "datetime": "2008-04-16T18:03:39Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-16/japanese-anime-tv-ranking-march-24-30-seasonal-break",
      "title": "Japanese Anime TV Ranking, March 24\u201330: Seasonal Break"
    },
    {
      "datetime": "2008-04-18T20:08:10Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-18/japanese-anime-tv-ranking-march-31-april-6",
      "title": "Japanese Anime TV Ranking, March 31\u2013April 6"
    },
    {
      "datetime": "2008-04-25T03:54:37Z",
      "href": "https://www.animenewsnetwork.com/news/2008-04-24/japanese-anime-tv-ranking-april-14-20",
      "title": "Japanese Anime TV Ranking, April 14\u201320"
    },
    {
      "datetime": "2008-05-05T19:33:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-05-05/japanese-anime-tv-ranking-april-21-27",
      "title": "Japanese Anime TV Ranking, April 21\u201327"
    },
    {
      "datetime": "2008-05-09T03:28:10Z",
      "href": "https://www.animenewsnetwork.com/news/2008-05-08/japanese-anime-tv-ranking-april-28-may-4",
      "title": "Japanese Anime TV Ranking, April 28\u2013May 4"
    },
    {
      "datetime": "2008-05-17T18:37:37Z",
      "href": "https://www.animenewsnetwork.com/news/2008-05-17/japanese-anime-tv-ranking-may-5-11",
      "title": "Japanese Anime TV Ranking, May 5\u201311"
    },
    {
      "datetime": "2008-05-23T15:50:19Z",
      "href": "https://www.animenewsnetwork.com/news/2008-05-23/otakon-to-feature-death-note-inu-yasha-yamaguchi",
      "title": "Otakon To Feature <i>Death Note</i>, <i>Inuyasha</i>'s Yamaguchi"
    },
    {
      "datetime": "2008-05-27T20:15:36Z",
      "href": "https://www.animenewsnetwork.com/news/2008-05-27/japanese-anime-tv-ranking-may-12-18",
      "title": "Japanese Anime TV Ranking, May 12\u201318"
    },
    {
      "datetime": "2008-06-02T17:48:35Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-02/japanese-anime-tv-ranking-may-19-25",
      "title": "Japanese Anime TV Ranking, May 19\u201325"
    },
    {
      "datetime": "2008-06-08T02:12:05Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-07/funimation-starts-podcast-announces-1st-ouran-voices",
      "title": "Funimation Starts Podcast, Announces 1st <cite>Ouran</cite> Voices"
    },
    {
      "datetime": "2008-06-08T03:57:10Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-07/japanese-anime-tv-ranking-may-26-june-1",
      "title": "Japanese Anime TV Ranking, May 26\u2013June 1"
    },
    {
      "datetime": "2008-06-08T17:16:54Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-08/jump-super-tour-anime-lineup-announced-in-japan",
      "title": "Jump Super Tour's Anime Lineup Announced in Japan"
    },
    {
      "datetime": "2008-06-15T20:41:53Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-15/japanese-anime-tv-ranking-june-2-8/2",
      "title": "Japanese Anime TV Ranking, June 2\u20138"
    },
    {
      "datetime": "2008-06-23T03:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-06-22/japanese-anime-tv-ranking-june-9-15",
      "title": "Japanese Anime TV Ranking, June 9\u201315"
    },
    {
      "datetime": "2008-07-01T11:22:30Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-01/japanese-anime-tv-ranking-june-16-22",
      "title": "Japanese Anime TV Ranking, June 16\u201322"
    },
    {
      "datetime": "2008-07-11T17:07:11Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-11/indonesian-tv-station-reprimanded-for-airing-one-piece",
      "title": "Indonesian TV Station Reprimanded for Airing <cite>One Piece</cite>"
    },
    {
      "datetime": "2008-07-15T16:51:19Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-15/japanese-anime-tv-ranking-june-23-29",
      "title": "Japanese Anime TV Ranking, June 23\u201329"
    },
    {
      "datetime": "2008-07-16T19:37:43Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-16/japanese-animation-dvd-ranking-july-3-9",
      "title": "Japanese Animation DVD Ranking, July 3\u20139"
    },
    {
      "datetime": "2008-07-17T19:29:31Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-17/japanese-anime-tv-ranking-june-30-july-6",
      "title": "Japanese Anime TV Ranking, June 30\u2013July 6"
    },
    {
      "datetime": "2008-07-31T15:05:33Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-31/law-journal-aricle-supports-fansubs",
      "title": "Law Journal Article Supports Fansubs"
    },
    {
      "datetime": "2008-07-22T18:22:35Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-22/japanese-anime-tv-ranking-july-7-13",
      "title": "Japanese Anime TV Ranking, July 7\u201313"
    },
    {
      "datetime": "2008-07-30T22:08:22Z",
      "href": "https://www.animenewsnetwork.com/news/2008-07-30/japanese-anime-tv-ranking-july-14-20",
      "title": "Japanese Anime TV Ranking, July 14\u201320"
    },
    {
      "datetime": "2008-08-05T16:21:02Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-05/japanese-anime-tv-ranking-july-21-27",
      "title": "Japanese Anime TV Ranking, July 21\u201327"
    },
    {
      "datetime": "2008-08-11T17:44:16Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-11/japanese-anime-tv-ranking-july-28-august-3",
      "title": "Japanese Anime TV Ranking, July 28\u2013August 3"
    },
    {
      "datetime": "2008-08-19T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-18/japanese-anime-tv-ranking-august-4-10",
      "title": "Japanese Anime TV Ranking, August 4\u201310"
    },
    {
      "datetime": "2008-08-21T04:47:13Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-21/newspaper-profiles-toei-animation-philippines-studio",
      "title": "Newspaper Profiles Toei Animation Philippines Studio"
    },
    {
      "datetime": "2008-08-25T18:33:39Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-25/japanese-animation-dvd-ranking-august-13-20",
      "title": "Japanese Animation DVD Ranking, August 13\u201320"
    },
    {
      "datetime": "2008-08-26T17:38:10Z",
      "href": "https://www.animenewsnetwork.com/news/2008-08-26/japanese-anime-tv-ranking-august-11-17",
      "title": "Japanese Anime TV Ranking, August 11\u201317"
    },
    {
      "datetime": "2008-09-03T03:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-02/japanese-anime-tv-ranking-august-18-24",
      "title": "Japanese Anime TV Ranking, August 18\u201324"
    },
    {
      "datetime": "2008-09-08T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-07/japanese-anime-tv-ranking-august-25-31",
      "title": "Japanese Anime TV Ranking, August 25\u201331"
    },
    {
      "datetime": "2008-09-14T01:03:20Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-14/japanese-animation-dvd-ranking-september-3-9",
      "title": "Japanese Animation DVD Ranking, September 3\u20139"
    },
    {
      "datetime": "2008-09-13T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-12/japanese-animation-dvd-ranking-september-3-9a",
      "title": "Japanese Animation DVD Ranking, September 3\u20139"
    },
    {
      "datetime": "2008-09-16T03:56:01Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-15/japanese-anime-tv-ranking-september-1-7",
      "title": "Japanese Anime TV Ranking, September 1\u20137"
    },
    {
      "datetime": "2008-09-22T02:17:35Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-21/japanese-anime-tv-ranking-september-8-14",
      "title": "Japanese Anime TV Ranking, September 8\u201314"
    },
    {
      "datetime": "2008-09-30T03:46:53Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-29/japanese-anime-tv-ranking-september-15-21",
      "title": "Japanese Anime TV Ranking, September 15\u201321"
    },
    {
      "datetime": "2008-10-01T03:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-09-30/anime-nominated-for-tv-dvd-awards",
      "title": "Anime Nominated for TV DVD Awards"
    },
    {
      "datetime": "2008-10-01T11:22:55Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-01/italian-volleyball-team-put-one-piece-on-uniforms",
      "title": "Italian Volleyball Team Puts <cite>One Piece</cite> on Uniforms"
    },
    {
      "datetime": "2008-10-08T01:50:11Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-07/japanese-anime-tv-ranking-september-22-28",
      "title": "Japanese Anime TV Ranking, September 22\u201328"
    },
    {
      "datetime": "2008-10-13T03:40:46Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-12/japanese-anime-tv-ranking-september-29-october-5",
      "title": "Japanese Anime TV Ranking, September 29-October 5"
    },
    {
      "datetime": "2008-10-16T22:10:50Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-16/japanese-animation-dvd-ranking-september-24-october-14",
      "title": "Japanese Animation DVD Ranking, September 24-October 14"
    },
    {
      "datetime": "2008-10-20T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-19/japanese-anime-tv-ranking-october-6-12",
      "title": "Japanese Anime TV Ranking, October 6-12"
    },
    {
      "datetime": "2008-10-24T23:54:37Z",
      "href": "https://www.animenewsnetwork.com/news/2008-10-24/japanese-anime-tv-ranking-october-13-19",
      "title": "Japanese Anime TV Ranking, October 13-19"
    },
    {
      "datetime": "2008-11-10T21:16:44Z",
      "href": "https://www.animenewsnetwork.com/news/2008-11-10/4kids-to-terminate-fox-programming-block-in-december",
      "title": "4Kids to End Its Fox Programming Block in December"
    },
    {
      "datetime": "2008-11-14T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-11-13/japanese-animation-dvd-ranking-november-5-11",
      "title": "Japanese Animation DVD Ranking, November 5-11"
    },
    {
      "datetime": "2008-11-17T01:52:42Z",
      "href": "https://www.animenewsnetwork.com/news/2008-11-16/japanese-anime-tv-ranking-november-3-9",
      "title": "Japanese Anime TV Ranking, November 3-9"
    },
    {
      "datetime": "2008-11-23T23:53:12Z",
      "href": "https://www.animenewsnetwork.com/news/2008-11-23/japanese-anime-tv-ranking-november-10-16",
      "title": "Japanese Anime TV Ranking, November 10-16"
    },
    {
      "datetime": "2008-11-30T21:18:03Z",
      "href": "https://www.animenewsnetwork.com/news/2008-11-30/japanese-anime-tv-ranking-november-17-23",
      "title": "Japanese Anime TV Ranking, November 17-23"
    },
    {
      "datetime": "2008-12-08T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-07/japanese-anime-tv-ranking-november-24-30",
      "title": "Japanese Anime TV Ranking, November 24-30"
    },
    {
      "datetime": "2008-12-10T04:47:42Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-09/japanese-animation-dvd-ranking-december-3-9",
      "title": "Japanese Animation DVD Ranking, December 3-9"
    },
    {
      "datetime": "2008-12-15T04:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-14/japanese-anime-tv-ranking-december-1-7",
      "title": "Japanese Anime TV Ranking, December 1-7"
    },
    {
      "datetime": "2008-12-19T02:45:07Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-18/ponyo-sky-crawlers-nominated-for-japan-academy-prize",
      "title": "<cite>Ponyo, Sky Crawlers</cite> Nominated for Japan Academy Prizes"
    },
    {
      "datetime": "2008-12-22T03:08:33Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-21/japanese-anime-tv-ranking-december-8-14",
      "title": "Japanese Anime TV Ranking, December 8-14"
    },
    {
      "datetime": "2008-12-22T16:18:18Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-22/new-db-tegami-bachi-romance-dawn-anime-dvd-offered",
      "title": "New <cite>DB, Tegami Bachi, Romance Dawn</cite> Anime DVD Offered"
    },
    {
      "datetime": "2008-12-30T17:36:05Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-30/japanese-anime-tv-ranking-december-15-21",
      "title": "Japanese Anime TV Ranking, December 15-21"
    },
    {
      "datetime": "2008-12-31T17:31:02Z",
      "href": "https://www.animenewsnetwork.com/news/2008-12-31/2009-one-piece-movie-to-mark-anime-10th-anniversary",
      "title": "2009 <cite>One Piece</cite> Movie to Mark Anime's 10th Anniversary"
    },
    {
      "datetime": "2009-01-13T04:51:32Z",
      "href": "https://www.animenewsnetwork.com/news/2009-01-12/japanese-anime-tv-ranking-december-22-28",
      "title": "Japanese Anime TV Ranking, December 22-28"
    },
    {
      "datetime": "2009-01-14T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-01-13/japanese-animation-dvd-ranking-january-6-12",
      "title": "Japanese Animation DVD Ranking, January 6-12"
    },
    {
      "datetime": "2009-01-15T23:57:03Z",
      "href": "https://www.animenewsnetwork.com/news/2009-01-15/stranger-20th-century-boys-at-italy-future-film-fest",
      "title": "<cite>Stranger, 20th Century Boys</cite> at Italy's Future Film Fest"
    },
    {
      "datetime": "2009-01-24T03:09:05Z",
      "href": "https://www.animenewsnetwork.com/news/2009-01-23/japanese-anime-tv-ranking-january-5-11",
      "title": "Japanese Anime TV Ranking, January 5-11"
    },
    {
      "datetime": "2009-02-10T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-02-09/japanese-anime-tv-ranking-january-19-25",
      "title": "Japanese Anime TV Ranking, January 19-25"
    },
    {
      "datetime": "2009-02-11T03:02:14Z",
      "href": "https://www.animenewsnetwork.com/news/2009-02-10/japanese-animation-dvd-ranking-february-3-9",
      "title": "Japanese Animation DVD Ranking, February 3-9"
    },
    {
      "datetime": "2009-02-16T03:50:20Z",
      "href": "https://www.animenewsnetwork.com/news/2009-02-15/japanese-anime-tv-ranking-january-26-february-1",
      "title": "Japanese Anime TV Ranking, January 26-February 1"
    },
    {
      "datetime": "2009-02-17T17:59:13Z",
      "href": "https://www.animenewsnetwork.com/news/2009-02-17/sakura-con-to-host-voice-actor-kappei-yamaguchi",
      "title": "Sakura-Con to Host Voice Actor Kappei Yamaguchi"
    },
    {
      "datetime": "2009-03-03T04:11:31Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-02/japanese-anime-tv-ranking-february-2-8",
      "title": "Japanese Anime TV Ranking, February 2-8"
    },
    {
      "datetime": "2009-03-04T07:50:04Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-04/uncertain-state-of-the-anime-industry-profiled",
      "title": "Uncertain State of the Anime Industry Profiled"
    },
    {
      "datetime": "2009-03-11T03:23:48Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-10/japanese-animation-dvd-ranking-march-3-9",
      "title": "Japanese Animation DVD Ranking, March 3-9"
    },
    {
      "datetime": "2009-03-11T03:57:55Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-10/nyc-kinokuniya-books-to-host-anime-day-this-sunday",
      "title": "NYC's Kinokuniya Books to Host Anime Day This Sunday (Update 2)"
    },
    {
      "datetime": "2009-03-17T12:04:56Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-17/4kids-quarterly-and-annual-losses-mount-shares-drop-30-percent",
      "title": "4Kids' Quarterly & Annual Losses Mount, Shares Drop 30%"
    },
    {
      "datetime": "2009-03-17T03:39:12Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-16/japanese-anime-tv-ranking-february-9-15",
      "title": "Japanese Anime TV Ranking, February 9-15"
    },
    {
      "datetime": "2009-03-21T01:47:12Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-20/japanese-anime-tv-ranking-february-16-22",
      "title": "Japanese Anime TV Ranking, February 16-22"
    },
    {
      "datetime": "2009-03-21T12:50:47Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-21/jump-gets-its-own-saki-yomi-jum-bang-tv-talk-show",
      "title": "<cite>Jump</cite> Gets Its Own <cite>Saki-yomi Jum-Bang!</cite> TV Talk Show"
    },
    {
      "datetime": "2009-03-23T03:58:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-22/japanese-anime-tv-ranking-february-23-march-1",
      "title": "Japanese Anime TV Ranking, February 23-March 1"
    },
    {
      "datetime": "2009-03-25T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-24/japanese-anime-tv-ranking-march-2-8",
      "title": "Japanese Anime TV Ranking, March 2-8"
    },
    {
      "datetime": "2009-03-29T18:25:23Z",
      "href": "https://www.animenewsnetwork.com/news/2009-03-29/japanese-anime-tv-ranking-march-9-15",
      "title": "Japanese Anime TV Ranking, March 9-15"
    },
    {
      "datetime": "2009-04-07T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-06/japanese-anime-tv-ranking-march-23-29",
      "title": "Japanese Anime TV Ranking, March 23-29"
    },
    {
      "datetime": "2009-04-08T02:45:31Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-07/japanese-animation-dvd-ranking-march-31-april-6",
      "title": "Japanese Animation DVD Ranking, March 31-April 6"
    },
    {
      "datetime": "2009-04-14T03:36:32Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-13/japanese-anime-tv-ranking-march-30-april-5",
      "title": "Japanese Anime TV Ranking, March 30-April 5"
    },
    {
      "datetime": "2009-04-16T19:39:45Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-16/japanese-anime-tv-ranking-april-6-12",
      "title": "Japanese Anime TV Ranking, April 6-12"
    },
    {
      "datetime": "2009-04-20T21:07:49Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-20/one-piece-early-days-singer-ai-kawashima-in-nyc-in-may",
      "title": "<cite>One Piece, Early Days</cite> singer Ai Kawashima in NYC in May"
    },
    {
      "datetime": "2009-04-22T10:17:02Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-22/japanese-anime-tv-ranking-april-13-19",
      "title": "Japanese Anime TV Ranking, April 13-19"
    },
    {
      "datetime": "2009-05-01T01:50:37Z",
      "href": "https://www.animenewsnetwork.com/news/2009-04-30/japanese-anime-tv-ranking-april-20-26",
      "title": "Japanese Anime TV Ranking, April 20-26"
    },
    {
      "datetime": "2009-05-07T01:00:30Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-06/japanese-cd-single-ranking-april-27-may-3",
      "title": "Japanese CD Single Ranking, April 27-May 3"
    },
    {
      "datetime": "2009-05-12T20:39:46Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-12/japanese-anime-tv-ranking-april-27-may-3",
      "title": "Japanese Anime TV Ranking, April 27-May 3"
    },
    {
      "datetime": "2009-05-14T17:36:33Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-14/one-piece-to-start-simulcast-on-may-30",
      "title": "<cite>One Piece</cite> Pirate Anime to Start Simulcast on May 30 (Update 3)"
    },
    {
      "datetime": "2009-05-15T16:30:36Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-15/fresh-precure-film-to-open-in-japan-in-fall",
      "title": "<cite>Fresh Precure!</cite> Magical Girl Anime Film to Open in Fall"
    },
    {
      "datetime": "2009-05-20T03:51:44Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-19/japanese-animation-dvd-ranking-may-11-17",
      "title": "Japanese Animation DVD Ranking, May 11-17"
    },
    {
      "datetime": "2009-05-30T08:21:53Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-30/one-piece-newest-episode-leaked-before-japan-debut",
      "title": "<cite>One Piece's</cite> Newest Episode Leaked Before Japan's Debut"
    },
    {
      "datetime": "2009-05-30T21:43:15Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-30/funimation-cancels-one-piece-simulcast",
      "title": "Funimation Cancels One Piece Simulcast (Update 2)"
    },
    {
      "datetime": "2009-05-31T06:48:09Z",
      "href": "https://www.animenewsnetwork.com/news/2009-05-31/fullmetal-alchemist-not-streaming-from-funimation.com",
      "title": "<cite>Fullmetal Alchemist</cite> Not Streaming from Funimation.com (Update 2)"
    },
    {
      "datetime": "2009-06-08T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-07/japanese-anime-tv-ranking-may-4-10",
      "title": "Japanese Anime TV Ranking, May 4-10"
    },
    {
      "datetime": "2009-06-10T15:20:11Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-10/japanese-animation-dvd-ranking-june-1-7",
      "title": "Japanese Animation DVD Ranking, June 1-7"
    },
    {
      "datetime": "2009-06-14T01:17:19Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-13/funimation-brings-its-web-video-player-back-online",
      "title": "Funimation Brings Its Web Video Player Back Online"
    },
    {
      "datetime": "2009-06-21T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-20/japanese-anime-tv-ranking-may-11-17",
      "title": "Japanese Anime TV Ranking, May 11-17"
    },
    {
      "datetime": "2009-06-22T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-21/japanese-anime-tv-ranking-may-18-24",
      "title": "Japanese Anime TV Ranking, May 18-24"
    },
    {
      "datetime": "2009-06-23T01:17:05Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-22/japanese-anime-tv-ranking-may-25-31",
      "title": "Japanese Anime TV Ranking, May 25-31"
    },
    {
      "datetime": "2009-06-28T18:54:13Z",
      "href": "https://www.animenewsnetwork.com/news/2009-06-28/japanese-anime-tv-ranking-june-1-7",
      "title": "Japanese Anime TV Ranking, June 1-7"
    },
    {
      "datetime": "2009-07-04T20:04:20Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-04/funimation-to-release-sengoku-basara",
      "title": "Funimation Adds <cite>Sengoku Basara</cite> TV Anime Series (Update 2)"
    },
    {
      "datetime": "2009-07-07T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-06/japanese-anime-tv-ranking-june-8-14",
      "title": "Japanese Anime TV Ranking, June 8-14"
    },
    {
      "datetime": "2009-07-08T02:14:47Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-07/japanese-animation-dvd-ranking-june-29-july-5",
      "title": "Japanese Animation DVD Ranking, June 29-July 5"
    },
    {
      "datetime": "2009-07-10T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-09/japanese-anime-tv-ranking-june-15-21",
      "title": "Japanese Anime TV Ranking, June 15-21"
    },
    {
      "datetime": "2009-07-11T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-10/japan-animation-tv-ranking-june-22-28",
      "title": "Japan's Animation TV Ranking, June 22-28"
    },
    {
      "datetime": "2009-07-14T01:58:40Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-13/japan-animation-tv-ranking-june-29-july-5",
      "title": "Japan's Animation TV Ranking, June 29-July 5"
    },
    {
      "datetime": "2009-07-15T17:14:02Z",
      "href": "https://www.animenewsnetwork.com/news/2009-07-15/japan-animation-tv-ranking-july-6-12",
      "title": "Japan's Animation TV Ranking, July 6-12"
    },
    {
      "datetime": "2009-08-04T20:47:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-04/4kids-entertainment-reportedly-put-itself-up-for-sale",
      "title": "4Kids Entertainment Reportedly Puts Itself Up for Sale"
    },
    {
      "datetime": "2009-08-05T17:17:56Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-05/4kids-retains-financial-advisor-to-consider-strategies",
      "title": "4Kids Retains Financial Advisor to Consider Strategies"
    },
    {
      "datetime": "2009-08-08T19:17:29Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-08/japan-animation-tv-ranking-july-13-19",
      "title": "Japan's Animation TV Ranking, July 13-19"
    },
    {
      "datetime": "2009-08-11T12:39:01Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-11/4kids-reports-us$13.8-million-loss-in-second-quarter",
      "title": "4Kids Reports US$13.8 Million Loss in Second Quarter"
    },
    {
      "datetime": "2009-08-12T02:08:05Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-11/japanese-animation-dvd-ranking-august-3-9",
      "title": "Japanese Animation DVD Ranking, August 3-9"
    },
    {
      "datetime": "2009-08-17T20:44:13Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-17/one-piece-streaming-announcement-tomorrow",
      "title": "<cite>One Piece</cite> Streaming Announcement Tomorrow"
    },
    {
      "datetime": "2009-08-18T17:04:31Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-18/funimation-to-relaunch-one-piece-streams-on-saturday",
      "title": "Funimation to Relaunch <cite>One Piece</cite> Simulcast on August 29"
    },
    {
      "datetime": "2009-08-25T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-24/japan-animation-tv-ranking-july-27-august-2",
      "title": "Japan's Animation TV Ranking, July 27-August 2"
    },
    {
      "datetime": "2009-08-26T13:54:23Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-26/uk-itv-close-to-signing-deal-for-hulu-video-site",
      "title": "UK's ITV Close to Signing Deal for Hulu Video Site"
    },
    {
      "datetime": "2009-08-29T19:09:15Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-29/funimation-one-piece-simulcast-begins-tonight",
      "title": "Funimation's <cite>One Piece</cite> Simulcast Begins Tonight"
    },
    {
      "datetime": "2009-08-30T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-08-29/japan-animation-tv-ranking-august-3-9",
      "title": "Japan's Animation TV Ranking, August 3-9"
    },
    {
      "datetime": "2009-09-03T03:48:47Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-02/japan-animation-tv-ranking-august-10-16",
      "title": "Japan's Animation TV Ranking, August 10-16"
    },
    {
      "datetime": "2009-09-07T17:01:15Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-07/japan-animation-tv-ranking-august-17-23",
      "title": "Japan's Animation TV Ranking, August 17-23"
    },
    {
      "datetime": "2009-09-08T00:52:16Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-07/japan-animation-tv-ranking-august-24-30",
      "title": "Japan's Animation TV Ranking, August 24-30"
    },
    {
      "datetime": "2009-09-09T03:38:21Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-08/japanese-animation-dvd-ranking-august-31-september-6",
      "title": "Japanese Animation DVD Ranking, August 31-September 6"
    },
    {
      "datetime": "2009-09-15T02:59:13Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-14/japan-animation-tv-ranking-august-31-september-6",
      "title": "Japan's Animation TV Ranking, August 31-September 6"
    },
    {
      "datetime": "2009-09-20T01:31:14Z",
      "href": "https://www.animenewsnetwork.com/news/2009-09-19/japan-animation-tv-ranking-september-7-13",
      "title": "Japan's Animation TV Ranking, September 7-13"
    },
    {
      "datetime": "2009-10-02T03:48:26Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-01/japan-animation-tv-ranking-september-14-20",
      "title": "Japan's Animation TV Ranking, September 14-20"
    },
    {
      "datetime": "2009-10-05T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-04/japan-animation-tv-ranking-september-21-27",
      "title": "Japan's Animation TV Ranking, September 21-27"
    },
    {
      "datetime": "2009-10-13T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-12/japan-animation-tv-ranking-september-28-october-4",
      "title": "Japan's Animation TV Ranking, September 28-October 4"
    },
    {
      "datetime": "2009-10-14T07:53:35Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-14/japanese-animation-dvd-ranking-october-5-11",
      "title": "Japanese Animation DVD Ranking, October 5-11"
    },
    {
      "datetime": "2009-10-17T18:12:38Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-17/japan-animation-tv-ranking-october-5-11",
      "title": "Japan's Animation TV Ranking, October 5-11"
    },
    {
      "datetime": "2009-10-21T04:21:41Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-21/mr-children-on-10th-one-piece-film-becky-on-shin-chan",
      "title": "Mr. Children on 10th <cite>One Piece</cite> film, Becky on <cite>Shin-chan</cite>"
    },
    {
      "datetime": "2009-10-27T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-26/japan-animation-tv-ranking-october-12-18",
      "title": "Japan's Animation TV Ranking, October 12-18"
    },
    {
      "datetime": "2009-10-31T21:29:17Z",
      "href": "https://www.animenewsnetwork.com/news/2009-10-31/2010-precure-film-2009-one-piece-film-videos-posted",
      "title": "2010 <cite>Precure</cite> Film, 2009 <cite>One Piece</cite> Film's Videos Posted"
    },
    {
      "datetime": "2009-11-04T00:12:32Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-03/japan-animation-tv-ranking-october-19-25",
      "title": "Japan's Animation TV Ranking, October 19-25"
    },
    {
      "datetime": "2009-11-10T23:07:11Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-10/japan-animation-tv-ranking-october-26-november-1",
      "title": "Japan's Animation TV Ranking, October 26-November 1"
    },
    {
      "datetime": "2009-11-11T12:27:10Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-11/4kids-reveals-us$5-million-loss-in-third-quarter",
      "title": "4Kids Reveals US$5-Million Loss in Third Quarter"
    },
    {
      "datetime": "2009-11-11T03:38:47Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-10/japanese-animation-dvd-ranking-november-2-8",
      "title": "Japanese Animation DVD Ranking, November 2-8"
    },
    {
      "datetime": "2009-11-16T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-15/japan-animation-tv-ranking-november-2-8",
      "title": "Japan's Animation TV Ranking, November 2-8"
    },
    {
      "datetime": "2009-11-18T04:09:21Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-17/japan-animation-tv-ranking-november-9-15",
      "title": "Japan's Animation TV Ranking, November 9-15"
    },
    {
      "datetime": "2009-11-30T19:55:50Z",
      "href": "https://www.animenewsnetwork.com/news/2009-11-30/japan-animation-tv-ranking-november-16-22",
      "title": "Japan's Animation TV Ranking, November 16-22"
    },
    {
      "datetime": "2009-12-09T03:08:05Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-08/japan-animation-dvd-ranking-november-30-december-6",
      "title": "Japan's Animation DVD Ranking, November 30-December 6"
    },
    {
      "datetime": "2009-12-11T06:51:43Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-11/japan-animation-tv-ranking-november-23-29",
      "title": "Japan's Animation TV Ranking, November 23-29"
    },
    {
      "datetime": "2009-12-14T08:47:45Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-14/10th-one-piece-film-tops-ponyo-opening-weekend",
      "title": "10th <cite>One Piece</cite> Film Tops <cite>Ponyo's</cite> Opening Weekend"
    },
    {
      "datetime": "2009-12-17T00:12:46Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-16/japanese-box-office-december-12-13",
      "title": "Japanese Box Office, December 12-13"
    },
    {
      "datetime": "2009-12-24T13:26:15Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-24/japan-animation-tv-ranking-november-30-december-6",
      "title": "Japan's Animation TV Ranking, November 30-December 6"
    },
    {
      "datetime": "2009-12-26T11:19:23Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-26/japanese-box-office-december-19-20",
      "title": "Japanese Box Office, December 19-20"
    },
    {
      "datetime": "2009-12-26T04:17:31Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-25/japan-animation-tv-ranking-december-7-13",
      "title": "Japan's Animation TV Ranking, December 7-13"
    },
    {
      "datetime": "2009-12-29T02:21:16Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-28/japan-animation-tv-ranking-december-14-20",
      "title": "Japan's Animation TV Ranking, December 14-20"
    },
    {
      "datetime": "2010-01-01T04:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2009-12-31/in-memoriam",
      "title": "In Memoriam"
    },
    {
      "datetime": "2010-01-02T16:40:16Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-02/top-10-anime-business-of-2009-by-animeanime.jp",
      "title": "Top 10 Anime Business News of 2009 by animeanime.jp"
    },
    {
      "datetime": "2010-01-12T04:13:04Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-11/japan-animation-tv-ranking-december-21-27",
      "title": "Japan's Animation TV Ranking, December 21-27"
    },
    {
      "datetime": "2010-01-13T03:19:53Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-12/japan-animation-dvd-ranking-december-28-january-10",
      "title": "Japan's Animation DVD Ranking, December 28-January 10"
    },
    {
      "datetime": "2010-01-16T17:24:33Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-16/japanese-box-office-january-9-10",
      "title": "Japanese Box Office, January 9-10"
    },
    {
      "datetime": "2010-01-25T03:31:36Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-24/japanese-box-office-january-16-17",
      "title": "Japanese Box Office, January 16-17"
    },
    {
      "datetime": "2010-01-25T05:52:06Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-25/one-piece-anime-theme-park-attraction-to-open-in-march",
      "title": "<cite>One Piece</cite> Anime Theme Park Attraction to Open in March"
    },
    {
      "datetime": "2010-01-26T11:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-26/funimation-streams-sekirei-ichi-movie-other-anime",
      "title": "Funimation Streams Uncensored <cite>Sekirei,</cite> Other Anime"
    },
    {
      "datetime": "2010-01-26T21:33:53Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-26/japan-animation-tv-ranking-january-4-10",
      "title": "Japan's Animation TV Ranking, January 4-10"
    },
    {
      "datetime": "2010-01-29T08:03:31Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-29/japanese-box-office-january-23-24",
      "title": "Japanese Box Office, January 23-24"
    },
    {
      "datetime": "2010-02-01T04:45:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-01-31/japan-animation-tv-ranking-january-11-17",
      "title": "Japan's Animation TV Ranking, January 11-17"
    },
    {
      "datetime": "2010-02-04T04:37:14Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-03/japan-animation-tv-ranking-january-18-24",
      "title": "Japan's Animation TV Ranking, January 18-24"
    },
    {
      "datetime": "2010-02-08T19:51:28Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-08/japan-animation-tv-ranking-january-25-31",
      "title": "Japan's Animation TV Ranking, January 25-31"
    },
    {
      "datetime": "2010-02-09T20:38:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-09/dubbed-strike-witches-wallflower-halo-clip-posted",
      "title": "Dubbed <cite>Strike Witches, Wallflower, Halo</cite> Clip Posted"
    },
    {
      "datetime": "2010-02-10T02:34:45Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-09/japan-animation-dvd-ranking-february-1-7",
      "title": "Japan's Animation DVD Ranking, February 1-7"
    },
    {
      "datetime": "2010-02-13T18:38:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-13/japan-animation-tv-ranking-february-1-7",
      "title": "Japan's Animation TV Ranking, February 1-7"
    },
    {
      "datetime": "2010-02-18T03:16:26Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-17/crunchyroll-funimation-stream-shinkai-works-moeyo-ken",
      "title": "Crunchyroll, Funimation Stream Shinkai Works, <cite>Moeyo Ken</cite>"
    },
    {
      "datetime": "2010-02-19T00:32:31Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-18/one-piece-opening-anime-made-for-hey-spring-of-trivia",
      "title": "<cite>One Piece</cite> Opening Anime Made for <cite>Hey! Spring of Trivia</cite>"
    },
    {
      "datetime": "2010-02-22T22:02:25Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-22/seattle-sakura-con-to-premiere-trigun-film",
      "title": "Seattle's Sakura-Con Hosts <cite>Trigun</cite> Film Premiere, Staff"
    },
    {
      "datetime": "2010-02-26T04:48:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-25/funimation-streams-more-anime-online",
      "title": "Funimation Streams More Anime Online"
    },
    {
      "datetime": "2010-02-26T16:53:44Z",
      "href": "https://www.animenewsnetwork.com/news/2010-02-26/k-on-wins-dvd-of-the-year-gold-disc-of-the-year-awards",
      "title": "<cite>K-On!</cite> Wins DVD of the Year, Gold Disc of the Year Awards"
    },
    {
      "datetime": "2010-03-02T02:02:37Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-01/japan-animation-tv-ranking-february-8-14",
      "title": "Japan's Animation TV Ranking, February 8-14"
    },
    {
      "datetime": "2010-03-04T12:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-04/shattered-angels-gunslinger-girl-ova-more-streamed",
      "title": "<cite>Shattered Angels, Gunslinger Girl</cite> OVA, More Streamed"
    },
    {
      "datetime": "2010-03-05T01:50:27Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-04/japan-animation-tv-ranking-february-15-21",
      "title": "Japan's Animation TV Ranking, February 15-21"
    },
    {
      "datetime": "2010-03-05T09:45:49Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-05/avex-entertainment-establishes-anime-division",
      "title": "Avex Entertainment Establishes Anime Division"
    },
    {
      "datetime": "2010-03-08T18:07:58Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-08/japan-animation-tv-ranking-february-22-28",
      "title": "Japan's Animation TV Ranking, February 22-28"
    },
    {
      "datetime": "2010-03-10T02:19:13Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-09/japan-animation-dvd-ranking-march-1-7",
      "title": "Japan's Animation DVD Ranking, March 1-7"
    },
    {
      "datetime": "2010-03-10T04:53:51Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-09/funimation-streams-vampire-bund-baka-and-test-009-1-last-exile",
      "title": "Funimation Streams <cite>Vampire Bund, Baka & Test, 009-1, Last Exile</cite>"
    },
    {
      "datetime": "2010-03-11T11:14:50Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-11/prefecture-considers-building-one-piece-ship-in-park",
      "title": "Prefecture Considers Building <cite>One Piece</cite> Ship in Park"
    },
    {
      "datetime": "2010-03-15T19:18:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-15/japan-animation-tv-ranking-march-1-7",
      "title": "Japan's Animation TV Ranking, March 1-7"
    },
    {
      "datetime": "2010-03-18T03:58:50Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-17/4kids-reports-us$21-million-loss-in-4th-quarter",
      "title": "4Kids Reports US$21 Million Loss in 4th Quarter"
    },
    {
      "datetime": "2010-03-23T15:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-23/funimation-streams-initial-d/fourth-stage-nerima-daikon-brothers",
      "title": "Funimation Streams <cite>Initial D: Fourth Stage</cite>, <cite>Nerima Daikon Brothers</cite>"
    },
    {
      "datetime": "2010-03-22T22:15:45Z",
      "href": "https://www.animenewsnetwork.com/news/2010-03-22/one-piece-memorial-best-album-tops-weekly-sales-chart",
      "title": "<cite>One Piece Memorial Best</cite> Album Tops Weekly Sales Chart"
    },
    {
      "datetime": "2010-04-10T15:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-10/4kids-streams-sonic-x-funimation-streams-slayers-e-r",
      "title": "4Kids Streams <cite>Sonic X</cite>, Funimation Streams <cite>Slayers E-R</cite>"
    },
    {
      "datetime": "2010-04-12T09:05:46Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-12/japan-animation-tv-ranking-march-8-14",
      "title": "Japan's Animation TV Ranking, March 8-14"
    },
    {
      "datetime": "2010-04-13T18:07:07Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-13/japan-animation-tv-ranking-march-15-21",
      "title": "Japan's Animation TV Ranking, March 15-21"
    },
    {
      "datetime": "2010-04-14T02:52:13Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-13/japan-animation-dvd-ranking-march-29-april-4",
      "title": "Japan's Animation DVD Ranking, April 5-11"
    },
    {
      "datetime": "2010-04-14T13:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-14/one-piece-anime-sets-record-tv-rating-of-13.8-percent",
      "title": "<cite>One Piece</cite> Anime Sets Record TV Rating of 13.8%"
    },
    {
      "datetime": "2010-04-20T16:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-20/japan-animation-tv-ranking-march-22-28",
      "title": "Japan's Animation TV Ranking, March 22-28"
    },
    {
      "datetime": "2010-04-21T03:15:20Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-20/media-blasters-streams-rayearth-funi-posts-sengoku-basara",
      "title": "Media Blasters Streams <cite>Rayearth</cite>, Funi Posts <cite>Sengoku Basara</cite>"
    },
    {
      "datetime": "2010-04-30T03:49:20Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-29/dubbed-witchblade-and-x-new-subbed-hikaru-no-go-posted",
      "title": "Dubbed <cite>Witchblade</cite> & <cite>X</cite>, New Subbed <cite>Hikaru no Go</cite> Posted"
    },
    {
      "datetime": "2010-04-26T21:50:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-04-26/japan-animation-tv-ranking-march-29-april-4",
      "title": "Japan's Animation TV Ranking, March 29-April 4"
    },
    {
      "datetime": "2010-05-04T03:38:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-03/japan-animation-tv-ranking-april-5-11",
      "title": "Japan's Animation TV Ranking, April 5-11"
    },
    {
      "datetime": "2010-05-09T01:47:23Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-08/vampire-knight-fmp-petite-cossette-gundam-w-streamed",
      "title": "<cite>Vampire Knight, FMP!, Petite Cossette, Gundam W</cite> Streamed"
    },
    {
      "datetime": "2010-05-04T17:35:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-04/japan-animation-tv-ranking-april-12-18",
      "title": "Japan's Animation TV Ranking, April 12-18"
    },
    {
      "datetime": "2010-05-06T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-05/10th-one-piece-film-summer-wars-to-compete-at-annecy",
      "title": "10th <cite>One Piece</cite> Film, <cite>Summer Wars</cite> to Compete at Annecy"
    },
    {
      "datetime": "2010-05-10T01:19:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-09/japan-animation-tv-ranking-april-19-25",
      "title": "Japan's Animation TV Ranking, April 19-25"
    },
    {
      "datetime": "2010-05-10T16:30:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-10/4kids-reports-3rd-party-is-interested-in-acquiring-it",
      "title": "4Kids Reports 3rd Party is Interested in Acquiring It"
    },
    {
      "datetime": "2010-05-11T15:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-11/4kids-reports-us$3.5-million-loss-in-1st-quarter-2010",
      "title": "4Kids Reports US$3.5-Million Loss in 1st Quarter 2010"
    },
    {
      "datetime": "2010-05-12T02:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-11/japan-animation-dvd-ranking-may-3-9",
      "title": "Japan's Animation DVD Ranking, May 3-9"
    },
    {
      "datetime": "2010-05-16T02:55:36Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-15/japan-animation-tv-ranking-april-26-may-2",
      "title": "Japan's Animation TV Ranking, April 26-May 2"
    },
    {
      "datetime": "2010-05-17T10:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-17/japan-animation-tv-ranking-may-3-9",
      "title": "Japan's Animation TV Ranking, May 3-9"
    },
    {
      "datetime": "2010-05-23T13:48:40Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-23/japan-animation-tv-ranking-may-10-16",
      "title": "Japan's Animation TV Ranking, May 10-16"
    },
    {
      "datetime": "2010-05-28T03:53:25Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-27/legends-of-the-dark-king-negima-streamed",
      "title": "<cite>Legends of the Dark King</cite>, <cite>Negima</cite> Streamed"
    },
    {
      "datetime": "2010-05-31T08:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-05-31/one-piece-schick-collaborate-on-shaving-promo-campaign",
      "title": "<cite>One Piece</cite>, Schick Collaborate on Shaving Promo Campaign"
    },
    {
      "datetime": "2010-06-05T08:34:57Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-06/hidamari-sketch-sacred-blacksmith-negima-streamed",
      "title": "<cite>Hidamari Sketch, Sacred Blacksmith, Negima!</cite> Streamed"
    },
    {
      "datetime": "2010-06-06T20:49:55Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-07/weekend-wrapup/30/5",
      "title": "Weekend Wrapup: 30/5 - 5/6"
    },
    {
      "datetime": "2010-06-06T17:20:29Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-06/japan-animation-tv-ranking-may-17-23",
      "title": "Japan's Animation TV Ranking, May 17-23"
    },
    {
      "datetime": "2010-06-07T12:08:13Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-07/one-piece-film-strong-world-bd/dvd-to-add-new-scenes",
      "title": "<cite>One Piece Film Strong World</cite> BD/DVD to Add New Scenes"
    },
    {
      "datetime": "2010-06-08T05:12:17Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-08/viz-anime-to-stream-bleach-very-very-soon",
      "title": "Viz Anime to Stream <cite>Bleach</cite> 'Very, Very Soon'"
    },
    {
      "datetime": "2010-06-13T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-12/japan-animation-tv-ranking-may-24-30",
      "title": "Japan's Animation TV Ranking, May 24-30"
    },
    {
      "datetime": "2010-06-17T15:29:58Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-17/one-piece-pirate-jeans-for-sale-in-japan",
      "title": "<cite>One Piece</cite> Pirate Jeans for Sale in Japan"
    },
    {
      "datetime": "2010-06-22T03:48:05Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-21/samurai-harem-kaze-no-stigma-area-88-streamed",
      "title": "<cite>Samurai Harem, Kaze no Stigma, Area 88</cite> Streamed"
    },
    {
      "datetime": "2010-06-21T22:45:49Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-21/japan-animation-tv-ranking-may-31-june-6",
      "title": "Japan's Animation TV Ranking, May 31-June 6"
    },
    {
      "datetime": "2010-06-27T05:59:16Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-27/madman-entertainment-announces-new-acquisitions-at-perth-supanova",
      "title": "Madman Entertainment Announces New Acquisitions at Perth Supanova"
    },
    {
      "datetime": "2010-06-28T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-06-27/japan-animation-tv-ranking-june-7-13",
      "title": "Japan's Animation TV Ranking, June 7-13"
    },
    {
      "datetime": "2010-07-05T18:24:25Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-05/strawberry-100-percent-streaming-via-viz-anime-hulu",
      "title": "<cite>Strawberry 100%</cite> Streaming via Viz Anime, Hulu"
    },
    {
      "datetime": "2010-07-06T15:36:34Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-06/japan-animation-tv-ranking-june-14-20",
      "title": "Japan's Animation TV Ranking, June 14-20"
    },
    {
      "datetime": "2010-07-11T03:45:25Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-10/japan-animation-tv-ranking-june-21-27",
      "title": "Japan's Animation TV Ranking, June 21-27"
    },
    {
      "datetime": "2010-07-12T08:13:21Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-12/voice-actor-norio-inamura-arrested-for-indecent-pictures",
      "title": "Voice Actor Norio Imamura Arrested for Indecent Pictures"
    },
    {
      "datetime": "2010-07-17T10:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-17/golgo-13-black-butler-ii-captain-tylor-streamed",
      "title": "<cite>Golgo 13</cite>, <cite>Black Butler II, Captain Tylor</cite> Streamed"
    },
    {
      "datetime": "2010-07-14T02:48:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-13/japan-animation-dvd-ranking-july-5-11",
      "title": "Japan's Animation DVD Ranking, July 5-11"
    },
    {
      "datetime": "2010-07-19T02:20:21Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-18/japan-animation-tv-ranking-july-5-11",
      "title": "Japan's Animation TV Ranking, July 5-11"
    },
    {
      "datetime": "2010-07-28T02:45:45Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-27/japan-animation-dvd-ranking-july-12-18",
      "title": "Japan's Animation DVD Ranking, July 12-18"
    },
    {
      "datetime": "2010-07-28T13:11:49Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-28/japan-animation-tv-ranking-july-12-18",
      "title": "Japan's Animation TV Ranking, July 12-18"
    },
    {
      "datetime": "2010-07-30T04:34:57Z",
      "href": "https://www.animenewsnetwork.com/news/2010-07-30/top-anime-movies-at-japanese-box-office-1st-half-of-2010",
      "title": "Top Anime Movies at Japanese Box Office, 1st Half of 2010"
    },
    {
      "datetime": "2010-08-04T02:23:05Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-03/japan-animation-dvd-ranking-july-19-25",
      "title": "Japan's Animation DVD Ranking, July 26-August 1"
    },
    {
      "datetime": "2010-08-11T02:46:09Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-10/japan-animation-dvd-ranking-august-2-8",
      "title": "Japan's Animation DVD Ranking, August 2-8"
    },
    {
      "datetime": "2010-08-16T17:14:20Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-16/japan-animation-tv-ranking-july-26-august-1",
      "title": "Japan's Animation TV Ranking, July 26-August 1"
    },
    {
      "datetime": "2010-08-18T02:19:56Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-17/japan-animation-dvd-ranking-august-9-15",
      "title": "Japan's Animation DVD Ranking, August 9-15"
    },
    {
      "datetime": "2010-08-23T03:04:20Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-22/japan-animation-tv-ranking-august-2-8",
      "title": "Japan's Animation TV Ranking, August 2-8"
    },
    {
      "datetime": "2010-08-25T13:22:28Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-25/japan-animation-dvd-ranking-august-16-22",
      "title": "Japan's Animation DVD Ranking, August 16-22"
    },
    {
      "datetime": "2010-08-31T05:19:47Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-31/one-piece-dvd/bds-earn-2.16-billion-yen-in-1-week",
      "title": "<cite>One Piece</cite> DVD/BDs Earn 2.16 Billion Yen in 1 Week"
    },
    {
      "datetime": "2010-09-01T02:46:31Z",
      "href": "https://www.animenewsnetwork.com/news/2010-08-31/japan-animation-dvd-ranking-august-23-29",
      "title": "Japan's Animation DVD Ranking, August 23-29"
    },
    {
      "datetime": "2010-09-05T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-04/japan-animation-blu-ray-disc-ranking-august-23-29",
      "title": "Japan's Animation Blu-ray Disc Ranking, August 23-29"
    },
    {
      "datetime": "2010-09-05T22:49:48Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-05/japan-animation-tv-ranking-august-16-22",
      "title": "Japan's Animation TV Ranking, August 16-22"
    },
    {
      "datetime": "2010-09-06T23:35:31Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-06/japan-animation-tv-ranking-august-23-29",
      "title": "Japan's Animation TV Ranking, August 23-29"
    },
    {
      "datetime": "2010-09-07T19:56:54Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-07/10th-one-piece-film-tops-dvd/bd-charts-for-2nd-week",
      "title": "10th <cite>One Piece</cite> Film Tops DVD/BD Charts for 2nd Week"
    },
    {
      "datetime": "2010-09-08T14:00:21Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-08/japan-animation-dvd-ranking-august-30-september-5",
      "title": "Japan's Animation DVD Ranking, August 30-September 5"
    },
    {
      "datetime": "2010-09-13T00:44:17Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-12/japan-animation-tv-ranking-august-30-september-5",
      "title": "Japan's Animation TV Ranking, August 30-September 5"
    },
    {
      "datetime": "2010-09-13T07:22:33Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-13/voice-actor-norio-imamura-fined-500000-yen-for-indecent-pics",
      "title": "Voice Actor Norio Imamura Fined 500,000 Yen for Indecent Pics"
    },
    {
      "datetime": "2010-09-14T08:27:59Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-14/japan-animation-dvd-ranking-september-6-12-part-1",
      "title": "Japan's Animation DVD Ranking, September 6-12 (Part 1)"
    },
    {
      "datetime": "2010-09-14T00:58:02Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-14/one-piece-anime-franchise-sells-1-million+dvd/bds",
      "title": "<cite>One Piece</cite> Anime Franchise Sells 1 Million+ DVD/BDs"
    },
    {
      "datetime": "2010-09-15T02:32:46Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-14/japan-animation-dvd-ranking-september-6-12-part-2",
      "title": "Japan's Animation DVD Ranking, September 6-12 (Part 2)"
    },
    {
      "datetime": "2010-09-19T21:58:16Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-19/japan-animation-tv-ranking-september-6-12",
      "title": "Japan's Animation TV Ranking, September 6-12"
    },
    {
      "datetime": "2010-09-21T08:24:58Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-21/japan-animation-dvd-ranking-september-13-19-part-1",
      "title": "Japan's Animation DVD Ranking, September 13-19 (Part 1)"
    },
    {
      "datetime": "2010-09-22T02:31:19Z",
      "href": "https://www.animenewsnetwork.com/news/2010-09-21/japan-animation-dvd-ranking-september-13-19-part-2",
      "title": "Japan's Animation DVD Ranking, September 13-19 (Part 2)"
    },
    {
      "datetime": "2010-10-07T19:56:51Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-07/japan-animation-tv-ranking-september-13-19",
      "title": "Japan's Animation TV Ranking, September 13-19"
    },
    {
      "datetime": "2010-10-12T08:48:36Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-12/japan-animation-dvd-ranking-october-4-10-part-1",
      "title": "Japan's Animation DVD Ranking, October 4-10 (Part 1)"
    },
    {
      "datetime": "2010-10-13T02:44:22Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-12/japan-animation-dvd-ranking-october-4-10-part-2",
      "title": "Japan's Animation DVD Ranking, October 4-10 (Part 2)"
    },
    {
      "datetime": "2010-10-14T23:07:08Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-14/media-blasters-launches-anime-dvd/blu-ray-kiosks",
      "title": "Media Blasters Launches Anime DVD/Blu-ray Kiosks"
    },
    {
      "datetime": "2010-10-16T20:38:14Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-16/japan-animation-tv-ranking-september-20-26",
      "title": "Japan's Animation TV Ranking, September 20-26"
    },
    {
      "datetime": "2010-11-10T18:55:57Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-10/gintama-film-mardock-scramble-premiere-at-uk-leeds",
      "title": "<cite>Gintama</cite> Film, <cite>Mardock Scramble</cite> Premiere at UK's Leeds"
    },
    {
      "datetime": "2010-10-20T03:50:28Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-19/japan-animation-dvd-ranking-october-11-17-part-2",
      "title": "Japan's Animation DVD Ranking, October 11-17 (Part 2)"
    },
    {
      "datetime": "2010-10-23T18:05:09Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-23/japan-animation-tv-ranking-september-27-october-3",
      "title": "Japan's Animation TV Ranking, September 27-October 3"
    },
    {
      "datetime": "2010-10-24T04:04:59Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-24/japan-animation-blu-ray-disc-ranking-october-11-17",
      "title": "Japan's Animation Blu-ray Disc Ranking, October 11-17"
    },
    {
      "datetime": "2010-10-25T19:55:54Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-25/one-piece-soremachi-oreimo-zakuro-singles-in-top-10",
      "title": "<cite>One Piece, SoreMachi, Oreimo, Zakuro</cite> Singles in Top 10"
    },
    {
      "datetime": "2010-10-26T20:15:39Z",
      "href": "https://www.animenewsnetwork.com/news/2010-10-26/north-american-anime-manga-releases-october-24-30",
      "title": "North American Anime, Manga Releases October 24-30"
    },
    {
      "datetime": "2010-11-02T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-01/japan-animation-tv-ranking-october-4-10",
      "title": "Japan's Animation TV Ranking, October 4-10"
    },
    {
      "datetime": "2010-11-06T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-05/japan-animation-tv-ranking-october-11-17",
      "title": "Japan's Animation TV Ranking, October 11-17"
    },
    {
      "datetime": "2010-11-08T05:16:26Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-08/japan-animation-tv-ranking-october-18-24",
      "title": "Japan's Animation TV Ranking, October 18-24"
    },
    {
      "datetime": "2010-11-09T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-08/japan-animation-tv-ranking-october-25-31",
      "title": "Japan's Animation TV Ranking, October 25-31"
    },
    {
      "datetime": "2010-11-09T09:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-09/japan-animation-dvd-ranking-november-1-7-part-1",
      "title": "Japan's Animation DVD Ranking, November 1-7 (Part 1)"
    },
    {
      "datetime": "2010-11-10T02:52:25Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-09/japan-animation-dvd-ranking-november-1-7-part-2",
      "title": "Japan's Animation DVD Ranking, November 1-7 (Part 2)"
    },
    {
      "datetime": "2010-11-10T22:33:13Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-10/japanese-comic-ranking-november-1-7",
      "title": "Japanese Comic Ranking, November 1-7"
    },
    {
      "datetime": "2010-11-13T20:40:05Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-13/go-lion-ultra-maniac-oreimo-togainu-streamed",
      "title": "<cite>Go Lion, Ultra Maniac, Oreimo, Togainu</cite> Streamed"
    },
    {
      "datetime": "2010-11-15T04:22:57Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-14/japan-animation-tv-ranking-november-1-7",
      "title": "Japan's Animation TV Ranking, November 1-7"
    },
    {
      "datetime": "2010-12-03T04:55:23Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-02/lucky-star-spice-and-wolf-ii-uta-kata-streamed",
      "title": "<cite>Lucky Star</cite>, <cite>Spice and Wolf II</cite>, <cite>Uta\u223dKata</cite> Streamed"
    },
    {
      "datetime": "2010-11-21T04:59:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-20/japan-animation-tv-ranking-november-8-14",
      "title": "Japan's Animation TV Ranking, November 8-14"
    },
    {
      "datetime": "2010-11-28T04:59:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-11-27/japan-animation-tv-ranking-november-15-21",
      "title": "Japan's Animation TV Ranking, November 15-21"
    },
    {
      "datetime": "2010-12-17T18:07:44Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-17/nyan-koi-h20-ninomiya-kun-air-movie-beck-streamed",
      "title": "<cite>Nyan Koi!, H20, Ninomiya-kun, Air Movie, Beck</cite> Streamed"
    },
    {
      "datetime": "2010-12-12T17:36:13Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-12/japan-animation-tv-ranking-november-29-december-5",
      "title": "Japan's Animation TV Ranking, November 29-December 5"
    },
    {
      "datetime": "2010-12-20T02:13:34Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-19/top-selling-animation-dvds-in-japan/2010",
      "title": "Top-Selling Animation DVDs in Japan: 2010"
    },
    {
      "datetime": "2010-12-21T03:27:12Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-20/japan-animation-tv-ranking-december-6-12",
      "title": "Japan's Animation TV Ranking, December 6-12"
    },
    {
      "datetime": "2010-12-22T20:53:35Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-22/top-selling-animation-blu-ray-discs-in-japan/2010-part-1",
      "title": "Top-Selling Animation Blu-ray Discs in Japan: 2010 (Part 1, Updated)"
    },
    {
      "datetime": "2010-12-23T21:22:27Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-23/top-selling-cd-singles-by-new-artists-in-japan/2010",
      "title": "Top-Selling CD Singles by New Artists in Japan: 2010"
    },
    {
      "datetime": "2010-12-27T13:54:20Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-27/hell-girl-3-seitokai-no-ichizon-regios-streamed",
      "title": "<cite>Hell Girl 3, Seitokai no Ichizon, Regios</cite> Streamed"
    },
    {
      "datetime": "2010-12-24T18:36:14Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-24/top-anime-movies-at-japanese-box-office/2010",
      "title": "Top Anime Movies at Japanese Box Office: 2010"
    },
    {
      "datetime": "2010-12-27T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-26/japan-animation-tv-ranking-december-13-19",
      "title": "Japan's Animation TV Ranking, December 13-19"
    },
    {
      "datetime": "2010-12-28T08:26:32Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-28/japan-animation-dvd-ranking-december-20-26-part-1",
      "title": "Japan's Animation DVD Ranking, December 20-26 (Part 1)"
    },
    {
      "datetime": "2010-12-31T04:36:11Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-30/funimation-delays-chobits-and-dbz-boxes-one-piece-disc",
      "title": "Funimation Delays <cite>Chobits</cite> & <cite>DBZ</cite> Boxes, <cite>One Piece</cite> Disc"
    },
    {
      "datetime": "2010-12-29T02:41:11Z",
      "href": "https://www.animenewsnetwork.com/news/2010-12-28/japan-animation-dvd-ranking-december-20-26-part-2",
      "title": "Japan's Animation DVD Ranking, December 20-26 (Part 2)"
    },
    {
      "datetime": "2011-02-12T04:08:20Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-11/strike-witches-2-hero-tales-murder-princess-streamed",
      "title": "<cite>Strike Witches 2, Hero Tales, Murder Princess</cite> Streamed"
    },
    {
      "datetime": "2011-01-03T16:31:47Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-03/funimation-to-stream-dragon-ball-z-in-north-america",
      "title": "Funimation to Stream <cite>Dragon Ball Z</cite> in North America"
    },
    {
      "datetime": "2011-01-07T03:38:20Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-06/japan-animation-dvd-ranking-december-27-january-2-part-1",
      "title": "Japan's Animation DVD Ranking, December 27-January 2 (Part 1)"
    },
    {
      "datetime": "2011-01-07T13:13:09Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-07/japan-animation-dvd-ranking-december-27-january-2-part-2",
      "title": "Japan's Animation DVD Ranking, December 27-January 2 (Part 2)"
    },
    {
      "datetime": "2011-01-09T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-08/japan-animation-tv-ranking-december-20-26",
      "title": "Japan's Animation TV Ranking, December 20-26"
    },
    {
      "datetime": "2011-01-12T02:26:37Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-11/japan-animation-dvd-ranking-january-3-9-part-2",
      "title": "Japan's Animation DVD Ranking, January 3-9 (Part 2)"
    },
    {
      "datetime": "2011-01-14T04:17:28Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-13/funimation-to-stream-letterboxed-dragon-ball-z",
      "title": "Funimation to Stream Letterboxed <cite>Dragon Ball Z</cite>"
    },
    {
      "datetime": "2011-01-16T03:42:35Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-15/north-american-anime-manga-releases-for-february-2011",
      "title": "North American Anime, Manga Releases for February 2011"
    },
    {
      "datetime": "2011-01-18T04:45:08Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-17/japan-animation-tv-ranking-january-3-9",
      "title": "Japan's Animation TV Ranking, January 3-9"
    },
    {
      "datetime": "2011-01-24T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-23/japan-animation-tv-ranking-january-10-16",
      "title": "Japan's Animation TV Ranking, January 10-16"
    },
    {
      "datetime": "2011-01-25T16:55:34Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-25/funimation-sues-1337-bittorrent-users-over-one-piece",
      "title": "Funimation Sues 1,337 BitTorrent Users Over <cite>One Piece</cite>"
    },
    {
      "datetime": "2011-01-26T16:34:49Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-26/north-american-anime-manga-releases/january-23-29",
      "title": "North American Anime, Manga Releases: January 23-29"
    },
    {
      "datetime": "2011-01-26T02:49:41Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-25/japan-animation-dvd-ranking-january-17-23-part-2",
      "title": "Japan's Animation DVD Ranking, January 17-23 (Part 2)"
    },
    {
      "datetime": "2011-02-01T03:43:48Z",
      "href": "https://www.animenewsnetwork.com/news/2011-01-31/japan-animation-tv-ranking-january-17-23",
      "title": "Japan's Animation TV Ranking, January 17-23"
    },
    {
      "datetime": "2011-02-01T08:59:46Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-01/japan-animation-dvd-ranking-january-24-30-part-1",
      "title": "Japan's Animation DVD Ranking, January 24-30 (Part 1)"
    },
    {
      "datetime": "2011-02-02T11:07:54Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-02/japan-animation-dvd-ranking-january-24-30-part-2",
      "title": "Japan's Animation DVD Ranking, January 24-30 (Part 2)"
    },
    {
      "datetime": "2011-02-07T04:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-06/japan-animation-tv-ranking-january-24-30",
      "title": "Japan's Animation TV Ranking, January 24-30"
    },
    {
      "datetime": "2011-02-08T08:23:10Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-08/japan-animation-dvd-ranking-january-31-february-6-part-1",
      "title": "Japan's Animation DVD Ranking, January 31-February 6 (Part 1)"
    },
    {
      "datetime": "2011-02-10T04:41:22Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-09/funimation-storm-delayed-simulcasts-now-online",
      "title": "Funimation's Storm-Delayed Simulcasts Now Online"
    },
    {
      "datetime": "2011-02-09T14:30:23Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-09/japan-animation-dvd-ranking-january-31-february-6-part-2",
      "title": "Japan's Animation DVD Ranking, January 31-February 6 (Part 2)"
    },
    {
      "datetime": "2011-02-15T04:55:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-14/japan-animation-tv-ranking-january-31-february-6",
      "title": "Japan's Animation TV Ranking, January 31-February 6"
    },
    {
      "datetime": "2011-02-17T03:42:09Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-16/north-american-anime-manga-releases/february-13-19",
      "title": "North American Anime, Manga Releases: February 13-19 (Update 2)"
    },
    {
      "datetime": "2011-02-17T03:17:21Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-16/all-but-1-defendant-dropped-from-funimation-one-piece-lawsuit",
      "title": "All But 1 Defendant Dropped From Funimation's <cite>One Piece</cite> Lawsuit"
    },
    {
      "datetime": "2011-02-16T02:28:44Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-15/japan-animation-dvd-ranking-february-7-13-part-2",
      "title": "Japan's Animation DVD Ranking, February 7-13 (Part 2)"
    },
    {
      "datetime": "2011-02-22T04:36:23Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-21/japan-animation-tv-ranking-february-7-13",
      "title": "Japan's Animation TV Ranking, February 7-13"
    },
    {
      "datetime": "2011-02-25T01:19:46Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-24/north-carolina-animazement-hosts-hiroaki-hirata",
      "title": "North Carolina's Animazement Hosts Hiroaki Hirata"
    },
    {
      "datetime": "2011-02-25T22:21:40Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-25/stand-alone-complex-t-shirts-from-uniqlo",
      "title": "Stand Alone Complex T-Shirts from Uniqlo"
    },
    {
      "datetime": "2011-02-26T03:01:40Z",
      "href": "https://www.animenewsnetwork.com/news/2011-02-25/japan-animation-dvd-ranking-february-14-20-part-2",
      "title": "Japan's Animation DVD Ranking, February 14-20 (Part 2)"
    },
    {
      "datetime": "2011-03-02T03:23:29Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-01/japan-animation-tv-ranking-february-14-20",
      "title": "Japan's Animation TV Ranking, February 14-20"
    },
    {
      "datetime": "2011-03-02T09:45:43Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-02/toriko-one-piece-get-crossover-tv-anime-special",
      "title": "<cite>Toriko, One Piece</cite> Get Crossover TV Anime Special"
    },
    {
      "datetime": "2011-03-05T10:11:29Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-05/5th-annual-seiyu-award-winners-announced",
      "title": "5th Annual Seiy\u016b Award Winners Announced"
    },
    {
      "datetime": "2011-03-08T09:56:02Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-08/japan-animation-dvd-ranking-february-28-march-6-part-1",
      "title": "Japan's Animation DVD Ranking, February 28-March 6 (Part 1)"
    },
    {
      "datetime": "2011-03-09T15:06:17Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-09/japan-animation-dvd-ranking-february-28-march-6-part-2",
      "title": "Japan's Animation DVD Ranking, February 28-March 6 (Part 2)"
    },
    {
      "datetime": "2011-03-12T22:00:36Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-12/tonight-one-piece-simulcast-delayed",
      "title": "Tonight's One Piece Simulcast Delayed"
    },
    {
      "datetime": "2011-03-15T14:47:31Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-15/new-naruto-uniqlo-shirts-available",
      "title": "New <cite>Naruto</cite> Uniqlo Shirts Available"
    },
    {
      "datetime": "2011-03-16T03:45:16Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-15/japan-animation-dvd-ranking-march-7-13-part-2",
      "title": "Japan's Animation DVD Ranking, March 7-13 (Part 2)"
    },
    {
      "datetime": "2011-03-23T03:27:45Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-22/downloaded-sora-no-otoshimono-copy-shown-at-funimation-studio",
      "title": "Downloaded <cite>Sora no Otoshimono</cite> Copy Shown at Funimation Studio"
    },
    {
      "datetime": "2011-03-20T02:12:50Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-19/japan-animation-tv-ranking-february-28-march-6",
      "title": "Japan's Animation TV Ranking, February 28-March 6"
    },
    {
      "datetime": "2011-03-21T22:45:06Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-21/uniqlo-launches-one-piece-t-shirt-range",
      "title": "Uniqlo Launches <cite>One Piece</cite> T-Shirt Range"
    },
    {
      "datetime": "2011-03-24T20:13:50Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-24/funimation-dismisses-its-one-piece-bittorrent-lawsuit",
      "title": "Funimation Dismisses Its <cite>One Piece</cite> BitTorrent Lawsuit"
    },
    {
      "datetime": "2011-03-26T05:51:12Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-26/one-piece-unlimited-cruise-sp-3ds-game-delayed-after-quake",
      "title": "<cite>One Piece Unlimited Cruise SP</cite> 3DS Game Delayed After Quake"
    },
    {
      "datetime": "2011-03-27T16:52:35Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-28/weekend-wrapup/20/3-26/3",
      "title": "Weekend Wrapup: 20/3 - 26/3"
    },
    {
      "datetime": "2011-03-28T17:51:42Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-28/japanese-box-office-march-19-20",
      "title": "Japanese Box Office, March 19-20"
    },
    {
      "datetime": "2011-03-29T02:56:56Z",
      "href": "https://www.animenewsnetwork.com/news/2011-03-28/japan-animation-tv-ranking-march-14-20",
      "title": "Japan's Animation TV Ranking, March 14-20"
    },
    {
      "datetime": "2011-04-08T02:36:32Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-07/japan-animation-tv-ranking-march-21-27",
      "title": "Japan's Animation TV Ranking, March 21-27"
    },
    {
      "datetime": "2011-04-11T16:38:52Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-12/madman-entertainment-simulcasting-blue-exorcist-new-films-acquired",
      "title": "Madman Entertainment Simulcasting Blue Exorcist; New Films Acquired"
    },
    {
      "datetime": "2011-04-13T13:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-13/japan-animation-dvd-ranking-april-4-10-part-2",
      "title": "Japan's Animation DVD Ranking, April 4-10 (Part 2)"
    },
    {
      "datetime": "2011-04-15T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-14/japan-animation-tv-ranking-march-28-april-3",
      "title": "Japan's Animation TV Ranking, March 28-April 3"
    },
    {
      "datetime": "2011-04-16T10:29:32Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-16/michael-sinterniklaas-guest-at-ayacon",
      "title": "Michael Sinterniklaas Guest at Ayacon"
    },
    {
      "datetime": "2011-04-18T18:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-18/animazement-hosts-satoshi-kon-widow-and-madhouse-head",
      "title": "Animazement Hosts Satoshi Kon's Widow & Madhouse Head"
    },
    {
      "datetime": "2011-04-19T02:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-18/japanese-box-office-april-9-10",
      "title": "Japanese Box Office, April 9-10"
    },
    {
      "datetime": "2011-04-21T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-20/north-american-anime-manga-releases/april-17-23",
      "title": "North American Anime, Manga Releases: April 17-23"
    },
    {
      "datetime": "2011-04-20T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-19/japan-animation-tv-ranking-april-4-10",
      "title": "Japan's Animation TV Ranking, April 4-10"
    },
    {
      "datetime": "2011-04-28T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-27/lawyer/some-one-piece-downloaders-settle-out-of-court",
      "title": "Lawyer: Some <cite>One Piece</cite> Downloaders Settle Out of Court"
    },
    {
      "datetime": "2011-04-29T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-04-28/japan-animation-tv-ranking-april-11-17",
      "title": "Japan's Animation TV Ranking, April 11-17"
    },
    {
      "datetime": "2011-05-02T23:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-02/japan-animation-tv-ranking-april-18-24",
      "title": "Japan's Animation TV Ranking, April 18-24"
    },
    {
      "datetime": "2011-05-03T21:09:10Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-03/ash-dub-actress-attending-nom-con",
      "title": "Ash Dub Actress Attending Nom-Con"
    },
    {
      "datetime": "2011-05-15T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-14/japan-animation-tv-ranking-april-25-may-1",
      "title": "Japan's Animation TV Ranking, April 25-May 1"
    },
    {
      "datetime": "2011-05-17T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-16/japan-animation-tv-ranking-may-2-8",
      "title": "Japan's Animation TV Ranking, May 2-8"
    },
    {
      "datetime": "2011-05-17T10:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-17/japan-animation-dvd-ranking-may-9-15-part-1",
      "title": "Japan's Animation DVD Ranking, May 9-15 (Part 1)"
    },
    {
      "datetime": "2011-05-19T16:10:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-20/australian-new-releases-13/5-19/5",
      "title": "Australian New Releases 13/5 - 19/5"
    },
    {
      "datetime": "2011-05-20T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-19/japan-animation-dvd-ranking-may-9-15-part-2",
      "title": "Japan's Animation DVD Ranking, May 9-15 (Part 2)"
    },
    {
      "datetime": "2011-05-24T21:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-24/japan-animation-tv-ranking-may-9-15",
      "title": "Japan's Animation TV Ranking, May 9-15"
    },
    {
      "datetime": "2011-05-31T16:09:26Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-01/australian-new-releases-may-2011",
      "title": "Australian New Releases - May 2011"
    },
    {
      "datetime": "2011-06-01T03:45:04Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-31/funimation-streams-202-dubbed-episodes-of-one-piece",
      "title": "Funimation Streams 202 Dubbed Episodes of <cite>One Piece</cite>"
    },
    {
      "datetime": "2011-06-01T03:39:19Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-31/funimation-sues-1427-john-does-over-ip-man",
      "title": "Funimation Sues 1,427 John Does Over <cite>Ip Man</cite>"
    },
    {
      "datetime": "2011-06-01T03:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-05-31/top-selling-manga-in-japan-by-series/2011-first-half",
      "title": "Top-Selling Manga in Japan by Series: 2011 (First Half)"
    },
    {
      "datetime": "2011-06-05T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-05/japan-animation-tv-ranking-may-23-29",
      "title": "Japan's Animation TV Ranking, May 23-29"
    },
    {
      "datetime": "2011-06-07T03:55:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-06/latest-funimation-titles-on-demand",
      "title": "Latest Funimation Titles On Demand"
    },
    {
      "datetime": "2011-06-08T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-07/japan-animation-dvd-ranking-may-30-june-5",
      "title": "Japan's Animation DVD Ranking, May 30-June 5"
    },
    {
      "datetime": "2011-06-13T02:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-12/japan-animation-tv-ranking-may-30-june-5",
      "title": "Japan's Animation TV Ranking, May 30-June 5"
    },
    {
      "datetime": "2011-06-16T14:06:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-17/supanova-sydney-this-weekend",
      "title": "Supanova Sydney This Weekend"
    },
    {
      "datetime": "2011-06-26T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-25/toei-animaton/overseas-licensing-income-jumps-66-percent",
      "title": "Toei Animaton: Overseas Licensing Income Jumps 66%"
    },
    {
      "datetime": "2011-06-18T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-17/north-american-stream-list/june-10-17",
      "title": "North American Stream List: June 10-17"
    },
    {
      "datetime": "2011-06-19T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-18/japan-animation-tv-ranking-june-6-12",
      "title": "Japan's Animation TV Ranking, June 6-12"
    },
    {
      "datetime": "2011-06-22T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-22/top-selling-dvds-in-japan/2011-first-half",
      "title": "Top-Selling DVDs in Japan: 2011 (First Half)"
    },
    {
      "datetime": "2011-06-27T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-26/japan-animation-tv-ranking-june-13-19",
      "title": "Japan's Animation TV Ranking, June 13-19"
    },
    {
      "datetime": "2011-06-28T18:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-06-28/japan-animation-dvd-ranking-june-20-26",
      "title": "Japan's Animation DVD Ranking, June 20-26"
    },
    {
      "datetime": "2011-07-01T06:57:54Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-01/australian-new-releases-june-2011",
      "title": "Australian New Releases - June 2011"
    },
    {
      "datetime": "2011-07-06T14:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-06/north-american-stream-list/june-25-july-4",
      "title": "North American Stream List: June 25\u2013July 4"
    },
    {
      "datetime": "2011-07-05T13:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-05/japan-animation-dvd-ranking-june-27-july-3",
      "title": "Japan's Animation DVD Ranking, June 27-July 3"
    },
    {
      "datetime": "2011-07-08T02:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-07/japan-animation-tv-ranking-june-20-26",
      "title": "Japan's Animation TV Ranking, June 20-26"
    },
    {
      "datetime": "2011-07-10T02:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-09/north-american-stream-list/july-4-8",
      "title": "North American Stream List: July 4\u20138"
    },
    {
      "datetime": "2011-07-11T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-10/japan-animation-tv-ranking-june-27-july-3",
      "title": "Japan's Animation TV Ranking, June 27-July 3"
    },
    {
      "datetime": "2011-07-12T11:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-12/japan-animation-dvd-ranking-july-4-10",
      "title": "Japan's Animation DVD Ranking, July 4-10"
    },
    {
      "datetime": "2011-07-17T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-16/japan-animation-tv-ranking-july-4-10",
      "title": "Japan's Animation TV Ranking, July 4-10"
    },
    {
      "datetime": "2011-07-19T09:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-19/japan-animation-dvd-ranking-july-11-17",
      "title": "Japan's Animation DVD Ranking, July 11-17"
    },
    {
      "datetime": "2011-07-25T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-24/north-american-stream-list/july-16-22",
      "title": "North American Stream List: July 16-24"
    },
    {
      "datetime": "2011-07-26T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-26/japan-animation-dvd-ranking-july-18-24",
      "title": "Japan's Animation DVD Ranking, July 18-24"
    },
    {
      "datetime": "2011-07-29T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-07-28/japan-animation-tv-ranking-july-11-17",
      "title": "Japan's Animation TV Ranking, July 11-17"
    },
    {
      "datetime": "2011-08-04T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-03/north-american-anime-manga-releases/july-24-30",
      "title": "North American Anime, Manga Releases: July 24-30"
    },
    {
      "datetime": "2011-08-09T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-08/japan-animation-tv-ranking-july-15-31",
      "title": "Japan's Animation TV Ranking, July 15-31"
    },
    {
      "datetime": "2011-08-16T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-15/japan-animation-tv-ranking-august-1-7",
      "title": "Japan's Animation TV Ranking, August 1-7"
    },
    {
      "datetime": "2011-08-25T01:27:16Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-25/australian-new-releases-july-and-august-2011",
      "title": "Australian New Releases - July and August 2011"
    },
    {
      "datetime": "2011-08-19T17:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-19/one-piece-anime-enters-new-world-arc-on-october-2",
      "title": "<cite>One Piece</cite> Anime to Enter New World Arc on October 2"
    },
    {
      "datetime": "2011-08-21T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-21/japan-animation-tv-ranking-august-8-14",
      "title": "Japan's Animation TV Ranking, August 8-14"
    },
    {
      "datetime": "2011-08-23T14:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-23/japan-animation-dvd-ranking-august-15-21",
      "title": "Japan's Animation DVD Ranking, August 15-21"
    },
    {
      "datetime": "2011-08-29T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-08-28/japan-animation-tv-ranking-august-15-21",
      "title": "Japan's Animation TV Ranking, August 15-21"
    },
    {
      "datetime": "2011-09-06T09:30:25Z",
      "href": "https://www.animenewsnetwork.com/news/2011-09-06/japan-animation-dvd-ranking-august-29-september-4",
      "title": "Japan's Animation DVD Ranking, August 29-September 4"
    },
    {
      "datetime": "2011-09-19T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-09-18/japan-animation-tv-ranking-august-29-september-4",
      "title": "Japan's Animation TV Ranking, August 29-September 4"
    },
    {
      "datetime": "2011-09-20T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-09-19/japan-animation-tv-ranking-september-5-11",
      "title": "Japan's Animation TV Ranking, September 5-11"
    },
    {
      "datetime": "2011-09-27T14:40:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-09-27/japan-animation-dvd-ranking-september-19-25",
      "title": "Japan's Animation DVD Ranking, September 19-25"
    },
    {
      "datetime": "2011-09-28T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-09-28/north-american-anime-manga-releases-sept-25-oct-1",
      "title": "North American Anime, Manga Releases, Sept. 25-Oct. 1"
    },
    {
      "datetime": "2011-10-05T01:58:41Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-05/australian-new-releases-october-2011",
      "title": "Australian New Releases - September 2011"
    },
    {
      "datetime": "2011-10-09T21:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-09/north-american-stream-list/october-3-9",
      "title": "North American Stream List: October 3-9"
    },
    {
      "datetime": "2011-10-11T03:57:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-10/japan-animation-tv-ranking-september-19-25",
      "title": "Japan's Animation TV Ranking, September 19-25"
    },
    {
      "datetime": "2011-10-11T10:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-11/japan-animation-dvd-ranking-october-3-9",
      "title": "Japan's Animation DVD Ranking, October 3-9"
    },
    {
      "datetime": "2011-10-13T23:46:37Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-13/kami-voice-film-to-have-anime-sequence-by-production-i.g",
      "title": "<cite>Kami Voice</cite> Film to Have Anime Sequence by Production I.G"
    },
    {
      "datetime": "2011-10-14T03:56:52Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-13/japan-animation-tv-ranking-september-26-october-4",
      "title": "Japan's Animation TV Ranking, September 26-October 4"
    },
    {
      "datetime": "2011-10-16T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-16/north-american-stream-list/october-10-16",
      "title": "North American Stream List: October 10-16"
    },
    {
      "datetime": "2011-10-18T03:48:04Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-17/6-arrested-in-japan-for-uploading-one-piece-manga-anime-games",
      "title": "6 Arrested in Japan for Uploading <cite>One Piece</cite> Manga, Anime, Games"
    },
    {
      "datetime": "2011-10-23T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-23/north-american-stream-list/october-17-23",
      "title": "North American Stream List: October 17-23"
    },
    {
      "datetime": "2011-10-25T03:44:26Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-24/funimation-niconico-start-maken-ki-c3-future-diary-streams",
      "title": "Funimation, NicoNico Start <cite>Maken-Ki, C3, Future Diary</cite> Streams"
    },
    {
      "datetime": "2011-10-25T15:50:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-25/toei-anime-revises-projected-revenues-to-historic-high",
      "title": "Toei Anime Revises Projected Revenues to Historic High"
    },
    {
      "datetime": "2011-10-29T03:32:27Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-28/funimation-acquires-more-episodes-of-one-piece",
      "title": "Funimation Acquires More Episodes of <cite>One Piece</cite>"
    },
    {
      "datetime": "2011-10-29T19:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-29/one-piece-gets-new-3d-event-anime-short-in-december",
      "title": "<cite>One Piece</cite> Gets New 3D Event Anime Short in December"
    },
    {
      "datetime": "2011-10-29T21:15:39Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-29/toei-animation-breaks-down-2011-earnings-by-franchise",
      "title": "Toei Animation Breaks Down 2011 Earnings by Franchise"
    },
    {
      "datetime": "2011-10-31T03:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-10-30/4-anime-rank-among-top-40-shows-on-hulu-in-u.s",
      "title": "4 Anime Rank Among Top 40 Shows on Hulu in U.S."
    },
    {
      "datetime": "2011-11-03T15:08:29Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-04/madman-national-cosplay-championship-and-supanova-brisbane-this-weekend",
      "title": "Madman National Cosplay Championship & Supanova Brisbane This Weekend"
    },
    {
      "datetime": "2011-11-06T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-05/bandai-namco-breaks-down-revenues-by-franchise",
      "title": "Bandai Namco Breaks Down Revenues by Franchise"
    },
    {
      "datetime": "2011-11-08T13:28:04Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-09/australian-new-releases-october-2011",
      "title": "Australian New Releases - October 2011"
    },
    {
      "datetime": "2011-11-08T11:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-08/japan-animation-blu-ray-disc-ranking/october-31-november-6/2",
      "title": "Japan's Animation DVD Ranking: October 31-November 6"
    },
    {
      "datetime": "2011-11-13T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-13/japan-animation-tv-ranking-october-31-november-6",
      "title": "Japan's Animation TV Ranking, October 31-November 6"
    },
    {
      "datetime": "2011-11-15T09:20:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-15/japan-animation-dvd-ranking-november-7-13",
      "title": "Japan's Animation DVD Ranking, November 7-13"
    },
    {
      "datetime": "2011-11-19T15:20:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-19/one-piece-gets-new-film-set-in-new-world-arc",
      "title": "<cite>One Piece</cite> Gets New Film Set in New World Arc"
    },
    {
      "datetime": "2011-11-30T02:10:39Z",
      "href": "https://www.animenewsnetwork.com/news/2011-11-29/north-american-anime-manga-releases/nov-27-dec-3",
      "title": "North American Anime, Manga Releases: Nov. 27 - Dec. 3"
    },
    {
      "datetime": "2011-12-06T04:10:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-12-05/japan-animation-tv-ranking-november-14-20",
      "title": "Japan's Animation TV Ranking, November 14-20"
    },
    {
      "datetime": "2011-12-07T15:55:33Z",
      "href": "https://www.animenewsnetwork.com/news/2011-12-07/maro-kart-7-gundam-ex-vs-top-chart-with-423619-and-349756",
      "title": "<cite>Mario Kart 7, Gundam EX Vs.</cite> Top Chart With 423,619 & 349,756"
    },
    {
      "datetime": "2012-04-19T04:52:57Z",
      "href": "https://www.animenewsnetwork.com/news/2012-04-19/avcon-2012-preregistration-open",
      "title": "AVCon 2012 Preregistration Open"
    },
    {
      "datetime": "2011-12-14T16:40:00Z",
      "href": "https://www.animenewsnetwork.com/news/2011-12-14/monster-hunter-3-g-sells-521959-to-top-weekly-chart",
      "title": "<cite>Monster Hunter 3 G</cite> Sells 521,959 to Top Weekly Chart"
    },
    {
      "datetime": "2011-12-21T17:12:06Z",
      "href": "https://www.animenewsnetwork.com/news/2011-12-21/manga-to-release-shiki-and-black-butler-ii",
      "title": "Manga To Release <i>Shiki</i> and <i>Black Butler II</i>"
    },
    {
      "datetime": "2012-01-03T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-02/japan-animation-tv-ranking-november-28-december-4",
      "title": "Japan's Animation TV Ranking, November 28-December 4"
    },
    {
      "datetime": "2012-01-09T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-08/japanese-anime-tv-ranking/december-5-11",
      "title": "Japan's Animation TV Ranking, December 5-11"
    },
    {
      "datetime": "2012-01-10T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-09/japan-animation-tv-ranking-december-12-18",
      "title": "Japan's Animation TV Ranking, December 12-18"
    },
    {
      "datetime": "2012-01-16T00:05:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-15/japanese-animation-tv-ranking-december-19-25",
      "title": "Japanese Animation TV Ranking, December 19-25"
    },
    {
      "datetime": "2012-02-08T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-07/toei-animation-sues-869-bittorrent-users-over-one-piece",
      "title": "Toei Animation Sues 869 BitTorrent Users Over <cite>One Piece</cite>"
    },
    {
      "datetime": "2012-01-20T04:25:46Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-19/ginga-e-kickoff-soccer-anime-staff-listed",
      "title": "<cite>Ginga e Kickoff!!</cite> Soccer Anime's Staff Listed"
    },
    {
      "datetime": "2012-01-22T23:05:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-22/japanese-animation-tv-ranking-january-2-8",
      "title": "Japanese Animation TV Ranking, January 2-8"
    },
    {
      "datetime": "2012-01-24T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-24/japanese-animation-tv-ranking-january-9-15",
      "title": "Japanese Animation TV Ranking, January 9-15"
    },
    {
      "datetime": "2012-01-29T01:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-28/japanese-animation-tv-ranking-january-16-22",
      "title": "Japanese Animation TV Ranking, January 16-22"
    },
    {
      "datetime": "2012-01-29T22:45:12Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-29/north-american-stream-list/january-23-29",
      "title": "North American Stream List: January 23-29"
    },
    {
      "datetime": "2012-01-31T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-01-31/north-american-anime-manga-releases-january-29-february-4",
      "title": "North American Anime, Manga Releases, January 29-February 4"
    },
    {
      "datetime": "2012-02-04T16:55:24Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-04/one-piece-no.65-ties-record-with-4-million-print-run",
      "title": "<cite>One Piece</cite> #65 Ties Record with 4-Million Print Run"
    },
    {
      "datetime": "2012-02-05T21:00:33Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-05/north-american-stream-list/jan-30-feb-5",
      "title": "North American Stream List: Jan. 30-Feb. 5"
    },
    {
      "datetime": "2012-02-12T03:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-11/japanese-animation-tv-ranking-january-30-february-5",
      "title": "Japanese Animation TV Ranking, January 30-February 5"
    },
    {
      "datetime": "2012-02-12T04:50:41Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-11/namco-bandai-registers-pirate-warriors-trademark-in-u.s",
      "title": "Namco Bandai Registers <cite>Pirate Warriors</cite> Trademark in U.S."
    },
    {
      "datetime": "2012-02-13T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-12/north-american-stream-list/february-6-12",
      "title": "North American Stream List: February 6-12"
    },
    {
      "datetime": "2012-02-20T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-19/north-american-stream-list/feb-13-19",
      "title": "North American Stream List: Feb. 13-19"
    },
    {
      "datetime": "2012-02-27T04:10:47Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-26/north-american-stream-list/feb.ruary-20-26",
      "title": "North American Stream List: February 20-26"
    },
    {
      "datetime": "2012-02-27T06:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-27/nhk-gakkatsu-comedy-anime-shorts-announced",
      "title": "NHK's <cite>Gakkatsu!</cite> Comedy Anime Shorts Announced"
    },
    {
      "datetime": "2012-02-27T07:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-27/japanese-animation-tv-ranking-february-6-12",
      "title": "Japanese Animation TV Ranking, February 6-12"
    },
    {
      "datetime": "2012-02-28T22:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-28/japanese-animation-tv-ranking-february-13-19",
      "title": "Japanese Animation TV Ranking, February 13-19"
    },
    {
      "datetime": "2012-02-27T14:09:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-02-27/nintendo-zone-debuts-in-europe-at-hyper-japan",
      "title": "Nintendo Zone Debuts in Europe at Hyper Japan"
    },
    {
      "datetime": "2012-03-01T17:40:42Z",
      "href": "https://www.animenewsnetwork.com/news/2012-03-01/6th-annual-seiyu-awards-winners-announced",
      "title": "6th Annual Seiy\u016b Award Winners Announced"
    },
    {
      "datetime": "2012-03-28T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-03-28/japanese-animation-tv-ranking-march-12-18",
      "title": "Japanese Animation TV Ranking, March 12-18"
    },
    {
      "datetime": "2012-03-29T23:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-03-29/japanese-animation-tv-ranking-march-19-25",
      "title": "Japanese Animation TV Ranking, March 19-25"
    },
    {
      "datetime": "2012-04-09T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-04-09/japanese-animation-tv-ranking-march-26-april-1",
      "title": "Japanese Animation TV Ranking, March 26-April 1"
    },
    {
      "datetime": "2012-04-23T19:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-04-23/japanese-animation-tv-ranking-april-2-8",
      "title": "Japanese Animation TV Ranking, April 2-8"
    },
    {
      "datetime": "2012-04-24T17:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-04-24/japanese-animation-tv-ranking-april-9-15",
      "title": "Japanese Animation TV Ranking, April 9-15"
    },
    {
      "datetime": "2012-05-17T15:45:54Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-17/2-arrested-in-japan-for-selling-pirated-one-piece-dvds",
      "title": "2 Arrested in Japan for Selling Pirated <cite>One Piece</cite> DVDs"
    },
    {
      "datetime": "2012-05-19T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-19/japanese-animation-tv-ranking-april-16-22",
      "title": "Japanese Animation TV Ranking, April 16-22"
    },
    {
      "datetime": "2012-05-21T08:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-21/japanese-animation-tv-ranking-april-23-29",
      "title": "Japanese Animation TV Ranking, April 23-29"
    },
    {
      "datetime": "2012-05-22T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-22/japanese-animation-tv-ranking-april-30-may-6",
      "title": "Japanese Animation TV Ranking, April 30-May 6"
    },
    {
      "datetime": "2012-05-27T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-26/japanese-animation-tv-ranking-may-7-13",
      "title": "Japanese Animation TV Ranking, May 7-13"
    },
    {
      "datetime": "2012-05-28T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-05-28/japanese-animation-tv-ranking-may-14-20",
      "title": "Japanese Animation TV Ranking, May 14-20"
    },
    {
      "datetime": "2012-06-02T18:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-06-02/japanese-animation-tv-ranking-may-21-27",
      "title": "Japanese Animation TV Ranking, May 21-27"
    },
    {
      "datetime": "2012-06-10T03:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-06-09/japanese-animation-tv-ranking-may-28-june-3",
      "title": "Japanese Animation TV Ranking, May 28-June 3"
    },
    {
      "datetime": "2012-06-12T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-06-12/north-american-anime-manga-releases-june-10-16",
      "title": "North American Anime, Manga Releases, June 10-16"
    },
    {
      "datetime": "2012-06-17T17:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-06-17/japan-animation-tv-ranking-june-4-10",
      "title": "Japan's Animation TV Ranking, June 4-10"
    },
    {
      "datetime": "2012-06-24T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-06-24/japan-animation-tv-ranking-june-11-17",
      "title": "Japan's Animation TV Ranking, June 11-17"
    },
    {
      "datetime": "2012-07-02T00:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-01/japan-animation-tv-ranking-june-18-24",
      "title": "Japan's Animation TV Ranking, June 18-24"
    },
    {
      "datetime": "2012-07-02T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-02/one-piece-madoka-magica-win-licensing-of-the-year-awards",
      "title": "<cite>One Piece, Madoka Magica</cite> Win Licensing of the Year Awards"
    },
    {
      "datetime": "2012-07-07T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-07/japan-animation-tv-ranking-june-25-july-1",
      "title": "Japan's Animation TV Ranking, June 25-July 1"
    },
    {
      "datetime": "2012-07-23T19:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-23/japan-animation-tv-ranking-july-2-8",
      "title": "Japan's Animation TV Ranking, July 2-8"
    },
    {
      "datetime": "2012-07-24T19:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-24/japan-animation-tv-ranking-july-9-15",
      "title": "Japan's Animation TV Ranking, July 9-15"
    },
    {
      "datetime": "2012-07-28T21:19:59Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-28/funi-adds-seikishi-yamato/r-one-piece/strong-world-fairy-tail-film-akira",
      "title": "Funi Adds <cite>Seikishi, Yamato: R, One Piece: Strong World, Fairy Tail</cite> Film, <cite>Akira</cite>"
    },
    {
      "datetime": "2012-07-30T20:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-07-30/japan-animation-tv-ranking-july-16-22",
      "title": "Japan's Animation TV Ranking, July 16-22"
    },
    {
      "datetime": "2012-08-06T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-06/japan-animation-tv-ranking-july-23-29",
      "title": "Japan's Animation TV Ranking, July 23-29"
    },
    {
      "datetime": "2012-08-07T22:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-07/north-american-anime-manga-releases-august-5-11",
      "title": "North American Anime, Manga Releases, August 5-11"
    },
    {
      "datetime": "2012-08-14T21:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-14/north-american-anime-manga-releases-august-12-18",
      "title": "North American Anime, Manga Releases, August 12-18"
    },
    {
      "datetime": "2012-08-14T22:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-14/japan-animation-tv-ranking-july-30-august-5",
      "title": "Japan's Animation TV Ranking, July 30-August 5"
    },
    {
      "datetime": "2012-08-20T00:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-19/japan-animation-tv-ranking-august-6-12",
      "title": "Japan's Animation TV Ranking, August 6-12"
    },
    {
      "datetime": "2012-08-21T09:55:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-21/japanese-animation-dvd-ranking-august-13-19",
      "title": "Japanese Animation DVD Ranking, August 13-19"
    },
    {
      "datetime": "2012-08-22T04:08:08Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-22/neon-alley-to-stream-english-one-piece-dub",
      "title": "Neon Alley to Stream English <cite>One Piece</cite> Dub"
    },
    {
      "datetime": "2012-08-27T02:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-08-26/japan-animation-tv-ranking-august-13-19",
      "title": "Japan's Animation TV Ranking, August 13-19"
    },
    {
      "datetime": "2012-09-02T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-02/japan-animation-tv-ranking-august-20-26",
      "title": "Japan's Animation TV Ranking, August 20-26"
    },
    {
      "datetime": "2012-09-10T06:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-10/japan-animation-tv-ranking-august-27-september-2",
      "title": "Japan's Animation TV Ranking, August 27-September 2"
    },
    {
      "datetime": "2012-09-11T22:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-11/japan-animation-dvd-ranking-september-3-9",
      "title": "Japan's Animation DVD Ranking, September 3-9"
    },
    {
      "datetime": "2012-09-17T17:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-17/japan-animation-tv-ranking-september-3-9",
      "title": "Japan's Animation TV Ranking, September 3-9"
    },
    {
      "datetime": "2012-09-23T23:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-23/japan-animation-tv-ranking-september-10-16",
      "title": "Japan's Animation TV Ranking, September 10-16"
    },
    {
      "datetime": "2012-09-25T19:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-25/japan-animation-dvd-ranking-september-17-23",
      "title": "Japan's Animation DVD Ranking, September 17-23"
    },
    {
      "datetime": "2012-09-25T23:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-09-25/north-american-anime-manga-releases-september-23-29",
      "title": "North American Anime, Manga Releases, September 23-29"
    },
    {
      "datetime": "2012-10-08T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-08/japan-animation-tv-ranking-september-17-23",
      "title": "Japan's Animation TV Ranking, September 17-23"
    },
    {
      "datetime": "2012-10-09T21:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-09/japan-animation-tv-ranking-september-24-30",
      "title": "Japan's Animation TV Ranking, September 24-30"
    },
    {
      "datetime": "2012-10-15T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-15/japan-animation-tv-ranking-october-1-7",
      "title": "Japan's Animation TV Ranking, October 1-7"
    },
    {
      "datetime": "2012-10-22T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-21/japan-animation-tv-ranking-october-8-14",
      "title": "Japan's Animation TV Ranking, October 8-14"
    },
    {
      "datetime": "2012-10-28T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-28/japan-animation-tv-ranking-october-15-21",
      "title": "Japan's Animation TV Ranking, October 15-21"
    },
    {
      "datetime": "2012-10-30T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-30/north-american-anime-manga-releases-october-28-november-3",
      "title": "North American Anime, Manga Releases, October 28-November 3"
    },
    {
      "datetime": "2012-10-31T19:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-10-31/japan-animation-dvd-ranking-october-22-28",
      "title": "Japan's Animation DVD Ranking, October 22-28"
    },
    {
      "datetime": "2012-11-04T22:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-11-04/japan-animation-tv-ranking-october-22-28",
      "title": "Japan's Animation TV Ranking, October 22-28"
    },
    {
      "datetime": "2012-11-12T02:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-11-11/japan-animation-tv-ranking-october-29-november-4",
      "title": "Japan's Animation TV Ranking, October 29-November 4"
    },
    {
      "datetime": "2012-11-19T18:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-11-19/japan-animation-tv-ranking-november-5-11",
      "title": "Japan's Animation TV Ranking, November 5-11"
    },
    {
      "datetime": "2012-11-26T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-11-25/japan-animation-tv-ranking-november-12-18",
      "title": "Japan's Animation TV Ranking, November 12-18"
    },
    {
      "datetime": "2012-12-03T01:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-02/japan-animation-tv-ranking-november-19-25",
      "title": "Japan's Animation TV Ranking, November 19-25"
    },
    {
      "datetime": "2012-12-10T04:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-09/japan-animation-tv-ranking-november-26-december-2",
      "title": "Japan's Animation TV Ranking, November 26-December 2"
    },
    {
      "datetime": "2012-12-11T09:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-11/japan-animation-dvd-ranking-december-3-9",
      "title": "Japan's Animation DVD Ranking, December 3-9"
    },
    {
      "datetime": "2012-12-17T01:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-16/japan-animation-tv-ranking-december-3-9",
      "title": "Japan's Animation TV Ranking, December 3-9"
    },
    {
      "datetime": "2012-12-18T22:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-18/north-american-anime-manga-releases-december-16-22",
      "title": "North American Anime, Manga Releases, December 16-22"
    },
    {
      "datetime": "2012-12-26T17:00:08Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-26/japan-animation-tv-ranking-december-10-16",
      "title": "Japan's Animation TV Ranking, December 10-16"
    },
    {
      "datetime": "2012-12-26T23:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-26/japanese-box-office-december-15-16",
      "title": "Japanese Box Office, December 15-16"
    },
    {
      "datetime": "2012-12-26T12:50:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-26/saint-young-men-anime-film-2-more-teasers-streamed",
      "title": "<cite>Saint Young Men</cite> Anime Film's 2 More Teasers Streamed"
    },
    {
      "datetime": "2012-12-31T04:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2012-12-30/japan-animation-tv-ranking-december-17-23",
      "title": "Japan's Animation TV Ranking, December 17-23"
    },
    {
      "datetime": "2013-01-16T22:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-01-16/japan-animation-tv-ranking-december-31-january-6",
      "title": "Japan's Animation TV Ranking, December 31-January 6"
    },
    {
      "datetime": "2013-01-21T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-01-20/japan-tv-animation-ranking-january-7-13",
      "title": "Japan's Animation TV Ranking, January 7-13"
    },
    {
      "datetime": "2013-01-27T22:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-01-27/japan-animation-tv-ranking-january-14-20",
      "title": "Japan's Animation TV Ranking, January 14-20"
    },
    {
      "datetime": "2013-02-04T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-03/japan-animation-tv-ranking-january-21-27",
      "title": "Japan's Animation TV Ranking, January 21-27"
    },
    {
      "datetime": "2013-02-07T22:38:59Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-07/manga-entertainment-to-release-one-piece",
      "title": "Manga Entertainment to Release <i>One Piece</i>"
    },
    {
      "datetime": "2013-02-11T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-10/japan-animation-tv-ranking-january-28-february-3",
      "title": "Japan's Animation TV Ranking, January 28-February 3"
    },
    {
      "datetime": "2013-02-12T19:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-12/japan-animation-dvd-ranking-february-4-10",
      "title": "Japan's Animation DVD Ranking, February 4-10"
    },
    {
      "datetime": "2013-02-18T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-17/japan-animation-tv-ranking-february-4-10",
      "title": "Japan's Animation TV Ranking, February 4-10"
    },
    {
      "datetime": "2013-02-18T11:54:05Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-18/some-of-the-7th-annual-seiyu-award-winners-announced",
      "title": "Some of the 7th Annual Seiy\u016b Award Winners Announced"
    },
    {
      "datetime": "2013-02-25T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-02-24/japan-animation-tv-ranking-february-11-17",
      "title": "Japan's Animation TV Ranking, February 11-17"
    },
    {
      "datetime": "2013-03-03T16:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-03-03/japan-animation-tv-ranking-february-18-24",
      "title": "Japan's Animation TV Ranking, February 18-24"
    },
    {
      "datetime": "2013-03-11T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-03-10/japan-animation-tv-ranking-february-25-march-3",
      "title": "Japan's Animation TV Ranking, February 25-March 3"
    },
    {
      "datetime": "2013-03-18T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-03-17/japan-animation-tv-ranking-march-4-10",
      "title": "Japan's Animation TV Ranking, March 4-10"
    },
    {
      "datetime": "2013-03-19T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-03-19/north-american-anime-manga-releases-march-17-23",
      "title": "North American Anime, Manga Releases, March 17-23"
    },
    {
      "datetime": "2013-03-24T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-03-24/japan-animation-tv-ranking-march-11-17",
      "title": "Japan's Animation TV Ranking, March 11-17"
    },
    {
      "datetime": "2013-04-01T18:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-04-01/japan-animation-tv-ranking-march-18-24",
      "title": "Japan's Animation TV Ranking, March 18-24"
    },
    {
      "datetime": "2013-04-07T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-04-07/japan-animation-tv-ranking-march-25-31",
      "title": "Japan's Animation TV Ranking, March 25-31"
    },
    {
      "datetime": "2013-04-14T22:35:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-04-14/japan-animation-tv-ranking-april-1-7",
      "title": "Japan's Animation TV Ranking, April 1-7"
    },
    {
      "datetime": "2013-04-22T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-04-21/japan-animation-tv-ranking-april-8-14",
      "title": "Japan's Animation TV Ranking, April 8-14"
    },
    {
      "datetime": "2013-04-29T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-04-28/japan-animation-tv-ranking-april-15-21",
      "title": "Japan's Animation TV Ranking, April 15-21"
    },
    {
      "datetime": "2013-05-04T13:10:43Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-04/manga-entertainment-trailers",
      "title": "Manga Entertainment Trailers"
    },
    {
      "datetime": "2013-05-05T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-05/japan-animation-tv-ranking-april-22-28",
      "title": "Japan's Animation TV Ranking, April 22-28"
    },
    {
      "datetime": "2013-05-12T18:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-12/japan-animation-tv-ranking-april-29-may-5",
      "title": "Japan's Animation TV Ranking, April 29-May 5"
    },
    {
      "datetime": "2013-05-13T03:50:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-12/japanese-box-office-may-4-5",
      "title": "Japanese Box Office, May 4-5"
    },
    {
      "datetime": "2013-05-14T22:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-14/north-american-anime-manga-releases-may-12-18",
      "title": "North American Anime, Manga Releases, May 12-18"
    },
    {
      "datetime": "2013-05-20T01:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-19/japan-animation-tv-ranking-may-6-12",
      "title": "Japan's Animation TV Ranking, May 6-12"
    },
    {
      "datetime": "2013-05-26T11:04:15Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-26/anime-announcements-at-london-mcm-expo-comic-con-sunday",
      "title": "Anime Announcements at London MCM Expo Comic Con Sunday"
    },
    {
      "datetime": "2013-05-26T12:39:17Z",
      "href": "https://www.animenewsnetwork.com/news/2013-05-26/one-piece-debuts-on-u.k-dvd-monday",
      "title": "<i>One Piece</i> Debuts on U.K. DVD Monday"
    },
    {
      "datetime": "2013-06-02T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-02/japan-animation-tv-ranking-may-13-19",
      "title": "Japan's Animation TV Ranking, May 13-19"
    },
    {
      "datetime": "2013-06-04T23:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-04/japan-animation-tv-ranking-may-20-26",
      "title": "Japan's Animation TV Ranking, May 20-26"
    },
    {
      "datetime": "2013-06-08T13:17:34Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-08/one-piece-voice-actor-kobushi-nobuyuki-passes-away",
      "title": "<cite>One Piece</cite> Voice Actor Takkou Ishimori Passes Away"
    },
    {
      "datetime": "2013-06-10T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-09/japan-animation-tv-ranking-may-27-june-2",
      "title": "Japan's Animation TV Ranking, May 27-June 2"
    },
    {
      "datetime": "2013-06-11T09:10:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-11/japan-animation-dvd-ranking-june-3-9",
      "title": "Japan's Animation DVD Ranking, June 3-9"
    },
    {
      "datetime": "2013-06-17T04:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-17/japan-animation-tv-ranking-june-3-9",
      "title": "Japan's Animation TV Ranking, June 3-9"
    },
    {
      "datetime": "2013-06-23T22:35:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-23/japan-animation-tv-ranking-june-10-16",
      "title": "Japan's Animation TV Ranking, June 10-16"
    },
    {
      "datetime": "2013-06-23T23:35:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-23/japanese-box-office-june-15-16",
      "title": "Japanese Box Office, June 15-16"
    },
    {
      "datetime": "2013-06-29T21:50:20Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-29/kiki-delivery-service-and-grave-of-the-fireflies-double-play-released-monday",
      "title": "<i>Kiki's Delivery Service</i> and <i>Grave of the Fireflies</i> Double Play Released Monday (Updated)"
    },
    {
      "datetime": "2013-06-30T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-06-30/japan-animation-tv-ranking-june-17-23",
      "title": "Japan's Animation TV Ranking, June 17-23"
    },
    {
      "datetime": "2013-07-03T17:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-03/daisuki-streams-one-piece-dragon-ball-z-anime",
      "title": "Daisuki Streams <cite>One Piece, Dragon Ball Z</cite> Anime"
    },
    {
      "datetime": "2013-07-08T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-07/japan-animation-tv-ranking-june-24-30",
      "title": "Japan's Animation TV Ranking, June 24-30"
    },
    {
      "datetime": "2013-07-17T00:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-16/japan-animation-tv-ranking-july-1-7",
      "title": "Japan's Animation TV Ranking, July 1-7"
    },
    {
      "datetime": "2013-07-21T23:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-21/japanese-animation-tv-ranking-june-8-14",
      "title": "Japan's Animation TV Ranking, July 8-14"
    },
    {
      "datetime": "2013-07-23T20:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-23/north-american-anime-manga-releases-july-21-27",
      "title": "North American Anime, Manga Releases, July 21-27"
    },
    {
      "datetime": "2013-07-28T23:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-28/japan-animation-tv-ranking-july-15-21",
      "title": "Japan's Animation TV Ranking, July 15-21"
    },
    {
      "datetime": "2013-07-30T08:45:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-07-30/japan-animation-dvd-ranking-july-22-28",
      "title": "Japan's Animation DVD Ranking, July 22-28"
    },
    {
      "datetime": "2013-08-04T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-08-04/japan-animation-tv-ranking-july-22-28",
      "title": "Japan's Animation TV Ranking, July 22-28"
    },
    {
      "datetime": "2013-08-19T23:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-08-19/japan-animation-tv-ranking-august-5-11",
      "title": "Japan's Animation TV Ranking, August 5-11"
    },
    {
      "datetime": "2013-08-25T21:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-08-25/japan-animation-tv-ranking-august-12-18",
      "title": "Japan's Animation TV Ranking, August 12-18"
    },
    {
      "datetime": "2013-09-02T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-01/japan-animation-tv-ranking-august-19-25",
      "title": "Japan's Animation TV Ranking, August 19-25"
    },
    {
      "datetime": "2013-09-03T09:20:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-03/japan-animation-dvd-ranking-august-26-september-1",
      "title": "Japan's Animation DVD Ranking, August 26-September 1"
    },
    {
      "datetime": "2013-09-04T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-03/north-american-anime-manga-releases-september-1-7",
      "title": "North American Anime, Manga Releases, September 1-7"
    },
    {
      "datetime": "2013-09-09T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-08/japan-animation-tv-ranking-august-26-september-1",
      "title": "Japan's Animation TV Ranking, August 26-September 1"
    },
    {
      "datetime": "2013-09-10T08:50:59Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-10/japan-animation-dvd-ranking-september-2-8",
      "title": "Japan's Animation DVD Ranking, September 2-8"
    },
    {
      "datetime": "2013-09-17T00:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-16/japan-animation-tv-ranking-september-2-8",
      "title": "Japan's Animation TV Ranking, September 2-8"
    },
    {
      "datetime": "2013-09-17T10:25:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-17/japan-animation-dvd-ranking-september-9-15",
      "title": "Japan's Animation DVD Ranking, September 9-15"
    },
    {
      "datetime": "2013-09-23T07:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-23/japan-animation-tv-ranking-september-9-15",
      "title": "Japan's Animation TV Ranking, September 9-15"
    },
    {
      "datetime": "2013-09-30T02:05:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-09-29/japan-animation-tv-ranking-september-16-22",
      "title": "Japan's Animation TV Ranking, September 16-22"
    },
    {
      "datetime": "2013-10-07T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-06/japan-animation-tv-ranking-september-23-29",
      "title": "Japan's Animation TV Ranking, September 23-29"
    },
    {
      "datetime": "2013-10-12T14:05:44Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-12/one-piece-tv-anime-blu-rays-listed-in-japan",
      "title": "<cite>One Piece</cite> TV Anime Blu-rays Listed in Japan"
    },
    {
      "datetime": "2013-10-13T22:20:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-13/japan-animation-tv-ranking-september-30-october-6",
      "title": "Japan's Animation TV Ranking, September 30-October 6"
    },
    {
      "datetime": "2013-10-15T21:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-15/north-american-anime-manga-releases-october-13-19",
      "title": "North American Anime, Manga Releases, October 13-19"
    },
    {
      "datetime": "2013-10-21T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-20/japan-animation-tv-ranking-october-7-13",
      "title": "Japan's Animation TV Ranking, October 7-13"
    },
    {
      "datetime": "2013-10-27T21:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-27/japan-animation-tv-ranking-october-14-20",
      "title": "Japan's Animation TV Ranking, October 14-20"
    },
    {
      "datetime": "2013-10-31T19:05:47Z",
      "href": "https://www.animenewsnetwork.com/news/2013-10-31/crunchyroll-to-stream-one-piece-anime",
      "title": "Crunchyroll to Stream <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2013-11-02T04:24:03Z",
      "href": "https://www.animenewsnetwork.com/news/2013-11-02/one-piece-franchise-portal-site-one-piece.com-launched",
      "title": "<cite>One Piece</cite> Franchise Portal Site One Piece.com Launched"
    },
    {
      "datetime": "2013-11-04T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-11-03/japan-animation-tv-ranking-october-21-27",
      "title": "Japan's Animation TV Ranking, October 21-27"
    },
    {
      "datetime": "2013-11-10T10:31:14Z",
      "href": "https://www.animenewsnetwork.com/news/2013-11-10/shangri-la-and-one-piece-released-monday",
      "title": "<i>Arakawa</i> and <i>One Piece</i> Released Monday (Update)"
    },
    {
      "datetime": "2013-11-10T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-11-10/japan-animation-tv-ranking-october-28-november-3",
      "title": "Japan's Animation TV Ranking, October 28-November 3"
    },
    {
      "datetime": "2013-11-24T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-11-24/japan-animation-tv-ranking-november-11-17",
      "title": "Japan's Animation TV Ranking, November 11-17"
    },
    {
      "datetime": "2013-12-02T10:25:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-02/japan-animation-tv-ranking-november-18-24",
      "title": "Japan's Animation TV Ranking, November 18-24"
    },
    {
      "datetime": "2013-12-04T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-03/north-american-anime-manga-releases-december-1-7",
      "title": "North American Anime, Manga Releases, December 1-7"
    },
    {
      "datetime": "2013-12-08T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-08/japan-animation-tv-ranking-november-25-december-1",
      "title": "Japan's Animation TV Ranking, November 25-December 1"
    },
    {
      "datetime": "2013-12-11T14:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-11/one-piece-unlimited-world-r-3ds-game-straw-hat-crew-gameplay-videos-streamed",
      "title": "<cite>One Piece Unlimited World R's</cite> 3DS Game's Straw Hat Crew Gameplay Videos Streamed"
    },
    {
      "datetime": "2013-12-16T15:25:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-16/japan-animation-tv-ranking-december-2-8",
      "title": "Japan's Animation TV Ranking, December 2-8"
    },
    {
      "datetime": "2013-12-23T05:15:00Z",
      "href": "https://www.animenewsnetwork.com/news/2013-12-23/japan-animation-tv-ranking-december-9-15",
      "title": "Japan's Animation TV Ranking, December 9-15"
    },
    {
      "datetime": "2014-01-01T21:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-01/japan-animation-tv-ranking-december-16-22",
      "title": "Japan's Animation TV Ranking, December 16-22"
    },
    {
      "datetime": "2014-01-10T02:17:42Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-09/new-sailor-moon-anime-by-toei-to-start-in-july",
      "title": "New <cite>Sailor Moon</cite> Anime by Toei to Premiere in July"
    },
    {
      "datetime": "2014-01-15T00:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-14/north-american-anime-manga-releases-january-12-18",
      "title": "North American Anime, Manga Releases, January 12-18"
    },
    {
      "datetime": "2014-01-18T04:48:58Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-17/funimation-licenses-season-6-of-one-piece",
      "title": "Funimation Licenses Season 6 of <cite>One Piece</cite> TV Anime"
    },
    {
      "datetime": "2014-01-20T01:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-19/japan-animation-tv-ranking-december-30-january-5",
      "title": "Japan's Animation TV Ranking, December 30-January 5"
    },
    {
      "datetime": "2014-01-20T03:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-01-19/japan-animation-tv-ranking-january-6-12",
      "title": "Japan's Animation TV Ranking, January 6-12"
    },
    {
      "datetime": "2014-02-02T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-02/japan-animation-tv-ranking-january-20-26",
      "title": "Japan's Animation TV Ranking, January 20-26"
    },
    {
      "datetime": "2014-02-09T22:43:50Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-09/japan-animation-tv-ranking-january-27-february-2",
      "title": "Japan's Animation TV Ranking, January 27-February 2"
    },
    {
      "datetime": "2014-02-16T09:38:04Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-16/new-cities-of-gold-and-infinite-stratos-released-monday",
      "title": "New <i>Cities of Gold</i> and <i>Infinite Stratos</i> Released Monday"
    },
    {
      "datetime": "2014-02-16T22:56:27Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-16/japan-animation-tv-ranking/february-3-9",
      "title": "Japan's Animation TV Ranking: February 3-9"
    },
    {
      "datetime": "2014-02-23T21:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-23/japanese-anime-tv-ranking/february-10-16",
      "title": "Japan's Animation TV Ranking, February 10-16"
    },
    {
      "datetime": "2014-03-01T04:48:23Z",
      "href": "https://www.animenewsnetwork.com/news/2014-02-28/crunchyroll-adds-one-piece-catalog-episodes-motion-manga",
      "title": "Crunchyroll Adds <cite>One Piece</cite> Catalog Episodes, Motion Manga"
    },
    {
      "datetime": "2014-03-03T03:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-03-02/japanese-anime-tv-ranking/february-17-23",
      "title": "Japan's Animation TV Ranking, February 17-23"
    },
    {
      "datetime": "2014-03-04T22:50:35Z",
      "href": "https://www.animenewsnetwork.com/news/2014-03-04/north-american-anime-manga-releases-march-2-8",
      "title": "North American Anime, Manga Releases, March 2-8"
    },
    {
      "datetime": "2014-03-10T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-03-09/japan-animation-tv-ranking/february-24-march-2",
      "title": "Japan's Animation TV Ranking, February 24-March 2"
    },
    {
      "datetime": "2014-03-24T02:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-03-23/japanese-anime-tv-ranking/march-10-15",
      "title": "Japan's Animation TV Ranking, March 10-15"
    },
    {
      "datetime": "2014-04-03T22:30:13Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-03/japan-animation-tv-ranking/march-17-23",
      "title": "Japan's Animation TV Ranking, March 17-23"
    },
    {
      "datetime": "2014-04-09T06:30:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-09/japan-animation-tv-ranking/march-24-30",
      "title": "Japan's Animation TV Ranking, March 24-30"
    },
    {
      "datetime": "2014-04-14T10:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-14/japan-animation-tv-ranking/march-31-april-6",
      "title": "Japan's Animation TV Ranking, March 31-April 6"
    },
    {
      "datetime": "2014-04-15T20:45:25Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-15/north-american-anime-manga-releases-april-13-19",
      "title": "North American Anime, Manga Releases, April 13-19"
    },
    {
      "datetime": "2014-04-20T20:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-20/japanese-anime-tv-ranking/april-7-13",
      "title": "Japan's Animation TV Ranking, April 7-13"
    },
    {
      "datetime": "2014-04-28T08:20:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-04-28/japan-animation-tv-ranking/april-14-20",
      "title": "Japan's Animation TV Ranking, April 14-20"
    },
    {
      "datetime": "2014-05-04T23:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-05-04/japan-animation-tv-ranking/april-21-27",
      "title": "Japan's Animation TV Ranking, April 21-27"
    },
    {
      "datetime": "2014-05-12T16:00:00Z",
      "href": "https://www.animenewsnetwork.com/news/2014-05-12/japanese-anime-tv-ranking/april-28-may-4",
      "title": "Japan's Animation TV Ranking, April 28-May 4"
    },
    {
      "datetime": "2014-05-13T03:13:12Z",
      "href": "https://www.animenewsnetwork.com/news/2014-05-12/one-piece-unlimited-world-red-slated-for-u.s-on-july-8",
      "title": "<cite>One Piece Unlimited World Red</cite>  Slated for U.S. on July 8"
    },
    {
      "datetime": "2014-05-19T22:30:19Z",
      "href": "https://www.animenewsnetwork.com/news/2014-05-19/japanese-anime-tv-ranking/may-5-11",
      "title": "Japan's Animation TV Ranking, May 5-11"
    },
    {
      "datetime": "2014-05-27T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-05-27/japan-animation-tv-ranking-may-12-18/.74902",
      "title": "Japan's Animation TV Ranking, May 12-18"
    },
    {
      "datetime": "2014-06-02T23:00:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-06-03/japan-animation-tv-ranking-may-19-25/.75116",
      "title": "Japan's Animation TV Ranking, May 19-25"
    },
    {
      "datetime": "2014-06-09T22:30:34Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-06-10/japan-animation-tv-ranking-may-26-june-1/.75353",
      "title": "Japan's Animation TV Ranking, May 26-June 1"
    },
    {
      "datetime": "2014-06-16T01:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-06-16/japan-animation-tv-ranking-june-2-8/.75599",
      "title": "Japan's Animation TV Ranking, June 2-8"
    },
    {
      "datetime": "2014-06-23T20:30:07Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-06-24/japan-animation-tv-ranking-june-9-15/.75831",
      "title": "Japan's Animation TV Ranking, June 9-15"
    },
    {
      "datetime": "2014-07-02T05:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-02/japan-animation-tv-ranking-june-16-22/.76113",
      "title": "Japan's Animation TV Ranking, June 16-22"
    },
    {
      "datetime": "2014-07-05T19:14:18Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-06/crunchyroll-adds-akame-ga-kill-dramatical-murder-blue-spring-ride-tv-anime/.76346",
      "title": "Crunchyroll Adds<cite> Akame ga Kill, DRAMAtical Murder, Blue Spring Ride</cite> TV Anime"
    },
    {
      "datetime": "2014-07-07T02:45:22Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-07/japan-animation-tv-ranking-june-23-29/.76378",
      "title": "Japan's Animation TV Ranking, June 23-29"
    },
    {
      "datetime": "2014-07-08T02:35:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-08/one-piece-gets-2-hour-3d2y-anime-special-in-august/.76419",
      "title": "<cite>One Piece</cite> Gets 2-hour '3D2Y' Anime Special in August"
    },
    {
      "datetime": "2014-07-14T21:30:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-15/japan-animation-tv-ranking-june-30-july-6/.76662",
      "title": "Japan's Animation TV Ranking, June 30-July 6"
    },
    {
      "datetime": "2014-07-19T01:26:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-19/one-piece-3d2y-2-hour-anime-special-promo-streamed/.76825",
      "title": "One Piece '3D2Y' 2-Hour Anime Special's Promo Streamed"
    },
    {
      "datetime": "2014-07-21T06:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-21/japan-animation-tv-ranking-july-7-13/.76868",
      "title": "Japan's Animation TV Ranking, July 7-13"
    },
    {
      "datetime": "2014-07-25T01:44:59Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-25/funimation-reveals-one-piece-dub-cast-for-thriller-bark-arc/.77008",
      "title": "Funimation Reveals <cite>One Piece</cite> Dub Cast for Thriller Bark Arc"
    },
    {
      "datetime": "2014-07-27T07:27:20Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-27/one-piece-and-fairy-tail-films-familiar-of-zero-released-monday/.77014",
      "title": "<i>One Piece</i> and <i>Fairy Tail</i> Films, <i>Familiar of Zero</i> Released Monday"
    },
    {
      "datetime": "2014-07-28T02:30:21Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-07-28/japan-animation-tv-ranking-july-14-20/.77063",
      "title": "Japan's Animation TV Ranking, July 14-20"
    },
    {
      "datetime": "2014-08-05T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-05/japan-animation-dvd-ranking-july-28-august-3/.77311",
      "title": "Japan's Animation DVD Ranking, July 28-August 3"
    },
    {
      "datetime": "2014-08-11T09:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-11/japan-animation-tv-ranking-july-28-august-3/.77502",
      "title": "Japan's Animation TV Ranking, July 28-August 3"
    },
    {
      "datetime": "2014-08-18T07:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-18/japan-animation-tv-ranking-august-4-10/.77713",
      "title": "Japan's Animation TV Ranking, August 4-10"
    },
    {
      "datetime": "2014-08-19T08:35:23Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-19/japan-animation-dvd-ranking-august-11-17/.77755",
      "title": "Japan's Animation DVD Ranking, August 11-17"
    },
    {
      "datetime": "2014-08-25T02:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-25/japan-animation-tv-ranking-august-11-17/.77980",
      "title": "Japan's Animation TV Ranking, August 11-17"
    },
    {
      "datetime": "2014-08-26T08:45:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-26/japan-animation-dvd-ranking-august-18-24/.78031",
      "title": "Japan's Animation DVD Ranking, August 18-24"
    },
    {
      "datetime": "2014-08-26T11:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-26/one-piece-3d2y-2-hour-anime-special-3-new-tv-spots-streamed/.78033",
      "title": "<cite>One Piece '3D2Y'</cite> 2-Hour Anime Special's 3 New TV Spots Streamed"
    },
    {
      "datetime": "2014-09-01T02:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-08-31/japan-animation-tv-ranking-august-18-24/.78227",
      "title": "Japan's Animation TV Ranking, August 18-24"
    },
    {
      "datetime": "2014-09-02T09:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-02/japan-animation-dvd-ranking-august-25-31/.78300",
      "title": "Japan's Animation DVD Ranking, August 25-31"
    },
    {
      "datetime": "2014-09-08T08:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-08/japan-animation-tv-ranking-august-26-september-1/.78504",
      "title": "Japan's Animation TV Ranking, August 26-September 1"
    },
    {
      "datetime": "2014-09-15T13:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-15/japan-animation-tv-ranking-september-1-7/.78781",
      "title": "Japan's Animation TV Ranking, September 1-7"
    },
    {
      "datetime": "2014-09-22T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-22/japan-animation-tv-ranking-september-8-14/.79042",
      "title": "Japan's Animation TV Ranking, September 8-14"
    },
    {
      "datetime": "2014-09-26T04:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-26/one-piece-anime-casts-tohru-furuya-in-pivotal-role/.79217",
      "title": "<cite>One Piece</cite> Anime Casts Tohru Furuya in Pivotal Role"
    },
    {
      "datetime": "2014-09-29T22:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-29/japan-animation-tv-ranking-september-15-21/.79311",
      "title": "Japan's Animation TV Ranking, September 15-21"
    },
    {
      "datetime": "2014-09-30T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-30/north-american-anime-manga-releases-september-28-october-4/.79362",
      "title": "North American Anime, Manga Releases, September 28-October 4"
    },
    {
      "datetime": "2014-09-30T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-09-30/japan-animation-dvd-ranking-september-22-28/.79371",
      "title": "Japan's Animation DVD Ranking, September 22-28"
    },
    {
      "datetime": "2014-10-03T21:05:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-03/funimation-streams-gonna-be-the-twin-tails-in-search-of-the-lost-future-daitoshokan-no-hitsujikai-/.79536",
      "title": "Funimation Streams <cite>Gonna be the Twin-Tails!!, In Search of the Lost Future, Daitoshokan no Hitsujikai, Garo, Bahamut, Laughing Under the Clouds, Lord Marksman & Vanadis</cite>"
    },
    {
      "datetime": "2014-10-06T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-06/japan-animation-tv-ranking-september-22-28/.79601",
      "title": "Japan's Animation TV Ranking, September 22-28"
    },
    {
      "datetime": "2014-10-13T08:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-13/japan-animation-tv-ranking-september-29-october-5/.79854",
      "title": "Japan's Animation TV Ranking, September 29-October 5"
    },
    {
      "datetime": "2014-10-19T05:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-19/crunchyroll-adds-2-one-piece-x-toriko-crossover-specials/.80088",
      "title": "Crunchyroll Adds 2 <cite>One Piece x Toriko</cite> Crossover Specials"
    },
    {
      "datetime": "2014-10-20T22:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-20/japan-animation-tv-ranking-october-6-12/.80115",
      "title": "Japan's Animation TV Ranking, October 6-12"
    },
    {
      "datetime": "2014-10-21T08:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-21/japan-animation-dvd-ranking-september-29-october-5/.80164",
      "title": "Japan's Animation DVD Ranking, September 29-October 5"
    },
    {
      "datetime": "2014-10-28T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-27/japan-animation-tv-ranking-october-13-19/.80371",
      "title": "Japan's Animation TV Ranking, October 13-19"
    },
    {
      "datetime": "2014-10-28T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-10-28/north-american-anime-manga-releases-october-26-november-1/.80433",
      "title": "North American Anime, Manga Releases, October 26-November 1"
    },
    {
      "datetime": "2014-11-04T15:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-04/japan-animation-tv-ranking-october-20-26/.80590",
      "title": "Japan's Animation TV Ranking, October 20-26"
    },
    {
      "datetime": "2014-11-02T23:40:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-02/kill-la-kill-and-one-piece-released-monday/.80595",
      "title": "<i>Kill la Kill</i> and <i>One Piece</i> Released Monday"
    },
    {
      "datetime": "2014-11-10T08:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-10/japan-animation-tv-ranking-october-27-november-2/.80850",
      "title": "Japan's Animation TV Ranking, October 27-November 2"
    },
    {
      "datetime": "2014-11-17T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-17/japan-animation-tv-ranking-november-3-9/.81107",
      "title": "Japan's Animation TV Ranking, November 3-9"
    },
    {
      "datetime": "2014-11-19T18:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-19/north-american-anime-manga-releases-november-16-22/.81178",
      "title": "North American Anime, Manga Releases, November 16-22"
    },
    {
      "datetime": "2014-11-25T01:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-11-24/japan-animation-tv-ranking-november-10-16/.81373",
      "title": "Japan's Animation TV Ranking, November 10-16"
    },
    {
      "datetime": "2014-12-01T09:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-01/japan-animation-tv-ranking-november-17-23/.81611",
      "title": "Japan's Animation TV Ranking, November 17-23"
    },
    {
      "datetime": "2014-12-09T12:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-09/japan-animation-tv-ranking-november-24-30/.81896",
      "title": "Japan's Animation TV Ranking, November 24-30"
    },
    {
      "datetime": "2014-12-15T11:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-15/japan-animation-tv-ranking-december-1-7/.82162",
      "title": "Japan's Animation TV Ranking, December 1-7"
    },
    {
      "datetime": "2014-12-19T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-19/funimation-to-stream-kamisama-kiss-2-tokyo-ghoul-a-shonen-hollywood-holly-stage-for-50/.82411",
      "title": "Funimation to Stream <cite>Kamisama Kiss 2, Tokyo Ghoul \u221aA, Sh\u014dnen Hollywood - Holly Stage for 50</cite>"
    },
    {
      "datetime": "2014-12-23T07:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-23/japan-animation-tv-ranking-december-8-14/.82487",
      "title": "Japan's Animation TV Ranking, December  8-14"
    },
    {
      "datetime": "2014-12-29T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2014-12-29/japan-animation-tv-ranking-december-15-21/.82713",
      "title": "Japan's Animation TV Ranking, December 15-21"
    },
    {
      "datetime": "2015-01-12T11:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-01-12/japan-animation-tv-ranking-december-22-28/.83153",
      "title": "Japan's Animation TV Ranking, December 22-28"
    },
    {
      "datetime": "2015-01-13T20:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-01-13/north-american-anime-manga-releases-january-11-17/.83232",
      "title": "North American Anime, Manga Releases, January 11-17"
    },
    {
      "datetime": "2015-01-19T12:50:31Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-01-19/japan-animation-tv-ranking-january-5-11/.83442",
      "title": "Japan's Animation TV Ranking, January 5-11"
    },
    {
      "datetime": "2015-01-26T09:30:30Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-01-26/japan-animation-tv-ranking-january-12-18/.83706",
      "title": "Japan's Animation TV Ranking, January 12-18"
    },
    {
      "datetime": "2015-02-03T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-02-03/japan-animation-tv-ranking-january-19-25/.83985",
      "title": "Japan's Animation TV Ranking, January 19-25"
    },
    {
      "datetime": "2015-02-03T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-02-03/north-american-anime-manga-releases-february-1-7/.84047",
      "title": "North American Anime, Manga Releases, February 1-7"
    },
    {
      "datetime": "2015-02-09T09:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-02-09/japan-animation-tv-ranking-january-26-february-1/.84234",
      "title": "Japan's Animation TV Ranking, January 26-February 1"
    },
    {
      "datetime": "2015-02-16T19:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-02-16/japan-animation-tv-ranking-february-2-8/.85028",
      "title": "Japan's Animation TV Ranking, February 2-8"
    },
    {
      "datetime": "2015-02-23T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-02-23/japan-animation-tv-ranking-february-9-15/.85296",
      "title": "Japan's Animation TV Ranking, February 9-15"
    },
    {
      "datetime": "2015-03-06T00:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-05/one-piece-gets-saturday-evening-encore-showing-on-adult-swim/.85663",
      "title": "<cite>One Piece</cite> Gets Saturday Evening Encore Showing on Adult Swim"
    },
    {
      "datetime": "2015-03-09T08:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-09/japan-animation-tv-ranking-february-23-march-1/.85754",
      "title": "Japan's Animation TV Ranking, February 23-March 1"
    },
    {
      "datetime": "2015-03-23T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-23/japan-animation-tv-ranking-march-9-15/.86271",
      "title": "Japan's Animation TV Ranking, March 9-15"
    },
    {
      "datetime": "2015-03-29T00:28:49Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-28/funimation-licenses-the-disappearance-of-nagato-yuki-chan-show-by-rock-anime/.86453",
      "title": "Funimation Licenses <cite>The Disappearance of Nagato Yuki-chan, Show By Rock!!</cite> Anime"
    },
    {
      "datetime": "2015-03-30T11:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-30/japan-animation-tv-ranking-march-16-22/.86525",
      "title": "Japan's Animation TV Ranking, March 16-22"
    },
    {
      "datetime": "2015-03-31T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-03-31/north-american-anime-manga-releases-march-29-april-4/.86575",
      "title": "North American Anime, Manga Releases, March 29-April 4"
    },
    {
      "datetime": "2015-04-07T20:38:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-07/north-american-anime-manga-releases-april-5-11/.86863",
      "title": "North American Anime, Manga Releases, April 5-11"
    },
    {
      "datetime": "2015-04-09T00:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-08/japan-animation-tv-ranking-march-23-29/.86916",
      "title": "Japan's Animation TV Ranking, March 23-29"
    },
    {
      "datetime": "2015-04-10T15:03:37Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-11/hanabee-acquires-soniani-super-sonico-the-animation/.86981",
      "title": "Hanabee Acquires SoniAni: Super Sonico the Animation"
    },
    {
      "datetime": "2015-04-12T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-12/japan-animation-tv-ranking-march-30-april-5/.87069",
      "title": "Japan's Animation TV Ranking, March 30-April 5"
    },
    {
      "datetime": "2015-04-19T00:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-18/japan-animation-tv-ranking-april-6-12/.87269",
      "title": "Japan's Animation TV Ranking, April 6-12"
    },
    {
      "datetime": "2015-04-21T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-21/north-american-anime-manga-releases-april-19-25/.87363",
      "title": "North American Anime, Manga Releases, April 19-25"
    },
    {
      "datetime": "2015-04-22T15:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-22/j-stars-victory-vs-game-new-videos-showcase-one-piece-saint-seiya-yu-yu-hakusho/.87402",
      "title": "<cite>J-Stars Victory VS+</cite> Game's New Videos Showcase <cite>One Piece, Saint Seiya, Yu Yu Hakusho</cite>"
    },
    {
      "datetime": "2015-04-27T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-04-27/japan-animation-tv-ranking-april-13-19/.87590",
      "title": "Japan's Animation TV Ranking, April 13-19"
    },
    {
      "datetime": "2015-05-11T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-05-11/japan-animation-tv-ranking-april-27-may-3/.88066",
      "title": "Japan's Animation TV Ranking, April 27-May 3"
    },
    {
      "datetime": "2015-05-14T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-05-14/japan-animation-tv-ranking-may-4-10/.88166",
      "title": "Japan's Animation TV Ranking, May 4-10"
    },
    {
      "datetime": "2015-05-22T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-05-22/japan-animation-tv-ranking-may-11-17/.88474",
      "title": "Japan's Animation TV Ranking, May 11-17"
    },
    {
      "datetime": "2015-06-02T03:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-01/japan-animation-tv-ranking-may-18-24/.88808",
      "title": "Japan's Animation TV Ranking, May 18-24"
    },
    {
      "datetime": "2015-06-08T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-08/japan-animation-tv-ranking-may-25-31/.89047",
      "title": "Japan's Animation TV Ranking, May 25-31"
    },
    {
      "datetime": "2015-06-12T03:25:44Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-11/japan-animation-tv-ranking-june-1-7/.89157",
      "title": "Japan's Animation TV Ranking, June 1-7"
    },
    {
      "datetime": "2015-06-26T03:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-25/japan-animation-tv-ranking-june-8-14/.89495",
      "title": "Japan's Animation TV Ranking, June 8-14"
    },
    {
      "datetime": "2015-06-27T14:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-27/japan-animation-tv-ranking-june-15-21/.89718",
      "title": "Japan's Animation TV Ranking, June 15-21"
    },
    {
      "datetime": "2015-06-30T01:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-06-29/funimation-streams-gangsta-new-hetalia-11-more-new-anime/.89877",
      "title": "Funimation Streams <cite>Gangsta</cite>, New <cite>Hetalia</cite>, 11 More New Anime"
    },
    {
      "datetime": "2015-07-03T12:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-03/kouichi-yamadera-to-voice-corazon-in-one-piece-anime/.90001",
      "title": "Kouichi Yamadera to Voice Corazon in <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2015-07-04T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-04/funimation-reveals-dub-cast-for-one-piece-season-7/.90075",
      "title": "Funimation Reveals Dub Cast for <cite>One Piece</cite> Season 7"
    },
    {
      "datetime": "2015-07-10T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-09/japan-animation-tv-ranking-june-22-28/.90269",
      "title": "Japan's Animation TV Ranking, June 22-28"
    },
    {
      "datetime": "2015-07-10T00:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-09/japan-animation-tv-ranking-june-29-july-5/.90270",
      "title": "Japan's Animation TV Ranking, June 29-July 5"
    },
    {
      "datetime": "2015-07-14T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-14/north-american-anime-manga-releases-july-12-18/.90449",
      "title": "North American Anime, Manga Releases, July 12-18"
    },
    {
      "datetime": "2015-07-17T02:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-16/japan-animation-tv-ranking-july-6-12/.90542",
      "title": "Japan's Animation TV Ranking, July 6-12"
    },
    {
      "datetime": "2015-07-23T22:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-07-23/japan-animation-tv-ranking-july-13-19/.90824",
      "title": "Japan's Animation TV Ranking, July 13-19"
    },
    {
      "datetime": "2015-08-06T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-08-06/japan-animation-tv-ranking-july-27-august-2/.91383",
      "title": "Japan's Animation TV Ranking, July 27-August 2"
    },
    {
      "datetime": "2015-08-09T06:26:59Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-08-09/a-lull-in-the-sea-captain-earth-released-monday/.91449",
      "title": "<i>A Lull in the Sea</i>, <i>Captain Earth</i> Released Monday"
    },
    {
      "datetime": "2015-08-13T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-08-13/japan-animation-tv-ranking-august-3-9/.91639",
      "title": "Japan's Animation TV Ranking, August 3-9"
    },
    {
      "datetime": "2015-08-20T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-08-20/japan-animation-tv-ranking-august-10-16/.91928",
      "title": "Japan's Animation TV Ranking, August 10-16"
    },
    {
      "datetime": "2015-08-28T06:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-08-28/japan-animation-tv-ranking-august-17-23/.92204",
      "title": "Japan's Animation TV Ranking, August 17-23"
    },
    {
      "datetime": "2015-09-01T09:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-01/japan-animation-dvd-ranking-august-24-30/.92378",
      "title": "Japan's Animation DVD Ranking, August 24-30"
    },
    {
      "datetime": "2015-09-01T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-01/north-american-anime-manga-releases-august-30-september-5/.92400",
      "title": "North American Anime, Manga Releases, August 30-September 5"
    },
    {
      "datetime": "2015-09-04T23:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-04/japan-animation-tv-ranking-august-24-30/.92553",
      "title": "Japan's Animation TV Ranking, August 24-30"
    },
    {
      "datetime": "2015-09-09T02:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-08/funimation-to-stream-aria-the-scarlet-ammo-aa-noragami-aragoto/.92697",
      "title": "Funimation to Stream <cite>Aria the Scarlet Ammo AA</cite>, <cite>Noragami Aragoto</cite>"
    },
    {
      "datetime": "2015-09-10T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-10/japan-animation-tv-ranking-august-31-september-6/.92789",
      "title": "Japan's Animation TV Ranking, August 31-September 6"
    },
    {
      "datetime": "2015-09-17T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-17/japan-animation-tv-ranking-september-7-13/.93067",
      "title": "Japan's Animation TV Ranking, September 7-13"
    },
    {
      "datetime": "2015-09-29T09:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-09-29/japan-animation-dvd-ranking-september-21-27/.93539",
      "title": "Japan's Animation DVD Ranking, September 21-27"
    },
    {
      "datetime": "2015-10-08T22:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-08/japan-animation-tv-ranking-september-14-20/.93943",
      "title": "Japan's Animation TV Ranking, September 14-20"
    },
    {
      "datetime": "2015-10-08T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-08/japan-animation-tv-ranking-september-21-27/.93944",
      "title": "Japan's Animation TV Ranking, September 21-27"
    },
    {
      "datetime": "2015-10-09T23:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-09/japan-animation-tv-ranking-september-28-october-4/.94011",
      "title": "Japan's Animation TV Ranking, September 28-October 4"
    },
    {
      "datetime": "2015-10-15T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-15/japan-animation-tv-ranking-october-5-11/.94265",
      "title": "Japan's Animation TV Ranking, October 5-11"
    },
    {
      "datetime": "2015-10-22T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-22/japan-animation-tv-ranking-october-12-18/.94527",
      "title": "Japan's Animation TV Ranking, October 12-18"
    },
    {
      "datetime": "2015-10-27T16:16:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-27/one-piece-12th-set-delayed-to-december/.94695",
      "title": "<i>One Piece</i> 12th Set Delayed to December"
    },
    {
      "datetime": "2015-10-27T20:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-27/north-american-anime-manga-releases-october-25-31/.94705",
      "title": "North American Anime, Manga Releases, October 25-31"
    },
    {
      "datetime": "2015-10-29T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-10-29/japan-animation-tv-ranking-october-19-25/.94792",
      "title": "Japan's Animation TV Ranking, October 19-25"
    },
    {
      "datetime": "2015-11-06T21:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-06/japan-animation-tv-ranking-october-26-november-1/.95102",
      "title": "Japan's Animation TV Ranking, October 26-November 1"
    },
    {
      "datetime": "2015-11-09T02:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-08/one-piece-anime-gets-december-special-featuring-rematch-with-foxy-pirates/.95160",
      "title": "<cite>One Piece</cite> Anime Gets December Special Featuring Rematch With Foxy Pirates"
    },
    {
      "datetime": "2015-11-10T22:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-10/north-american-anime-manga-releases-november-8-14/.95223",
      "title": "North American Anime, Manga Releases, November 8-14"
    },
    {
      "datetime": "2015-11-12T19:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-12/japan-animation-tv-ranking-november-2-8/.95310",
      "title": "Japan's Animation TV Ranking, November 2-8"
    },
    {
      "datetime": "2015-11-19T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-19/japan-animation-tv-ranking-november-9-15/.95566",
      "title": "Japan's Animation TV Ranking, November 9-15"
    },
    {
      "datetime": "2015-11-26T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-11-26/japan-animation-tv-ranking-november-16-22/.95835",
      "title": "Japan's Animation TV Ranking, November 16-22"
    },
    {
      "datetime": "2015-12-03T23:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-12-03/japan-animation-tv-ranking-november-23-29/.96073",
      "title": "Japan's Animation TV Ranking, November 23-29"
    },
    {
      "datetime": "2015-12-11T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-12-11/japan-animation-tv-ranking-november-30-december-6/.96364",
      "title": "Japan's Animation TV Ranking, November 30-December 6"
    },
    {
      "datetime": "2015-12-15T23:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-12-15/north-american-anime-manga-releases-december-13-19/.96563",
      "title": "North American Anime, Manga Releases, December 13-19"
    },
    {
      "datetime": "2015-12-17T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-12-17/japan-animation-tv-ranking-december-7-13/.96639",
      "title": "Japan's Animation TV Ranking, December 7-13"
    },
    {
      "datetime": "2015-12-25T00:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2015-12-24/japan-animation-tv-ranking-december-14-20/.96914",
      "title": "Japan's Animation TV Ranking, December 14-20"
    },
    {
      "datetime": "2016-01-05T07:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-05/japan-animation-dvd-ranking-december-21-27/.97218",
      "title": "Japan's Animation DVD Ranking, December 21-27"
    },
    {
      "datetime": "2016-01-06T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-06/japan-animation-dvd-ranking-december-28-january-3/.97264",
      "title": "Japan's Animation DVD Ranking, December 28-January 3"
    },
    {
      "datetime": "2016-01-07T21:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-07/japan-animation-tv-ranking-december-21-27/.97324",
      "title": "Japan's Animation TV Ranking, December 21-27"
    },
    {
      "datetime": "2016-01-12T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-12/japan-animation-dvd-ranking-january-4-10/.97485",
      "title": "Japan's Animation DVD Ranking, January 4-10"
    },
    {
      "datetime": "2016-01-21T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-21/japan-animation-tv-ranking-january-4-10/.97823",
      "title": "Japan's Animation TV Ranking, January 4-10"
    },
    {
      "datetime": "2016-01-21T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-21/japan-animation-tv-ranking-january-11-17/.97827",
      "title": "Japan's Animation TV Ranking, January 11-17"
    },
    {
      "datetime": "2016-01-26T21:50:14Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-26/north-american-anime-manga-releases-january-24-30/.97996",
      "title": "North American Anime, Manga Releases, January 24-30"
    },
    {
      "datetime": "2016-01-29T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-01-29/japan-animation-tv-ranking-january-18-24/.98136",
      "title": "Japan's Animation TV Ranking, January 18-24"
    },
    {
      "datetime": "2016-02-04T21:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-02-04/japan-animation-tv-ranking-january-25-31/.98334",
      "title": "Japan's Animation TV Ranking, January 25-31"
    },
    {
      "datetime": "2016-02-09T09:00:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-02-09/japan-animation-dvd-ranking-february-1-7/.98494",
      "title": "Japan's Animation DVD Ranking, February 1-7"
    },
    {
      "datetime": "2016-02-18T22:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-02-18/japan-animation-tv-ranking-february-8-14/.98846",
      "title": "Japan's Animation TV Ranking, February 8-14"
    },
    {
      "datetime": "2016-02-25T23:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-02-25/japan-animation-tv-ranking-february-15-21/.99093",
      "title": "Japan's Animation TV Ranking, February 15-21"
    },
    {
      "datetime": "2016-03-04T00:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-03-03/japan-animation-tv-ranking-february-22-28/.99375",
      "title": "Japan's Animation TV Ranking, February 22-28"
    },
    {
      "datetime": "2016-03-10T23:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-03-10/japan-animation-tv-ranking-february-29-march-6/.99641",
      "title": "Japan's Animation TV Ranking, February 29-March 6"
    },
    {
      "datetime": "2016-03-22T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-03-22/north-american-anime-manga-releases-march-20-26/.100129",
      "title": "North American Anime, Manga Releases, March 20-26"
    },
    {
      "datetime": "2016-03-24T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-03-24/japan-animation-tv-ranking-march-14-20/.100221",
      "title": "Japan's Animation TV Ranking, March 14-20"
    },
    {
      "datetime": "2016-03-31T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-03-31/japan-animation-tv-ranking-march-21-27/.100512",
      "title": "Japan's Animation TV Ranking, March 21-27"
    },
    {
      "datetime": "2016-04-01T20:16:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-01/funimation-to-stream-endride-kumamiko-shonen-maid-and-you-thought-there-is-never-a-girl-online-/.100563",
      "title": "Funimation to Stream <cite>Endride, Kumamiko, Shonen Maid, And you thought there is never a girl online?, Sansha Sany\u014d</cite> Anime"
    },
    {
      "datetime": "2016-04-07T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-07/japan-animation-tv-ranking-march-28-april-3/.100796",
      "title": "Japan's Animation TV Ranking, March 28-April 3"
    },
    {
      "datetime": "2016-04-14T21:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-14/japan-animation-tv-ranking-april-4-10/.101069",
      "title": "Japan's Animation TV Ranking, April 4-10"
    },
    {
      "datetime": "2016-04-26T20:25:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-26/north-american-anime-manga-releases-april-24-30/.101496",
      "title": "North American Anime, Manga Releases, April 24-30"
    },
    {
      "datetime": "2016-04-28T23:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-28/japan-animation-tv-ranking-april-18-24/.101585",
      "title": "Japan's Animation TV Ranking, April 18-24"
    },
    {
      "datetime": "2016-04-29T10:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-04-29/one-piece-anime-casts-tessho-genda-as-kaido/.101608",
      "title": "<cite>One Piece</cite> Anime Casts Tessh\u00f4 Genda as Kaido"
    },
    {
      "datetime": "2016-05-16T21:34:45Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-16/japan-animation-tv-ranking-april-11-17/.102195",
      "title": "Japan's Animation TV Ranking, April 11-17"
    },
    {
      "datetime": "2016-05-16T22:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-16/japan-animation-tv-ranking-april-25-may-1/.102196",
      "title": "Japan's Animation TV Ranking, April 25-May 1"
    },
    {
      "datetime": "2016-05-16T22:09:52Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-16/japan-animation-tv-ranking-may-2-8/.102197",
      "title": "Japan's Animation TV Ranking, May 2-8"
    },
    {
      "datetime": "2016-05-20T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-20/japan-animation-tv-ranking-may-9-15/.102339",
      "title": "Japan's Animation TV Ranking, May 9-15"
    },
    {
      "datetime": "2016-05-26T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-26/japan-animation-tv-ranking-may-16-22/.102522",
      "title": "Japan's Animation TV Ranking, May 16-22"
    },
    {
      "datetime": "2016-05-30T04:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-30/mai-otsuki-returns-to-one-piece-to-sing-theme-for-heart-of-gold-special/.102645",
      "title": "Mai Otsuki Returns to <i>One Piece</i> to Sing Theme for '<i>Heart of Gold</i>' Special"
    },
    {
      "datetime": "2016-05-31T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-05-31/north-american-anime-manga-releases-may-29-june-4/.102703",
      "title": "North American Anime, Manga Releases, May 29-June 4"
    },
    {
      "datetime": "2016-06-02T20:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-02/japan-animation-tv-ranking-may-23-29/.102793",
      "title": "Japan's Animation TV Ranking, May 23-29"
    },
    {
      "datetime": "2016-06-03T17:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-03/one-piece-anime-reveals-new-theme-song-new-silver-mine-arc-before-zou-arc-starts/.102820",
      "title": "<cite>One Piece</cite> Anime Reveals New Theme Song, New 'Silver Mine' Arc Before Zou Arc Starts"
    },
    {
      "datetime": "2016-06-06T01:00:50Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-05/one-piece-anime-reveals-zou-arc-visual-more-details-for-silver-mine-arc/.102888",
      "title": "<cite>One Piece</cite> Anime Reveals Zou Arc Visual, More Details for Silver Mine Arc"
    },
    {
      "datetime": "2016-06-09T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-09/japan-animation-tv-ranking-may-30-june-5/.103038",
      "title": "Japan's Animation TV Ranking, May 30-June 5"
    },
    {
      "datetime": "2016-06-17T04:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-17/japan-animation-tv-ranking-june-6-12/.103311",
      "title": "Japan's Animation TV Ranking, June 6-12"
    },
    {
      "datetime": "2016-06-23T17:00:30Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-23/funimation-to-stream-d-gray-man-servamp-tales-of-zestiria-danganronpa-3-love-live-sunshine-first-/.103544",
      "title": "Funimation to Stream <cite>D. Gray-man, Servamp, Tales of Zestiria, Danganronpa 3, Love Live! Sunshine!!, First Love Monster, Handa-kun, Tsukiuta, Time Travel Girl, XechS, Regalia</cite>"
    },
    {
      "datetime": "2016-06-26T18:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-26/japan-animation-tv-ranking-june-13-19/.103556",
      "title": "Japan's Animation TV Ranking, June 13-19"
    },
    {
      "datetime": "2016-06-28T19:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-28/north-american-anime-manga-releases-june-26-july-2/.103728",
      "title": "North American Anime, Manga Releases, June 26-July 2"
    },
    {
      "datetime": "2016-06-30T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-06-30/japan-animation-tv-ranking-june-20-26/.103824",
      "title": "Japan's Animation TV Ranking, June 20-26"
    },
    {
      "datetime": "2016-07-07T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-07/japan-animation-tv-ranking-june-27-july-3/.104068",
      "title": "Japan's Animation TV Ranking, June 27-July 3"
    },
    {
      "datetime": "2016-07-14T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-14/japan-animation-tv-ranking-july-4-10/.104320",
      "title": "Japan's Animation TV Ranking, July 4-10"
    },
    {
      "datetime": "2016-07-19T08:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-19/one-piece-anime-previews-zou-arc-debut-in-video/.104461",
      "title": "<cite>One Piece</cite> Anime Previews Zou Arc's Debut in Video"
    },
    {
      "datetime": "2016-07-22T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-22/japan-animation-tv-ranking-july-11-17/.104600",
      "title": "Japan's Animation TV Ranking, July 11-17"
    },
    {
      "datetime": "2016-07-26T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-26/north-american-anime-manga-releases-july-24-30/.104705",
      "title": "North American Anime, Manga Releases, July 24-30"
    },
    {
      "datetime": "2016-07-29T05:47:31Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-07-29/one-piece-anime-reveals-cast-for-zou-arc-characters-wanda-carrot-pedro/.104785",
      "title": "<cite>One Piece</cite> Anime Reveals Cast for Zou Arc Characters Wanda, Carrot, Pedro"
    },
    {
      "datetime": "2016-08-05T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-08-05/japan-animation-tv-ranking-july-25-31/.105076",
      "title": "Japan's Animation TV Ranking, July 25-31"
    },
    {
      "datetime": "2016-08-11T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-08-11/japan-animation-tv-ranking-august-1-7/.105277",
      "title": "Japan's Animation TV Ranking, August 1-7"
    },
    {
      "datetime": "2016-08-25T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-08-25/japan-animation-tv-ranking-august-15-21/.105772",
      "title": "Japan's Animation TV Ranking, August 15-21"
    },
    {
      "datetime": "2016-08-30T09:15:39Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-08-30/japan-animation-dvd-ranking-august-22-28/.105910",
      "title": "Japan's Animation DVD Ranking, August 22-28"
    },
    {
      "datetime": "2016-09-01T21:44:49Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-01/japan-animation-tv-ranking-august-22-28/.106020",
      "title": "Japan's Animation TV Ranking, August 22-28"
    },
    {
      "datetime": "2016-09-03T06:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-03/one-piece-anime-casts-takaya-hashi-as-duke-dogstorm/.106072",
      "title": "<cite>One Piece</cite> Anime Casts Takaya Hashi as Duke Dogstorm"
    },
    {
      "datetime": "2016-09-08T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-08/japan-animation-tv-ranking-august-29-september-4/.106258",
      "title": "Japan's Animation TV Ranking, August 29-September 4"
    },
    {
      "datetime": "2016-09-16T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-16/japan-animation-tv-ranking-september-5-11/.106561",
      "title": "Japan's Animation TV Ranking, September 5-11"
    },
    {
      "datetime": "2016-09-20T21:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-20/north-american-anime-manga-releases-september-18-24/.106703",
      "title": "North American Anime, Manga Releases, September 18-24"
    },
    {
      "datetime": "2016-09-27T09:03:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-27/japan-animation-dvd-ranking-september-19-25/.106949",
      "title": "Japan's Animation DVD Ranking, September 19-25"
    },
    {
      "datetime": "2016-09-29T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-09-29/japan-animation-tv-ranking-september-19-25/.107059",
      "title": "Japan's Animation TV Ranking, September 19-25"
    },
    {
      "datetime": "2016-10-01T23:31:47Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-02/digimon-marnie-kingsglaive-released-monday/.107110",
      "title": "<i>Digimon</i>, <i>Marnie</i>, <i>Kingsglaive</i> Released Monday"
    },
    {
      "datetime": "2016-10-06T19:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-06/japan-animation-tv-ranking-september-26-october-2/.107357",
      "title": "Japan's Animation TV Ranking, September 26-October 2"
    },
    {
      "datetime": "2016-10-11T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-11/north-american-anime-manga-releases-october-9-15/.107511",
      "title": "North American Anime, Manga Releases, October 9-15"
    },
    {
      "datetime": "2016-10-13T21:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-13/japan-animation-tv-ranking-october-3-9/.107630",
      "title": "Japan's Animation TV Ranking, October 3-9"
    },
    {
      "datetime": "2016-10-20T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-20/japan-animation-tv-ranking-october-10-16/.107915",
      "title": "Japan's Animation TV Ranking, October 10-16"
    },
    {
      "datetime": "2016-10-27T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-10-27/japan-animation-tv-ranking-october-17-23/.108194",
      "title": "Japan's Animation TV Ranking, October 17-23"
    },
    {
      "datetime": "2016-11-03T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-03/japan-animation-tv-ranking-october-24-30/.108435",
      "title": "Japan's Animation TV Ranking, October 24-30"
    },
    {
      "datetime": "2016-11-08T07:56:48Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-08/japan-animation-dvd-ranking-october-24-30/.108588",
      "title": "Japan's Animation DVD Ranking, October 24-30"
    },
    {
      "datetime": "2016-11-08T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-08/north-american-anime-manga-releases-november-6-12/.108622",
      "title": "North American Anime, Manga Releases, November 6-12"
    },
    {
      "datetime": "2016-11-10T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-10/japan-animation-tv-ranking-october-31-november-6/.108696",
      "title": "Japan's Animation TV Ranking, October 31-November 6"
    },
    {
      "datetime": "2016-11-17T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-17/japan-animation-tv-ranking-november-7-13/.108945",
      "title": "Japan's Animation TV Ranking, November 7-13"
    },
    {
      "datetime": "2016-11-24T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-11-24/japan-animation-tv-ranking-november-14-20/.109165",
      "title": "Japan's Animation TV Ranking, November 14-20"
    },
    {
      "datetime": "2016-12-01T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-01/japan-animation-tv-ranking-november-21-27/.109394",
      "title": "Japan's Animation TV Ranking, November 21-27"
    },
    {
      "datetime": "2016-12-08T22:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-08/japan-animation-tv-ranking-november-28-december-4/.109670",
      "title": "Japan's Animation TV Ranking, November 28-December 4"
    },
    {
      "datetime": "2016-12-09T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-09/one-piece-anime-casts-masashi-ebara-hiroya-ishimaru/.109693",
      "title": "<i>One Piece</i> Anime Casts Masashi Ebara, Hiroya Ishimaru"
    },
    {
      "datetime": "2016-12-13T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-13/north-american-anime-manga-releases-december-11-17/.109867",
      "title": "North American Anime, Manga Releases, December 11-17"
    },
    {
      "datetime": "2016-12-16T00:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-15/japan-animation-tv-ranking-december-5-11/.109969",
      "title": "Japan's Animation TV Ranking, December 5-11"
    },
    {
      "datetime": "2016-12-22T21:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-22/japan-animation-tv-ranking-december-12-18/.110256",
      "title": "Japan's Animation TV Ranking, December 12-18"
    },
    {
      "datetime": "2016-12-29T05:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-29/top-selling-media-franchises-in-japan-2016/.110442",
      "title": "Top-Selling Media Franchises in Japan: 2016"
    },
    {
      "datetime": "2016-12-30T00:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2016-12-29/japan-animation-tv-ranking-december-19-25/.110489",
      "title": "Japan's Animation TV Ranking, December 19-25"
    },
    {
      "datetime": "2017-01-19T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-01-19/japan-animation-tv-ranking-january-2-8/.111236",
      "title": "Japan's Animation TV Ranking, January 2-8"
    },
    {
      "datetime": "2017-01-19T23:01:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-01-19/japan-animation-tv-ranking-january-9-15/.111237",
      "title": "Japan's Animation TV Ranking, January 9-15"
    },
    {
      "datetime": "2017-01-26T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-01-26/japan-animation-tv-ranking-january-16-22/.111510",
      "title": "Japan's Animation TV Ranking, January 16-22"
    },
    {
      "datetime": "2017-02-02T18:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-02/japan-animation-tv-ranking-january-23-29/.111786",
      "title": "Japan's Animation TV Ranking, January 23-29"
    },
    {
      "datetime": "2017-02-09T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-09/japan-animation-tv-ranking-january-30-february-5/.112047",
      "title": "Japan's Animation TV Ranking, January 30-February 5"
    },
    {
      "datetime": "2017-02-14T21:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-14/north-american-anime-manga-releases-february-12-18/.112240",
      "title": "North American Anime, Manga Releases, February 12-18"
    },
    {
      "datetime": "2017-02-17T00:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-16/japan-animation-tv-ranking-february-6-12/.112357",
      "title": "Japan's Animation TV Ranking, February 6-12"
    },
    {
      "datetime": "2017-02-17T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-17/one-piece-anime-casts-kousuke-toriumi-as-adult-stelly/.112385",
      "title": "<cite>One Piece</cite> Anime Casts Kousuke Toriumi as Adult Stelly"
    },
    {
      "datetime": "2017-02-24T01:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-02-23/japan-animation-tv-ranking-february-13-19/.112638",
      "title": "Japan's Animation TV Ranking, February 13-19"
    },
    {
      "datetime": "2017-03-02T07:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-02/one-piece-anime-enters-anime-original-arc-starting-on-march-19/.112883",
      "title": "<cite>One Piece</cite> Anime Enters Anime-Original Arc Starting on March 19"
    },
    {
      "datetime": "2017-03-02T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-02/japan-animation-tv-ranking-february-20-26/.112906",
      "title": "Japan's Animation TV Ranking, February 20-26"
    },
    {
      "datetime": "2017-03-05T03:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-04/one-piece-anime-new-marine-rookie-arc-previewed-in-visuals/.112991",
      "title": "<cite>One Piece</cite> Anime's New 'Marine Rookie' Arc Previewed in Visuals"
    },
    {
      "datetime": "2017-03-09T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-09/japan-animation-tv-ranking-february-27-march-5/.113209",
      "title": "Japan's Animation TV Ranking, February 27-March 5"
    },
    {
      "datetime": "2017-03-10T16:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-10/one-piece-anime-original-marine-rookie-arc-ends-on-april-2/.113258",
      "title": "<cite>One Piece's</cite> Anime-Original 'Marine Rookie' Arc Ends on April 2"
    },
    {
      "datetime": "2017-03-11T03:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-10/toonami-replaces-one-piece-anime-with-tokyo-ghoul-starting-on-march-25/.113290",
      "title": "Toonami Replaces <cite>One Piece</cite> Anime With <cite>Tokyo Ghoul</cite> Starting on March 25"
    },
    {
      "datetime": "2017-03-23T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-23/japan-animation-tv-ranking-march-13-19/.113834",
      "title": "Japan's Animation TV Ranking, March 13-19"
    },
    {
      "datetime": "2017-03-26T09:46:15Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-26/snow-white-with-the-red-hair-released-monday/.113966",
      "title": "<i>Snow White With The Red Hair</i> Released Monday"
    },
    {
      "datetime": "2017-03-30T09:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-30/one-piece-anime-reveals-cast-for-4-vinsmoke-siblings/.114126",
      "title": "<cite>One Piece</cite> Anime Reveals Cast For 4 Vinsmoke Siblings"
    },
    {
      "datetime": "2017-03-30T20:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-03-30/japan-animation-tv-ranking-march-20-26/.114147",
      "title": "Japan's Animation TV Ranking, March 20-26"
    },
    {
      "datetime": "2017-04-06T20:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-04-06/japan-animation-tv-ranking-march-27-april-2/.114480",
      "title": "Japan's Animation TV Ranking, March 27-April 2"
    },
    {
      "datetime": "2017-04-13T18:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-04-13/japan-animation-tv-ranking-april-3-9/.114760",
      "title": "Japan's Animation TV Ranking, April 3-9"
    },
    {
      "datetime": "2017-04-20T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-04-20/miyuki-sawashiro-joins-one-piece-anime-cast-as-pudding/.115043",
      "title": "Miyuki Sawashiro Joins <cite>One Piece</cite> Anime's Cast as Pudding"
    },
    {
      "datetime": "2017-04-23T04:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-04-23/one-piece-reveals-anime-character-designs-for-pudding-big-mom/.115170",
      "title": "<cite>One Piece</cite> Reveals Anime Character Designs for Pudding, Big Mom"
    },
    {
      "datetime": "2017-04-27T23:23:03Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-04-27/japan-animation-tv-ranking-april-17-23/.115404",
      "title": "Japan's Animation TV Ranking, April 17-23"
    },
    {
      "datetime": "2017-05-10T02:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-05-09/japan-animation-tv-ranking-april-24-30/.115895",
      "title": "Japan's Animation TV Ranking, April 24-30"
    },
    {
      "datetime": "2017-05-18T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-05-18/japan-animation-tv-ranking-may-1-7/.116286",
      "title": "Japan's Animation TV Ranking, May 1-7"
    },
    {
      "datetime": "2017-05-23T21:06:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-05-23/north-american-anime-manga-releases-may-21-27/.116502",
      "title": "North American Anime, Manga Releases, May 21-27"
    },
    {
      "datetime": "2017-05-27T07:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-05-27/japan-animation-tv-ranking-may-8-14/.116669",
      "title": "Japan's Animation TV Ranking, May 8-14"
    },
    {
      "datetime": "2017-05-27T08:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-05-27/japan-animation-tv-ranking-may-15-21/.116671",
      "title": "Japan's Animation TV Ranking, May 15-21"
    },
    {
      "datetime": "2017-06-01T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-01/japan-animation-tv-ranking-may-22-28/.116909",
      "title": "Japan's Animation TV Ranking, May 22-28"
    },
    {
      "datetime": "2017-06-08T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-08/japan-animation-tv-ranking-may-29-june-4/.117207",
      "title": "Japan's Animation TV Ranking, May 29-June 4"
    },
    {
      "datetime": "2017-06-13T08:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-13/japan-animation-blu-ray-disc-ranking-june-5-11/.117398",
      "title": "Japan's Animation Blu-ray Disc Ranking, June 5-11"
    },
    {
      "datetime": "2017-06-13T08:41:52Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-13/japan-animation-dvd-ranking-june-5-11/.117400",
      "title": "Japan's Animation DVD Ranking, June 5-11"
    },
    {
      "datetime": "2017-06-15T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-15/japan-animation-tv-ranking-june-5-11/.117538",
      "title": "Japan's Animation TV Ranking, June 5-11"
    },
    {
      "datetime": "2017-06-17T03:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-16/one-piece-anime-casts-hideyuki-hori-as-judge/.117615",
      "title": "<cite>One Piece</cite> Anime Casts Hideyuki Hori as Judge"
    },
    {
      "datetime": "2017-06-21T01:25:36Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-20/north-american-anime-manga-releases-june-18-24/.117776",
      "title": "North American Anime, Manga Releases, June 18-24"
    },
    {
      "datetime": "2017-06-22T06:42:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-22/one-piece-anime-gets-episode-of-east-blue-special-on-august-26/.117827",
      "title": "<cite>One Piece</cite> Anime Gets 'Episode of East Blue' Special on August 26"
    },
    {
      "datetime": "2017-06-22T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-22/japan-animation-tv-ranking-june-12-18/.117871",
      "title": "Japan's Animation TV Ranking, June 12-18"
    },
    {
      "datetime": "2017-06-26T04:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-26/one-piece-episode-of-east-blue-special-visual-unveiled/.117988",
      "title": "<cite>One Piece</cite> 'Episode of East Blue' Special's Visual Unveiled"
    },
    {
      "datetime": "2017-06-30T19:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-06-30/japan-animation-tv-ranking-june-19-25/.118257",
      "title": "Japan's Animation TV Ranking, June 19-25"
    },
    {
      "datetime": "2017-07-07T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-07-07/japan-animation-tv-ranking-june-26-july-2/.118572",
      "title": "Japan's Animation TV Ranking, June 26-July 2"
    },
    {
      "datetime": "2017-07-11T08:40:14Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-07-11/japan-animation-dvd-ranking-july-3-9/.118667",
      "title": "Japan's Animation DVD Ranking, July 3-9"
    },
    {
      "datetime": "2017-07-13T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-07-13/japan-animation-tv-ranking-july-3-9/.118789",
      "title": "Japan's Animation TV Ranking, July 3-9"
    },
    {
      "datetime": "2017-07-21T20:23:33Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-07-21/japan-animation-tv-ranking-july-10-16/.119178",
      "title": "Japan's Animation TV Ranking, July 10-16"
    },
    {
      "datetime": "2017-07-27T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-07-27/japan-animation-tv-ranking-july-17-23/.119404",
      "title": "Japan's Animation TV Ranking, July 17-23"
    },
    {
      "datetime": "2017-08-03T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-03/japan-animation-tv-ranking-july-24-30/.119721",
      "title": "Japan's Animation TV Ranking, July 24-30"
    },
    {
      "datetime": "2017-08-10T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-10/japan-animation-tv-ranking-july-31-august-6/.119980",
      "title": "Japan's Animation TV Ranking, July 31-August 6"
    },
    {
      "datetime": "2017-08-15T21:38:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-15/north-american-anime-manga-releases-august-13-19/.120163",
      "title": "North American Anime, Manga Releases, August 13-19"
    },
    {
      "datetime": "2017-08-17T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-17/japan-animation-tv-ranking-august-7-13/.120256",
      "title": "Japan's Animation TV Ranking, August 7-13"
    },
    {
      "datetime": "2017-08-24T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-24/japan-animation-tv-ranking-august-14-20/.120525",
      "title": "Japan's Animation TV Ranking, August 14-20"
    },
    {
      "datetime": "2017-08-28T03:00:26Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-27/dragon-ball-super-one-piece-tv-specials-teased-in-joint-ad/.120616",
      "title": "<i>Dragon Ball Super, One Piece</i> TV Specials Teased in Joint Ad"
    },
    {
      "datetime": "2017-08-29T11:10:24Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-29/japan-animation-dvd-ranking-august-21-27/.120673",
      "title": "Japan's Animation DVD Ranking, August 21-27"
    },
    {
      "datetime": "2017-08-31T13:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-31/fuji-tv-airs-27-hour-japan-history-special-featuring-one-piece-kochikame-dragon-ball-super-chibi-/.120775",
      "title": "Fuji TV Airs 27-Hour 'Japan's History' Special Featuring <cite>One Piece, Kochikame, Dragon Ball Super, Chibi Maruko-chan</cite> Anime (Updated)"
    },
    {
      "datetime": "2017-08-31T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-08-31/japan-animation-tv-ranking-august-21-27/.120796",
      "title": "Japan's Animation TV Ranking, August 21-27"
    },
    {
      "datetime": "2017-09-05T00:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-04/one-piece-previews-1-hour-special-in-videos/.120938",
      "title": "<cite>One Piece</cite> Previews 1-Hour Special in Videos"
    },
    {
      "datetime": "2017-09-07T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-07/japan-animation-tv-ranking-august-28-september-3/.121078",
      "title": "Japan's Animation TV Ranking, August 28-September 3"
    },
    {
      "datetime": "2017-09-11T06:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-11/one-piece-teases-1-hour-special-with-new-videos/.121185",
      "title": "<cite>One Piece</cite> Teases 1-Hour Special With New Videos"
    },
    {
      "datetime": "2017-09-12T02:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-11/namie-amuro-performs-new-opening-theme-for-one-piece-anime-starting-on-october-1/.121225",
      "title": "Namie Amuro Performs New Opening Theme for <cite>One Piece</cite> Anime Starting on October 1"
    },
    {
      "datetime": "2017-09-17T14:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-17/one-piece-anime-upcoming-1-hour-special-previewed-in-3rd-promo-video/.121465",
      "title": "<cite>One Piece</cite> Anime's Upcoming 1-Hour Special Previewed in 3rd Promo Video"
    },
    {
      "datetime": "2017-09-19T21:15:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-19/north-american-anime-manga-releases-september-17-23/.121577",
      "title": "North American Anime, Manga Releases, September 17-23"
    },
    {
      "datetime": "2017-09-22T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-21/japan-animation-tv-ranking-september-10-16/.121699",
      "title": "Japan's Animation TV Ranking, September 10-16"
    },
    {
      "datetime": "2017-09-25T04:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-25/one-piece-holographic-3dcg-stage-event-premieres-in-2018/.121771",
      "title": "<cite>One Piece</cite> 'Holographic' 3DCG Stage Event Premieres in 2018"
    },
    {
      "datetime": "2017-09-28T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-09-28/japan-animation-tv-ranking-september-18-24/.121997",
      "title": "Japan's Animation TV Ranking, September 18-24"
    },
    {
      "datetime": "2017-10-06T00:42:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-10-05/japan-animation-tv-ranking-september-25-october-1/.122351",
      "title": "Japan's Animation TV Ranking, September 25-October 1"
    },
    {
      "datetime": "2017-10-10T09:20:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-10-10/japan-animation-dvd-ranking-october-2-8/.122523",
      "title": "Japan's Animation DVD Ranking, October 2-8"
    },
    {
      "datetime": "2017-10-10T18:14:26Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-10-10/north-american-anime-manga-releases-october-8-14/.122537",
      "title": "North American Anime, Manga Releases, October 8-14"
    },
    {
      "datetime": "2017-10-20T00:38:36Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-10-19/japan-animation-tv-ranking-october-9-15/.122953",
      "title": "Japan's Animation TV Ranking, October 9-15"
    },
    {
      "datetime": "2017-10-27T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-10-26/japan-animation-tv-ranking-october-16-22/.123264",
      "title": "Japan's Animation TV Ranking, October 16-22"
    },
    {
      "datetime": "2017-11-02T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-11-02/japan-animation-tv-ranking-october-23-29/.123526",
      "title": "Japan's Animation TV Ranking, October 23-29"
    },
    {
      "datetime": "2017-11-09T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-11-09/japan-animation-tv-ranking-october-30-november-5/.123827",
      "title": "Japan's Animation TV Ranking, October 30-November 5"
    },
    {
      "datetime": "2017-11-16T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-11-16/japan-animation-tv-ranking-november-6-12/.124127",
      "title": "Japan's Animation TV Ranking, November 6-12"
    },
    {
      "datetime": "2017-11-23T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-11-23/japan-animation-tv-ranking-november-13-19/.124422",
      "title": "Japan's Animation TV Ranking, November 13-19"
    },
    {
      "datetime": "2017-11-30T22:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-11-30/japan-animation-tv-ranking-november-20-26/.124691",
      "title": "Japan's Animation TV Ranking, November 20-26"
    },
    {
      "datetime": "2017-12-05T22:48:16Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-05/north-american-anime-manga-releases-december-3-9/.124884",
      "title": "North American Anime, Manga Releases, December 3-9"
    },
    {
      "datetime": "2017-12-07T23:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-07/japan-animation-tv-ranking-november-27-december-3/.124973",
      "title": "Japan's Animation TV Ranking, November 27-December 3"
    },
    {
      "datetime": "2017-12-12T09:15:24Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-12/japan-animation-dvd-ranking-december-4-10/.125167",
      "title": "Japan's Animation DVD Ranking, December 4-10"
    },
    {
      "datetime": "2017-12-14T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-14/japan-animation-tv-ranking-december-4-10/.125284",
      "title": "Japan's Animation TV Ranking, December 4-10"
    },
    {
      "datetime": "2017-12-21T19:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-21/japan-animation-tv-ranking-december-11-17/.125592",
      "title": "Japan's Animation TV Ranking, December 11-17"
    },
    {
      "datetime": "2017-12-23T19:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-23/top-selling-media-franchises-in-japan-2017/.125682",
      "title": "Top-Selling Media Franchises in Japan: 2017"
    },
    {
      "datetime": "2017-12-26T09:13:14Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-26/japan-animation-dvd-ranking-december-18-24/.125761",
      "title": "Japan's Animation DVD Ranking, December 18-24"
    },
    {
      "datetime": "2017-12-28T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2017-12-28/japan-animation-tv-ranking-december-18-24/.125861",
      "title": "Japan's Animation TV Ranking, December 18-24"
    },
    {
      "datetime": "2018-01-06T03:15:50Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-05/japan-animation-dvd-ranking-december-25-31/.126118",
      "title": "Japan's Animation DVD Ranking, December 25-31"
    },
    {
      "datetime": "2018-01-15T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-15/japan-animation-tv-ranking-january-1-7/.126464",
      "title": "Japan's Animation TV Ranking, January 1-7"
    },
    {
      "datetime": "2018-01-16T08:42:07Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-16/japan-animation-dvd-ranking-january-1-7/.126477",
      "title": "Japan's Animation DVD Ranking, January 1-7"
    },
    {
      "datetime": "2018-01-19T03:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-18/japan-animation-tv-ranking-january-8-14/.126633",
      "title": "Japan's Animation TV Ranking, January 8-14"
    },
    {
      "datetime": "2018-01-25T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-25/japan-animation-tv-ranking-january-15-21/.126933",
      "title": "Japan's Animation TV Ranking, January 15-21"
    },
    {
      "datetime": "2018-01-30T09:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-01-30/japan-animation-dvd-ranking-january-22-28/.127110",
      "title": "Japan's Animation DVD Ranking, January 22-28"
    },
    {
      "datetime": "2018-02-02T01:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-01/japan-animation-tv-ranking-january-22-28/.127250",
      "title": "Japan's Animation TV Ranking, January 22-28"
    },
    {
      "datetime": "2018-02-05T00:15:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-04/tomokazu-sugita-joins-one-piece-anime-cast-as-katakuri/.127335",
      "title": "Tomokazu Sugita Joins <cite>One Piece</cite> Anime's Cast as Katakuri"
    },
    {
      "datetime": "2018-02-06T08:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-06/japan-animation-dvd-ranking-january-29-february-4/.127441",
      "title": "Japan's Animation DVD Ranking, January 29-February 4"
    },
    {
      "datetime": "2018-02-08T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-08/japan-animation-tv-ranking-january-29-february-4/.127553",
      "title": "Japan's Animation TV Ranking, January 29-February 4"
    },
    {
      "datetime": "2018-02-13T08:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-13/japan-animation-blu-ray-disc-ranking-february-5-11/.127727",
      "title": "Japan's Animation Blu-ray Disc Ranking, February 5-11"
    },
    {
      "datetime": "2018-02-13T09:54:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-13/japan-animation-dvd-ranking-february-5-11/.127729",
      "title": "Japan's Animation DVD Ranking, February 5-11"
    },
    {
      "datetime": "2018-02-15T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-15/japan-animation-tv-ranking-february-5-11/.127848",
      "title": "Japan's Animation TV Ranking, February 5-11"
    },
    {
      "datetime": "2018-02-20T08:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-20/japan-animation-dvd-ranking-february-12-18/.128032",
      "title": "Japan's Animation DVD Ranking, February 12-18"
    },
    {
      "datetime": "2018-02-23T01:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-02-22/japan-animation-tv-ranking-february-12-18/.128131",
      "title": "Japan's Animation TV Ranking, February 12-18"
    },
    {
      "datetime": "2018-03-08T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-03-08/japan-animation-tv-ranking-february-26-march-4/.128729",
      "title": "Japan's Animation TV Ranking, February 26-March 4"
    },
    {
      "datetime": "2018-03-13T09:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-03-13/japan-animation-dvd-ranking-march-5-11/.128923",
      "title": "Japan's Animation DVD Ranking, March 5-11"
    },
    {
      "datetime": "2018-03-20T21:02:45Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-03-20/north-american-anime-manga-releases-march-18-24/.129265",
      "title": "North American Anime, Manga Releases, March 18-24"
    },
    {
      "datetime": "2018-03-23T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-03-23/japan-animation-tv-ranking-march-12-18/.129419",
      "title": "Japan's Animation TV Ranking, March 12-18"
    },
    {
      "datetime": "2018-03-29T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-03-29/japan-animation-tv-ranking-march-19-25/.129692",
      "title": "Japan's Animation TV Ranking, March 19-25"
    },
    {
      "datetime": "2018-04-06T05:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-04-06/japan-animation-tv-ranking-march-26-april-1/.130024",
      "title": "Japan's Animation TV Ranking, March 26-April 1"
    },
    {
      "datetime": "2018-04-10T08:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-04-10/japan-animation-dvd-ranking-april-2-8/.130185",
      "title": "Japan's Animation DVD Ranking, April 2-8"
    },
    {
      "datetime": "2018-04-12T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-04-12/japan-animation-tv-ranking-april-2-8/.130296",
      "title": "Japan's Animation TV Ranking, April 2-8"
    },
    {
      "datetime": "2018-04-20T22:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-04-20/japan-animation-tv-ranking-april-9-15/.130666",
      "title": "Japan's Animation TV Ranking, April 9-15"
    },
    {
      "datetime": "2018-04-26T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-04-26/japan-animation-tv-ranking-april-16-22/.130892",
      "title": "Japan's Animation TV Ranking, April 16-22"
    },
    {
      "datetime": "2018-05-09T17:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-09/japan-animation-tv-ranking-april-23-29/.131155",
      "title": "Japan's Animation TV Ranking, April 23-29"
    },
    {
      "datetime": "2018-05-08T08:53:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-08/japan-animation-dvd-ranking-april-30-may-6/.131311",
      "title": "Japan's Animation DVD Ranking, April 30-May 6"
    },
    {
      "datetime": "2018-05-11T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-11/one-piece-anime-casts-fumi-hirano-as-mother-carmel/.131453",
      "title": "<cite>One Piece</cite> Anime Casts Fumi Hirano as Mother Carmel"
    },
    {
      "datetime": "2018-05-14T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-14/japan-animation-tv-ranking-april-30-may-6/.131554",
      "title": "Japan's Animation TV Ranking, April 30-May 6"
    },
    {
      "datetime": "2018-05-15T21:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-15/north-american-anime-manga-releases-may-13-19/.131603",
      "title": "North American Anime, Manga Releases, May 13-19"
    },
    {
      "datetime": "2018-05-18T16:16:34Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-18/manga-entertainment-summer-schedule/.131723",
      "title": "Manga Entertainment Summer Schedule"
    },
    {
      "datetime": "2018-05-18T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-18/japan-animation-tv-ranking-may-7-13/.131749",
      "title": "Japan's Animation TV Ranking, May 7-13"
    },
    {
      "datetime": "2018-05-18T23:41:37Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-18/one-piece-gets-episode-of-skypeia-anime-special-airing-on-august-25/.131754",
      "title": "<cite>One Piece</cite> Gets <cite>Episode of Skypeia</cite> Anime Special Airing on August 25"
    },
    {
      "datetime": "2018-05-20T04:22:28Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-20/one-piece-episode-of-skypeia-anime-special-previewed-in-video/.131777",
      "title": "<cite>One Piece: Episode of Skypeia</cite> Anime Special Previewed in Video"
    },
    {
      "datetime": "2018-05-25T20:38:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-25/japan-animation-tv-ranking-may-14-20/.132041",
      "title": "Japan's Animation TV Ranking, May 14-20"
    },
    {
      "datetime": "2018-06-01T01:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-05-31/japan-animation-tv-ranking-may-21-27/.132300",
      "title": "Japan's Animation TV Ranking, May 21-27"
    },
    {
      "datetime": "2018-06-07T22:59:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-07/japan-animation-tv-ranking-may-28-june-3/.132594",
      "title": "Japan's Animation TV Ranking, May 28-June 3"
    },
    {
      "datetime": "2018-06-12T09:10:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-12/japan-animation-dvd-ranking-june-4-10/.132801",
      "title": "Japan's Animation DVD Ranking, June 4-10"
    },
    {
      "datetime": "2018-06-15T00:35:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-14/japan-animation-tv-ranking-june-4-10/.132938",
      "title": "Japan's Animation TV Ranking, June 4-10"
    },
    {
      "datetime": "2018-06-21T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-21/japan-animation-tv-ranking-june-11-17/.133240",
      "title": "Japan's Animation TV Ranking, June 11-17"
    },
    {
      "datetime": "2018-06-26T17:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-26/top-selling-animation-in-japan-on-blu-ray-disc-dvd-by-series-2018/.133429",
      "title": "Top-Selling Animation in Japan on Blu-ray Disc/DVD by Series: 2018 (First Half)"
    },
    {
      "datetime": "2018-06-26T19:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-26/top-selling-animation-dvds-in-japan-2018/.133437",
      "title": "Top-Selling Animation DVDs in Japan: 2018 (First Half)"
    },
    {
      "datetime": "2018-06-28T20:59:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-06-28/japan-animation-tv-ranking-june-18-24/.133537",
      "title": "Japan's Animation TV Ranking, June 18-24"
    },
    {
      "datetime": "2018-07-07T10:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-07/japan-animation-tv-ranking-june-25-july-1/.133948",
      "title": "Japan's Animation TV Ranking, June 25-July 1"
    },
    {
      "datetime": "2018-07-13T16:39:31Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-13/funimation-announces-summer-simuldub-premiere-dates/.134234",
      "title": "Funimation Announces Summer SimulDub Premiere Dates"
    },
    {
      "datetime": "2018-07-13T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-13/japan-animation-tv-ranking-july-2-8/.134248",
      "title": "Japan's Animation TV Ranking, July 2-8"
    },
    {
      "datetime": "2018-07-19T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-19/japan-animation-tv-ranking-july-9-15/.134466",
      "title": "Japan's Animation TV Ranking, July 9-15"
    },
    {
      "datetime": "2018-07-27T02:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-26/japan-animation-tv-ranking-july-16-22/.134731",
      "title": "Japan's Animation TV Ranking, July 16-22"
    },
    {
      "datetime": "2018-07-31T10:48:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-07-31/japan-animation-dvd-ranking-july-23-29/.134908",
      "title": "Japan's Animation DVD Ranking, July 23-29"
    },
    {
      "datetime": "2018-08-03T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-02/japan-animation-tv-ranking-july-23-29/.135024",
      "title": "Japan's Animation TV Ranking, July 23-29"
    },
    {
      "datetime": "2018-08-07T08:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-07/japan-animation-dvd-ranking-july-30-august-6/.135182",
      "title": "Japan's Animation DVD Ranking, July 30-August 6"
    },
    {
      "datetime": "2018-08-10T00:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-09/japan-animation-tv-ranking-july-30-august-5/.135308",
      "title": "Japan's Animation TV Ranking, July 30-August 5"
    },
    {
      "datetime": "2018-08-10T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-10/one-piece-anime-recasts-gold-roger-with-masane-tsukayama/.135351",
      "title": "<cite>One Piece</cite> Anime Recasts Gold Roger With Masane Tsukayama"
    },
    {
      "datetime": "2018-08-17T01:59:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-16/japan-animation-tv-ranking-august-6-12/.135564",
      "title": "Japan's Animation TV Ranking, August 6-12"
    },
    {
      "datetime": "2018-08-23T21:01:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-23/japan-animation-tv-ranking-august-13-19/.135846",
      "title": "Japan's Animation TV Ranking, August 13-19"
    },
    {
      "datetime": "2018-08-26T00:47:38Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-25/one-piece-gets-new-anime-film-in-summer-2019-to-celebrate-anime-20th-anniversary/.135920",
      "title": "<cite>One Piece</cite> Gets New Anime Film in Summer 2019 to Celebrate Anime's 20th Anniversary"
    },
    {
      "datetime": "2018-08-28T09:15:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-28/japan-animation-dvd-ranking-august-20-26/.136011",
      "title": "Japan's Animation DVD Ranking, August 20-26"
    },
    {
      "datetime": "2018-08-30T19:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-08-30/japan-animation-tv-ranking-august-20-26/.136133",
      "title": "Japan's Animation TV Ranking, August 20-26"
    },
    {
      "datetime": "2018-09-04T09:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-04/japan-animation-dvd-ranking-august-27-september-2/.136329",
      "title": "Japan's Animation DVD Ranking, August 27-September 2"
    },
    {
      "datetime": "2018-09-06T23:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-06/japan-animation-tv-ranking-august-27-september-2/.136456",
      "title": "Japan's Animation TV Ranking, August 27-September 2"
    },
    {
      "datetime": "2018-09-11T09:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-11/japan-animation-dvd-ranking-september-3-9/.136629",
      "title": "Japan's Animation DVD Ranking, September 3-9"
    },
    {
      "datetime": "2018-09-21T01:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-20/japan-animation-tv-ranking-september-10-16/.137087",
      "title": "Japan's Animation TV Ranking, September 10-16"
    },
    {
      "datetime": "2018-09-25T21:51:48Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-25/north-american-anime-manga-releases-september-23-29/.137294",
      "title": "North American Anime, Manga Releases, September 23-29"
    },
    {
      "datetime": "2018-09-27T04:16:49Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-27/v6-perform-new-opening-theme-for-one-piece-anime-starting-on-october-7/.137355",
      "title": "V6 Perform New Opening Theme for <cite>One Piece</cite> Anime Starting on October 7"
    },
    {
      "datetime": "2018-09-27T18:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-09-27/japan-animation-tv-ranking-september-17-23/.137393",
      "title": "Japan's Animation TV Ranking, September 17-23"
    },
    {
      "datetime": "2018-10-02T16:55:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-02/funimation-announces-fall-simuldub-premiere-dates/.137601",
      "title": "Funimation Announces Fall Simuldub Premiere Dates"
    },
    {
      "datetime": "2018-10-03T06:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-03/japan-animation-dvd-ranking-september-24-30/.137626",
      "title": "Japan's Animation DVD Ranking, September 24-30"
    },
    {
      "datetime": "2018-10-04T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-04/japan-animation-tv-ranking-september-24-30/.137724",
      "title": "Japan's Animation TV Ranking, September 24-30"
    },
    {
      "datetime": "2018-10-09T09:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-09/japan-animation-dvd-ranking-october-1-7/.137912",
      "title": "Japan's Animation DVD Ranking, October 1-7"
    },
    {
      "datetime": "2018-10-11T21:16:40Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-11/japan-animation-tv-ranking-october-1-7/.138042",
      "title": "Japan's Animation TV Ranking, October 1-7"
    },
    {
      "datetime": "2018-10-19T01:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-18/japan-animation-tv-ranking-october-8-14/.138349",
      "title": "Japan's Animation TV Ranking, October 8-14"
    },
    {
      "datetime": "2018-10-25T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-10-25/japan-animation-tv-ranking-october-15-21/.138639",
      "title": "Japan's Animation TV Ranking, October 15-21"
    },
    {
      "datetime": "2018-11-02T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-01/japan-animation-tv-ranking-october-22-28/.138946",
      "title": "Japan's Animation TV Ranking, October 22-28"
    },
    {
      "datetime": "2018-11-08T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-08/japan-animation-tv-ranking-october-29-november-4/.139244",
      "title": "Japan's Animation TV Ranking, October 29-November 4"
    },
    {
      "datetime": "2018-11-13T09:10:23Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-13/japan-animation-dvd-ranking-november-5-11/.139423",
      "title": "Japan's Animation DVD Ranking, November 5-11"
    },
    {
      "datetime": "2018-11-14T05:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-14/north-american-anime-manga-releases-november-11-17/.139444",
      "title": "North American Anime, Manga Releases, November 11-17"
    },
    {
      "datetime": "2018-11-16T03:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-15/japan-animation-tv-ranking-november-5-11/.139547",
      "title": "Japan's Animation TV Ranking, November 5-11"
    },
    {
      "datetime": "2018-11-22T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-22/japan-animation-tv-ranking-november-12-18/.139850",
      "title": "Japan's Animation TV Ranking, November 12-18"
    },
    {
      "datetime": "2018-11-30T04:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-11-29/japan-animation-tv-ranking-november-19-25/.140155",
      "title": "Japan's Animation TV Ranking, November 19-25"
    },
    {
      "datetime": "2018-12-12T00:34:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-11/new-one-piece-stampede-anime-film-opens-in-august-2019/.140669",
      "title": "New <cite>One Piece Stampede</cite> Anime Film Opens in August 2019"
    },
    {
      "datetime": "2018-12-13T22:47:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-13/one-piece-stampede-film-teaser-streamed-in-english/.140778",
      "title": "<cite>One Piece Stampede</cite> Film's Teaser Streamed in English"
    },
    {
      "datetime": "2018-12-13T23:47:21Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-13/japan-animation-tv-ranking-december-3-9/.140779",
      "title": "Japan's Animation TV Ranking, December 3-9"
    },
    {
      "datetime": "2018-12-16T09:05:50Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-16/mob-psycho-100-released-monday/.140844",
      "title": "<i>Mob Psycho 100</i> Released Monday"
    },
    {
      "datetime": "2018-12-20T04:20:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-19/top-selling-animation-in-japan-on-blu-ray-disc-dvd-by-series-2018/.141065",
      "title": "Top-Selling Animation in Japan on Blu-ray Disc/DVD by Series: 2018"
    },
    {
      "datetime": "2018-12-21T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-21/japan-animation-tv-ranking-december-10-16/.141171",
      "title": "Japan's Animation TV Ranking, December 10-16"
    },
    {
      "datetime": "2018-12-28T04:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2018-12-27/japan-animation-tv-ranking-december-17-23/.141387",
      "title": "Japan's Animation TV Ranking, December 17-23"
    },
    {
      "datetime": "2019-01-04T06:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-04/one-piece-stampede-film-reveals-eiichiro-oda-character-designs/.141624",
      "title": "<cite>One Piece Stampede</cite> Film Reveals Eiichiro Oda's Character Designs"
    },
    {
      "datetime": "2019-01-11T08:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-11/v6-member-ken-miyake-makes-tv-anime-voice-acting-debut-in-one-piece/.141924",
      "title": "V6 Member Ken Miyake Makes TV Anime Voice Acting Debut in <cite>One Piece</cite>"
    },
    {
      "datetime": "2019-01-15T09:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-15/japan-animation-dvd-ranking-january-7-13/.142070",
      "title": "Japan's Animation DVD Ranking, January 7-13"
    },
    {
      "datetime": "2019-01-18T00:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-17/japan-animation-tv-ranking-december-31-january-6/.142214",
      "title": "Japan's Animation TV Ranking, December 31-January 6"
    },
    {
      "datetime": "2019-01-19T02:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-18/japan-animation-tv-ranking-january-7-13/.142283",
      "title": "Japan's Animation TV Ranking, January 7-13"
    },
    {
      "datetime": "2019-01-25T00:19:27Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-01-24/japan-animation-tv-ranking-january-14-20/.142523",
      "title": "Japan's Animation TV Ranking, January 14-20"
    },
    {
      "datetime": "2019-02-01T06:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-02-01/japan-animation-tv-ranking-january-21-27/.142853",
      "title": "Japan's Animation TV Ranking, January 21-27"
    },
    {
      "datetime": "2019-02-08T00:32:38Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-02-07/japan-animation-tv-ranking-january-28-february-3/.143132",
      "title": "Japan's Animation TV Ranking, January 28-February 3"
    },
    {
      "datetime": "2019-02-14T15:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-02-14/japan-animation-tv-ranking-february-4-10/.143374",
      "title": "Japan's Animation TV Ranking, February 4-10"
    },
    {
      "datetime": "2019-02-22T05:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-02-22/japan-animation-tv-ranking-february-11-17/.143759",
      "title": "Japan's Animation TV Ranking, February 11-17"
    },
    {
      "datetime": "2019-02-28T08:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-02-28/japan-animation-tv-ranking-february-18-24/.144000",
      "title": "Japan's Animation TV Ranking, February 18-24"
    },
    {
      "datetime": "2019-03-07T07:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-03-07/japan-animation-tv-ranking-february-25-march-3/.144263",
      "title": "Japan's Animation TV Ranking, February 25-March 3"
    },
    {
      "datetime": "2019-03-12T09:40:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-03-12/japan-animation-dvd-ranking-march-4-10/.144447",
      "title": "Japan's Animation DVD Ranking, March 4-10"
    },
    {
      "datetime": "2019-03-21T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-03-21/japanese-anime-tv-ranking-march-11-17/.144798",
      "title": "Japanese Anime TV Ranking, March 11-17"
    },
    {
      "datetime": "2019-03-28T08:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-03-28/japan-animation-tv-ranking-march-18-24/.145104",
      "title": "Japan's Animation TV Ranking, March 18-24"
    },
    {
      "datetime": "2019-04-02T12:33:48Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-02/japan-animation-dvd-ranking-march-25-31/.145306",
      "title": "Japan's Animation DVD Ranking, March 25-31"
    },
    {
      "datetime": "2019-04-09T09:56:51Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-09/japan-animation-dvd-ranking-april-1-7/.145520",
      "title": "Japan's Animation DVD Ranking, April 1-7"
    },
    {
      "datetime": "2019-04-13T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-13/japan-animation-tv-ranking-march-25-31/.145696",
      "title": "Japan's Animation TV Ranking, March 25-31"
    },
    {
      "datetime": "2019-04-13T17:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-13/japan-animation-tv-ranking-april-1-7/.145697",
      "title": "Japan's Animation TV Ranking, April 1-7"
    },
    {
      "datetime": "2019-04-20T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-20/japan-animation-tv-ranking-april-8-14/.145949",
      "title": "Japan's Animation TV Ranking, April 8-14"
    },
    {
      "datetime": "2019-04-21T04:15:01Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-21/ryotaro-okiayu-replaces-late-unsho-ishizuka-as-one-piece-kizaru-borsalino/.145969",
      "title": "Ryotaro Okiayu Replaces Late Unsh\u014d Ishizuka as <cite>One Piece's</cite> Kizaru/Borsalino"
    },
    {
      "datetime": "2019-04-25T09:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-25/japan-animation-tv-ranking-april-15-21/.146106",
      "title": "Japan's Animation TV Ranking, April 15-21"
    },
    {
      "datetime": "2019-04-27T04:55:01Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-27/keiji-fujiwara-voices-admiral-ryokugyu-in-one-piece-anime/.146209",
      "title": "Keiji Fujiwara Voices Admiral Ryokugy\u016b in <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2019-04-30T15:05:54Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-04-30/japan-animation-dvd-ranking-april-22-28/.146289",
      "title": "Japan's Animation DVD Ranking, April 22-28"
    },
    {
      "datetime": "2019-05-07T08:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-07/japan-animation-dvd-ranking-april-29-may-5/.146477",
      "title": "Japan's Animation DVD Ranking, April 29-May 5"
    },
    {
      "datetime": "2019-05-09T10:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-09/japan-animation-tv-ranking-april-22-28/.146523",
      "title": "Japan's Animation TV Ranking, April 22-28"
    },
    {
      "datetime": "2019-05-14T09:21:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-14/japan-animation-dvd-ranking-may-6-12/.146687",
      "title": "Japan's Animation DVD Ranking, May 6-12"
    },
    {
      "datetime": "2019-05-16T06:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-16/japan-animation-tv-ranking-april-29-may-5/.146742",
      "title": "Japan's Animation TV Ranking, April 29-May 5"
    },
    {
      "datetime": "2019-05-20T06:39:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-20/japan-animation-tv-ranking-may-6-12/.146908",
      "title": "Japan's Animation TV Ranking, May 6-12"
    },
    {
      "datetime": "2019-05-24T06:10:44Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-24/japan-animation-tv-ranking-may-13-19/.147056",
      "title": "Japan's Animation TV Ranking, May 13-19"
    },
    {
      "datetime": "2019-05-28T09:35:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-28/japan-animation-dvd-ranking-may-20-26/.147207",
      "title": "Japan's Animation DVD Ranking, May 20-26"
    },
    {
      "datetime": "2019-05-31T08:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-05-31/japan-animation-tv-ranking-may-20-26/.147328",
      "title": "Japan's Animation TV Ranking, May 20-26"
    },
    {
      "datetime": "2019-06-02T03:38:50Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-01/one-piece-anime-previews-wano-kuni-arc-in-video/.147386",
      "title": "<cite>One Piece</cite> Anime Previews Wano Kuni Arc in Video"
    },
    {
      "datetime": "2019-06-06T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-06/japan-animation-tv-ranking-may-27-june-2/.147534",
      "title": "Japan's Animation TV Ranking, May 27-June 2"
    },
    {
      "datetime": "2019-06-10T03:08:48Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-09/one-piece-anime-reveals-visual-new-staff-for-wano-kuni-arc/.147637",
      "title": "<cite>One Piece</cite> Anime Reveals Visual, New Staff for Wano Kuni Arc"
    },
    {
      "datetime": "2019-06-11T09:12:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-11/japan-animation-dvd-ranking-june-3-9/.147727",
      "title": "Japan's Animation DVD Ranking, June 3-9"
    },
    {
      "datetime": "2019-06-13T07:06:31Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-13/japan-animation-tv-ranking-june-3-9/.147784",
      "title": "Japan's Animation TV Ranking, June 3-9"
    },
    {
      "datetime": "2019-06-20T08:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-20/japan-animation-tv-ranking-june-10-16/.148049",
      "title": "Japan's Animation TV Ranking, June 10-16"
    },
    {
      "datetime": "2019-06-27T06:36:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-27/one-piece-stampede-film-reveals-english-subtitled-trailer/.148306",
      "title": "<cite>One Piece Stampede</cite> Film Reveals English-Subtitled Trailer"
    },
    {
      "datetime": "2019-06-27T10:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-27/japan-animation-tv-ranking-june-17-23/.148329",
      "title": "Japan's Animation TV Ranking, June 17-23"
    },
    {
      "datetime": "2019-06-30T15:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-06-30/hiroshi-kitadani-returns-to-one-piece-anime-to-perform-new-opening-theme-song/.148446",
      "title": "Hiroshi Kitadani Returns to <cite>One Piece</cite> Anime to Perform New Opening Theme Song"
    },
    {
      "datetime": "2019-07-11T07:04:40Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-11/japan-animation-tv-ranking-june-24-30/.148883",
      "title": "Japan's Animation TV Ranking, June 24-30"
    },
    {
      "datetime": "2019-07-11T07:12:04Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-11/japan-animation-tv-ranking-july-1-7/.148884",
      "title": "Japan's Animation TV Ranking, July 1-7"
    },
    {
      "datetime": "2019-07-12T15:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-12/megumi-han-mariya-ise-join-one-piece-anime-cast/.148948",
      "title": "Megumi Han, Mariya Ise Join <cite>One Piece</cite> Anime's Cast"
    },
    {
      "datetime": "2019-07-20T04:08:01Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-20/one-piece-tv-anime-episodes-on-july-28-august-4-to-have-original-story-tying-into-new-film/.149165",
      "title": "<cite>One Piece</cite> TV Anime's Episodes on July 28, August 4 to Have Original Story Tying into New Film"
    },
    {
      "datetime": "2019-07-21T08:52:38Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-21/japan-animation-tv-ranking-july-8-14/.149204",
      "title": "Japan's Animation TV Ranking, July 8-14"
    },
    {
      "datetime": "2019-07-27T05:53:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-07-27/japan-animation-tv-ranking-july-15-21/.149413",
      "title": "Japan's Animation TV Ranking, July 15-21"
    },
    {
      "datetime": "2019-08-01T11:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-08-01/japan-animation-tv-ranking-july-22-28/.149578",
      "title": "Japan's Animation TV Ranking, July 22-28"
    },
    {
      "datetime": "2019-08-09T10:32:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-08-09/japan-animation-tv-ranking-july-29-august-4/.149884",
      "title": "Japan's Animation TV Ranking, July 29-August 4"
    },
    {
      "datetime": "2019-08-25T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-08-25/japan-animation-tv-ranking-august-5-11/.150074",
      "title": "Japan's Animation TV Ranking, August 5-11"
    },
    {
      "datetime": "2019-08-25T18:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-08-25/japan-animation-tv-ranking-august-12-18/.150345",
      "title": "Japan's Animation TV Ranking, August 12-18"
    },
    {
      "datetime": "2019-08-30T10:29:56Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-08-30/japan-animation-tv-ranking-august-19-25/.150544",
      "title": "Japan's Animation TV Ranking, August 19-25"
    },
    {
      "datetime": "2019-09-06T11:36:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-09-06/japan-animation-tv-ranking-august-26-september-1/.150805",
      "title": "Japan's Animation TV Ranking, August 26-September 1"
    },
    {
      "datetime": "2019-09-14T08:53:43Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-09-14/japan-animation-tv-ranking-september-2-8/.151104",
      "title": "Japan's Animation TV Ranking, September 2-8"
    },
    {
      "datetime": "2019-09-20T09:44:30Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-09-20/japan-animation-tv-ranking-september-9-15/.151345",
      "title": "Japan's Animation TV Ranking, September 9-15"
    },
    {
      "datetime": "2019-09-27T05:54:16Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-09-27/japan-animation-tv-ranking-september-16-22/.151562",
      "title": "Japan's Animation TV Ranking, September 16-22"
    },
    {
      "datetime": "2019-10-04T08:50:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-10-04/japan-animation-tv-ranking-september-23-29/.151871",
      "title": "Japan's Animation TV Ranking, September 23-29"
    },
    {
      "datetime": "2019-10-11T09:32:26Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-10-11/japan-animation-tv-ranking-september-30-october-6/.152119",
      "title": "Japan's Animation TV Ranking, September 30-October 6"
    },
    {
      "datetime": "2019-10-18T07:36:50Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-10-18/japan-animation-tv-ranking-october-7-13/.152364",
      "title": "Japan's Animation TV Ranking, October 7-13"
    },
    {
      "datetime": "2019-10-21T02:05:15Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-10-20/one-piece-anime-english-dub-to-return-with-episode-575/.152432",
      "title": "<cite>One Piece</cite> Anime's English Dub to Return With Episode 575"
    },
    {
      "datetime": "2019-10-25T11:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-10-25/japan-animation-tv-ranking-october-14-20/.152607",
      "title": "Japan's Animation TV Ranking, October 14-20"
    },
    {
      "datetime": "2019-11-01T11:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-11-01/japan-animation-tv-ranking-october-21-27/.152807",
      "title": "Japan's Animation TV Ranking, October 21-27"
    },
    {
      "datetime": "2019-11-15T07:55:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-11-15/japan-animation-tv-ranking-november-4-10/.153242",
      "title": "Japan's Animation TV Ranking, November 4-10"
    },
    {
      "datetime": "2019-11-22T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-11-22/japan-animation-tv-ranking-november-11-17/.153561",
      "title": "Japan's Animation TV Ranking, November 11-17"
    },
    {
      "datetime": "2019-11-29T12:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-11-29/japan-animation-tv-ranking-november-18-24/.153773",
      "title": "Japan's Animation TV Ranking, November 18-24"
    },
    {
      "datetime": "2019-12-06T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-12-06/japan-animation-tv-ranking-november-25-december-1/.154040",
      "title": "Japan's Animation TV Ranking, November 25-December 1"
    },
    {
      "datetime": "2019-12-13T12:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-12-13/japan-animation-tv-ranking-december-2-8/.154251",
      "title": "Japan's Animation TV Ranking, December 2-8"
    },
    {
      "datetime": "2019-12-20T12:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-12-20/japan-animation-tv-ranking-december-9-15/.154578",
      "title": "Japan's Animation TV Ranking, December 9-15"
    },
    {
      "datetime": "2019-12-23T16:21:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-12-23/top-selling-anime-cd-singles-in-japan-2019/.154701",
      "title": "Top-Selling Anime CD Singles in Japan: 2019"
    },
    {
      "datetime": "2019-12-26T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2019-12-26/japanese-animation-tv-ranking-december-16-22/.154758",
      "title": "Japanese Animation TV Ranking, December 16-22"
    },
    {
      "datetime": "2020-01-17T13:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-01-17/japanese-animation-tv-ranking-december-30-january-5/.155377",
      "title": "Japanese Animation TV Ranking, December 30-January 5"
    },
    {
      "datetime": "2020-01-20T12:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-01-20/japanese-animation-tv-ranking-january-6-12/.155541",
      "title": "Japanese Animation TV Ranking, January 6-12"
    },
    {
      "datetime": "2020-01-24T11:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-01-24/japanese-animation-tv-ranking-january-13-19/.155738",
      "title": "Japanese Animation TV Ranking, January 13-19"
    },
    {
      "datetime": "2020-01-31T12:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-01-31/japanese-animation-tv-ranking-january-20-26/.155960",
      "title": "Japanese Animation TV Ranking, January 20-26"
    },
    {
      "datetime": "2020-02-07T11:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-02-07/japanese-animation-tv-ranking-january-27-february-2/.156208",
      "title": "Japanese Animation TV Ranking, January 27-February 2"
    },
    {
      "datetime": "2020-02-14T13:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-02-14/japanese-animation-tv-ranking-february-3-9/.156391",
      "title": "Japanese Animation TV Ranking, February 3-9"
    },
    {
      "datetime": "2020-02-21T14:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-02-21/japanese-animation-tv-ranking-february-10-16/.156688",
      "title": "Japanese Animation TV Ranking, February 10-16"
    },
    {
      "datetime": "2020-02-24T06:58:18Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-02-24/crunchyroll-expands-one-piece-streaming-to-europe-middle-east-north-africa/.156773",
      "title": "Crunchyroll Expands <cite>One Piece</cite> Streaming to Europe, Middle East, North Africa"
    },
    {
      "datetime": "2020-02-28T13:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-02-28/japanese-animation-tv-ranking-february-17-23/.156943",
      "title": "Japanese Animation TV Ranking, February 17-23"
    },
    {
      "datetime": "2020-03-20T08:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-03-20/japanese-animation-tv-ranking-march-9-15/.157719",
      "title": "Japanese Animation TV Ranking, March 9-15"
    },
    {
      "datetime": "2020-03-27T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-03-27/japanese-animation-tv-ranking-march-16-22/.158004",
      "title": "Japanese Animation TV Ranking, March 16-22"
    },
    {
      "datetime": "2020-04-03T12:32:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-03/japanese-animation-tv-ranking-march-23-29/.158205",
      "title": "Japanese Animation TV Ranking, March 23-29"
    },
    {
      "datetime": "2020-04-10T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-10/japanese-animation-tv-ranking-march-30-april-5/.158451",
      "title": "Japanese Animation TV Ranking, March 30-April 5"
    },
    {
      "datetime": "2020-04-17T11:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-17/japanese-animation-tv-ranking-april-6-12/.158641",
      "title": "Japanese Animation TV Ranking, April 6-12"
    },
    {
      "datetime": "2020-04-20T01:41:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-19/one-piece-anime-delays-new-episodes-due-to-covid-19/.158758",
      "title": "<cite>One Piece</cite> Anime Delays New Episodes Due to COVID-19"
    },
    {
      "datetime": "2020-04-21T06:19:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-21/list-of-shows-films-manga-games-affected-by-covid-19/.158799",
      "title": "List of Shows, Films, Manga, Games Affected by COVID-19 (Updated September 26)"
    },
    {
      "datetime": "2020-04-23T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-23/netflix-streams-one-piece-anime-on-june-12/.158903",
      "title": "Netflix Streams <cite>One Piece</cite> Anime on June 12"
    },
    {
      "datetime": "2020-04-24T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-04-24/japanese-animation-tv-ranking-april-13-19/.158917",
      "title": "Japanese Animation TV Ranking, April 13-19"
    },
    {
      "datetime": "2020-05-02T10:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-05-02/japanese-animation-tv-ranking-april-20-26/.159196",
      "title": "Japanese Animation TV Ranking, April 20-26"
    },
    {
      "datetime": "2020-05-14T07:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-05-14/japanese-animation-tv-ranking-april-27-may-3/.159525",
      "title": "Japanese Animation TV Ranking, April 27-May 3"
    },
    {
      "datetime": "2020-05-20T18:19:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-05-20/funimation-streams-one-piece-stampede-film-for-60-days/.159753",
      "title": "Funimation Streams <cite>One Piece Stampede</cite> Film for 60 Days"
    },
    {
      "datetime": "2020-05-30T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-05-30/japanese-animation-tv-ranking-may-11-17/.160058",
      "title": "Japanese Animation TV Ranking, May 11-17"
    },
    {
      "datetime": "2020-05-30T14:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-05-30/japanese-animation-tv-ranking-may-18-24/.160059",
      "title": "Japanese Animation TV Ranking, May 18-24"
    },
    {
      "datetime": "2020-06-05T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-05/japanese-animation-tv-ranking-may-25-31/.160299",
      "title": "Japanese Animation TV Ranking, May 25-31"
    },
    {
      "datetime": "2020-06-09T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-09/north-american-anime-manga-releases-june-7-13/.160431",
      "title": "North American Anime, Manga Releases, June 7-13"
    },
    {
      "datetime": "2020-06-11T23:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-11/japanese-animation-tv-ranking-june-1-7/.160506",
      "title": "Japanese Animation TV Ranking, June 1-7"
    },
    {
      "datetime": "2020-06-19T04:59:58Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-19/one-piece-digimon-adventure-anime-resume-new-episodes-on-june-28-after-covid-19-delay/.160814",
      "title": "<cite>One Piece, Digimon Adventure:</cite> Anime Resume New Episodes on June 28 After COVID-19 Delay"
    },
    {
      "datetime": "2020-06-19T13:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-19/japanese-animation-tv-ranking-june-8-14/.160824",
      "title": "Japanese Animation TV Ranking, June 8-14"
    },
    {
      "datetime": "2020-06-26T11:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-06-26/japanese-animation-tv-ranking-june-15-21/.161108",
      "title": "Japanese Animation TV Ranking, June 15-21"
    },
    {
      "datetime": "2020-07-03T16:31:31Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-07-03/funimation-to-stream-our-last-crusade-or-the-rise-of-a-new-world-naruto-more-anime/.161389",
      "title": "Funimation to Stream <cite>Our Last Crusade or the Rise of a New World</cite>, <cite>Naruto</cite>, More Anime"
    },
    {
      "datetime": "2020-07-06T08:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-07-06/japanese-animation-tv-ranking-june-22-28/.161479",
      "title": "Japanese Animation TV Ranking, June 22-28"
    },
    {
      "datetime": "2020-07-10T11:35:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-07-10/japanese-animation-tv-ranking-june-29-july-5/.161667",
      "title": "Japanese Animation TV Ranking, June 29-July 5"
    },
    {
      "datetime": "2020-07-16T10:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-07-16/5-member-dance-vocal-group-da-ice-perform-one-piece-anime-new-opening-theme/.161898",
      "title": "5-Member Dance, Vocal Group Da-iCE Perform <cite>One Piece</cite> Anime's New Opening Theme"
    },
    {
      "datetime": "2020-07-17T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-07-17/japanese-animation-tv-ranking-july-6-12/.161947",
      "title": "Japanese Animation TV Ranking, July 6-12"
    },
    {
      "datetime": "2020-08-02T11:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-02/japanese-animation-tv-ranking-july-13-19/.162290",
      "title": "Japanese Animation TV Ranking, July 13-19"
    },
    {
      "datetime": "2020-08-02T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-02/japanese-animation-tv-ranking-july-20-26/.162417",
      "title": "Japanese Animation TV Ranking, July 20-26"
    },
    {
      "datetime": "2020-08-07T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-07/japanese-animation-tv-ranking-july-27-august-2/.162680",
      "title": "Japanese Animation TV Ranking, July 27-August 2"
    },
    {
      "datetime": "2020-08-15T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-15/japanese-animation-tv-ranking-august-3-9/.162929",
      "title": "Japanese Animation TV Ranking, August 3-9"
    },
    {
      "datetime": "2020-08-20T12:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-20/japanese-animation-tv-ranking-august-10-16/.163108",
      "title": "Japanese Animation TV Ranking, August 10-16"
    },
    {
      "datetime": "2020-08-28T11:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-08-28/japanese-animation-tv-ranking-august-17-23/.163401",
      "title": "Japanese Animation TV Ranking, August 17-23"
    },
    {
      "datetime": "2020-09-04T09:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-09-04/japanese-animation-tv-ranking-august-24-30/.163662",
      "title": "Japanese Animation TV Ranking, August 24-30"
    },
    {
      "datetime": "2020-09-08T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-09-08/north-american-anime-manga-releases-september-6-12/.163802",
      "title": "North American Anime, Manga Releases, September 6-12"
    },
    {
      "datetime": "2020-09-11T07:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-09-11/japanese-animation-tv-ranking-august-31-september-6/.163905",
      "title": "Japanese Animation TV Ranking, August 31-September 6"
    },
    {
      "datetime": "2020-09-18T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-09-18/japanese-animation-tv-ranking-september-7-13/.164184",
      "title": "Japanese Animation TV Ranking, September 7-13"
    },
    {
      "datetime": "2020-09-28T08:32:55Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-09-28/japanese-animation-tv-ranking-september-14-20/.164553",
      "title": "Japanese Animation TV Ranking, September 14-20"
    },
    {
      "datetime": "2020-10-02T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-10-02/japanese-animation-tv-ranking-september-21-27/.164812",
      "title": "Japanese Animation TV Ranking, September 21-27"
    },
    {
      "datetime": "2020-10-09T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-10-09/japanese-animation-tv-ranking-september-28-october-4/.165032",
      "title": "Japanese Animation TV Ranking, September 28-October 4"
    },
    {
      "datetime": "2020-10-16T07:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-10-16/japanese-animation-tv-ranking-october-5-11/.165282",
      "title": "Japanese Animation TV Ranking, October 5-11"
    },
    {
      "datetime": "2020-10-23T11:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-10-23/japanese-animation-tv-ranking-october-12-18/.165520",
      "title": "Japanese Animation TV Ranking, October 12-18"
    },
    {
      "datetime": "2020-10-31T07:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-10-31/japanese-animation-tv-ranking-october-19-25/.165792",
      "title": "Japanese Animation TV Ranking, October 19-25"
    },
    {
      "datetime": "2020-11-06T11:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-11-06/japanese-animation-tv-ranking-october-26-november-1/.166031",
      "title": "Japanese Animation TV Ranking, October 26-November 1"
    },
    {
      "datetime": "2020-11-10T22:14:21Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-11-10/north-american-anime-manga-releases-november-8-14/.166213",
      "title": "North American Anime, Manga Releases, November 8-14"
    },
    {
      "datetime": "2020-11-13T12:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-11-13/japanese-animation-tv-ranking-november-2-8/.166294",
      "title": "Japanese Animation TV Ranking, November 2-8"
    },
    {
      "datetime": "2020-11-20T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-11-20/japanese-animation-tv-ranking-november-9-15/.166530",
      "title": "Japanese Animation TV Ranking, November 9-15"
    },
    {
      "datetime": "2020-11-27T17:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-11-27/japanese-animation-tv-ranking-november-16-22/.166772",
      "title": "Japanese Animation TV Ranking, November 16-22"
    },
    {
      "datetime": "2020-12-04T12:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-12-04/japanese-animation-tv-ranking-november-23-29/.167047",
      "title": "Japanese Animation TV Ranking, November 23-29"
    },
    {
      "datetime": "2020-12-11T12:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-12-11/japanese-animation-tv-ranking-november-30-december-6/.167332",
      "title": "Japanese Animation TV Ranking, November 30-December 6"
    },
    {
      "datetime": "2020-12-18T09:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-12-18/japanese-animation-tv-ranking-december-7-13/.167586",
      "title": "Japanese Animation TV Ranking, December 7-13"
    },
    {
      "datetime": "2020-12-25T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2020-12-25/japanese-animation-tv-ranking-december-14-20/.167840",
      "title": "Japanese Animation TV Ranking, December 14-20"
    },
    {
      "datetime": "2021-01-08T22:26:11Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-01-08/north-american-anime-manga-releases-january-3-9/.168143",
      "title": "North American Anime, Manga Releases, January 3-9"
    },
    {
      "datetime": "2021-01-11T23:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-01-11/japanese-animation-tv-ranking-december-21-27/.168217",
      "title": "Japanese Animation TV Ranking, December 21-27"
    },
    {
      "datetime": "2021-01-22T12:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-01-22/japanese-animation-tv-ranking-january-4-10/.168667",
      "title": "Japanese Animation TV Ranking, January 4-10"
    },
    {
      "datetime": "2021-01-29T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-01-29/japanese-animation-tv-ranking-january-11-17/.168939",
      "title": "Japanese Animation TV Ranking, January 11-17"
    },
    {
      "datetime": "2021-02-03T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-03/north-american-anime-manga-releases-january-31-february-6/.169069",
      "title": "North American Anime, Manga Releases, January 31-February 6"
    },
    {
      "datetime": "2021-02-04T16:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-04/japanese-animation-tv-ranking-january-18-24/.169089",
      "title": "Japanese Animation TV Ranking, January 18-24"
    },
    {
      "datetime": "2021-02-05T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-05/japanese-animation-tv-ranking-january-25-31/.169184",
      "title": "Japanese Animation TV Ranking, January 25-31"
    },
    {
      "datetime": "2021-02-12T12:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-12/japanese-animation-tv-ranking-february-1-7/.169415",
      "title": "Japanese Animation TV Ranking, February 1-7"
    },
    {
      "datetime": "2021-02-19T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-19/japanese-animation-tv-ranking-february-8-14/.169684",
      "title": "Japanese Animation TV Ranking, February 8-14"
    },
    {
      "datetime": "2021-02-24T18:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-24/tubi-tv-adds-dr-slump-saint-seiya-hades-one-piece-toriko-slam-dunk-more-anime/.169905",
      "title": "Tubi TV Adds <cite>Dr. Slump, Saint Seiya: Hades, One Piece, Toriko, Slam Dunk,</cite> More Anime"
    },
    {
      "datetime": "2021-02-27T05:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-02-27/japanese-animation-tv-ranking-february-15-21/.170026",
      "title": "Japanese Animation TV Ranking, February 15-21"
    },
    {
      "datetime": "2021-03-05T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-03-05/japanese-animation-tv-ranking-february-22-28/.170278",
      "title": "Japanese Animation TV Ranking, February 22-28"
    },
    {
      "datetime": "2021-03-13T06:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-03-13/japanese-animation-tv-ranking-march-1-7/.170522",
      "title": "Japanese Animation TV Ranking, March 1-7"
    },
    {
      "datetime": "2021-03-23T21:10:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-03-23/north-american-anime-manga-releases-march-21-27/.170986",
      "title": "North American Anime, Manga Releases, March 21-27"
    },
    {
      "datetime": "2021-03-24T17:25:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-03-24/crunchyroll-to-stream-the-slime-diaries-dont-toy-with-me-miss-nagatoro-those-snow-white-notes-fairy-/.171048",
      "title": "Crunchyroll to Stream <cite>The Slime Diaries, 'Don't Toy with Me, Miss Nagatoro,' Those Snow White Notes, Fairy Ranmaru,</cite> More Anime"
    },
    {
      "datetime": "2021-03-29T06:47:18Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-03-29/japanese-animation-tv-ranking-march-15-21/.171250",
      "title": "Japanese Animation TV Ranking, March 15-21"
    },
    {
      "datetime": "2021-04-05T13:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-04-05/japanese-animation-tv-ranking-march-22-28/.171461",
      "title": "Japanese Animation TV Ranking, March 22-28"
    },
    {
      "datetime": "2021-04-11T06:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-04-11/japanese-animation-tv-ranking-march-29-april-4/.171618",
      "title": "Japanese Animation TV Ranking, March 29-April 4"
    },
    {
      "datetime": "2021-04-17T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-04-17/japanese-animation-tv-ranking-april-5-11/.171775",
      "title": "Japanese Animation TV Ranking, April 5-11"
    },
    {
      "datetime": "2021-04-24T21:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-04-24/japanese-animation-tv-ranking-april-12-18/.172040",
      "title": "Japanese Animation TV Ranking, April 12-18"
    },
    {
      "datetime": "2021-05-01T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-01/japanese-animation-tv-ranking-april-19-25/.172295",
      "title": "Japanese Animation TV Ranking, April 19-25"
    },
    {
      "datetime": "2021-05-11T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-11/north-american-anime-manga-releases-may-9-15/.172657",
      "title": "North American Anime, Manga Releases, May 9-15"
    },
    {
      "datetime": "2021-05-15T15:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-15/japanese-animation-tv-ranking-april-26-may-2/.172725",
      "title": "Japanese Animation TV Ranking, April 26-May 2"
    },
    {
      "datetime": "2021-05-13T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-13/crunchyroll-adds-more-one-piece-anime-episodes-to-europe/.172749",
      "title": "Crunchyroll Adds More <cite>One Piece</cite> Anime Episodes to Europe"
    },
    {
      "datetime": "2021-05-19T13:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-19/japanese-animation-tv-ranking-may-3-9/.172939",
      "title": "Japanese Animation TV Ranking, May 3-9"
    },
    {
      "datetime": "2021-05-24T16:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-24/japanese-animation-tv-ranking-may-10-16/.173143",
      "title": "Japanese Animation TV Ranking, May 10-16"
    },
    {
      "datetime": "2021-05-30T01:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-05-29/japanese-animation-tv-ranking-may-17-23/.173303",
      "title": "Japanese Animation TV Ranking, May 17-23"
    },
    {
      "datetime": "2021-06-05T21:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-05/japanese-animation-tv-ranking-may-24-30/.173547",
      "title": "Japanese Animation TV Ranking, May 24-30"
    },
    {
      "datetime": "2021-06-12T23:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-12/japanese-animation-tv-ranking-may-31-june-6/.173821",
      "title": "Japanese Animation TV Ranking, May 31-June 6"
    },
    {
      "datetime": "2021-06-16T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-16/north-american-anime-manga-releases-june-13-19/.174053",
      "title": "North American Anime, Manga Releases, June 13-19"
    },
    {
      "datetime": "2021-06-19T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-19/japanese-animation-tv-ranking-june-7-13/.174131",
      "title": "Japanese Animation TV Ranking, June 7-13"
    },
    {
      "datetime": "2021-06-18T23:35:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-18/funimation-to-stream-the-case-study-of-vanitas-more-anime-for-summer-2021-season/.174155",
      "title": "Funimation to Stream <cite>The Case Study of Vanitas</cite>, More Anime for Summer 2021 Season (Updated)"
    },
    {
      "datetime": "2021-06-22T17:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-22/crunchyroll-to-stream-that-time-i-got-reincarnated-as-a-slime-season-2-im-standing-on-a-million-/.174307",
      "title": "Crunchyroll to Stream <cite>That Time I Got Reincarnated as a Slime Season 2, I'm Standing on a Million Lives Season 2, Girlfriend, Girlfriend, Peach Boy Riverside,</cite> More Anime (Updated)"
    },
    {
      "datetime": "2021-06-26T19:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-06-26/japanese-animation-tv-ranking-june-14-20/.174413",
      "title": "Japanese Animation TV Ranking, June 14-20"
    },
    {
      "datetime": "2021-07-03T15:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-03/japanese-animation-tv-ranking-june-21-27/.174702",
      "title": "Japanese Animation TV Ranking, June 21-27"
    },
    {
      "datetime": "2021-07-06T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-06/north-american-anime-manga-releases-july-4-10/.174863",
      "title": "North American Anime, Manga Releases, July 4-10"
    },
    {
      "datetime": "2021-07-10T13:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-10/japanese-animation-tv-ranking-june-28-july-4/.174959",
      "title": "Japanese Animation TV Ranking, June 28-July 4"
    },
    {
      "datetime": "2021-07-19T07:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-19/japanese-animation-tv-ranking-july-5-11/.175276",
      "title": "Japanese Animation TV Ranking, July 5-11"
    },
    {
      "datetime": "2021-07-27T04:32:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-27/japanese-animation-tv-ranking-july-12-18/.175547",
      "title": "Japanese Animation TV Ranking, July 12-18"
    },
    {
      "datetime": "2021-07-31T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-07-31/japanese-animation-tv-ranking-july-19-25/.175715",
      "title": "Japanese Animation TV Ranking, July 19-25"
    },
    {
      "datetime": "2021-08-07T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-07/japanese-animation-tv-ranking-july-26-august-1/.175996",
      "title": "Japanese Animation TV Ranking, July 26-August 1"
    },
    {
      "datetime": "2021-08-10T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-10/north-american-anime-manga-releases-august-8-14/.176115",
      "title": "North American Anime, Manga Releases, August 8-14"
    },
    {
      "datetime": "2021-08-14T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-14/japanese-animation-tv-ranking-august-2-8/.176193",
      "title": "Japanese Animation TV Ranking, August 2-8"
    },
    {
      "datetime": "2021-08-21T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-21/japanese-animation-tv-ranking-august-9-15/.176462",
      "title": "Japanese Animation TV Ranking, August 9-15"
    },
    {
      "datetime": "2021-08-28T22:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-28/japanese-animation-tv-ranking-august-16-22/.176720",
      "title": "Japanese Animation TV Ranking, August 16-22"
    },
    {
      "datetime": "2021-08-30T20:55:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-08-30/one-piece-anime-casts-saori-hayami-as-yamato/.176833",
      "title": "<cite>One Piece</cite> Anime Casts Saori Hayami as Yamato"
    },
    {
      "datetime": "2021-09-04T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-09-04/japanese-animation-tv-ranking-august-23-29/.176965",
      "title": "Japanese Animation TV Ranking, August 23-29"
    },
    {
      "datetime": "2021-09-07T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-09-07/north-american-anime-manga-releases-september-5-11/.177108",
      "title": "North American Anime, Manga Releases, September 5-11"
    },
    {
      "datetime": "2021-09-11T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-09-11/japanese-animation-tv-ranking-august-30-september-5/.177202",
      "title": "Japanese Animation TV Ranking, August 30-September 5"
    },
    {
      "datetime": "2021-09-18T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-09-18/japanese-animation-tv-ranking-september-6-12/.177443",
      "title": "Japanese Animation TV Ranking, September 6-12"
    },
    {
      "datetime": "2021-09-27T07:19:48Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-09-27/japanese-animation-tv-ranking-september-13-19/.177858",
      "title": "Japanese Animation TV Ranking, September 13-19"
    },
    {
      "datetime": "2021-10-02T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-10-02/japanese-animation-tv-ranking-september-20-26/.178031",
      "title": "Japanese Animation TV Ranking, September 20-26"
    },
    {
      "datetime": "2021-10-09T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-10-09/japanese-animation-tv-ranking-september-27-october-3/.178272",
      "title": "Japanese Animation TV Ranking, September 27-October 3"
    },
    {
      "datetime": "2021-10-16T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-10-16/japanese-animation-tv-ranking-october-4-10/.178499",
      "title": "Japanese Animation TV Ranking, October 4-10"
    },
    {
      "datetime": "2021-10-30T23:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-10-30/japanese-animation-tv-ranking-october-18-24/.178974",
      "title": "Japanese Animation TV Ranking, October 18-24"
    },
    {
      "datetime": "2021-11-04T17:09:44Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-04/crunchyroll-premieres-love-of-kill-the-strongest-sage-with-the-weakest-crest-orient-in-the-land-of-/.179198",
      "title": "Crunchyroll Premieres <cite>Love of Kill, The Strongest Sage With the Weakest Crest, Orient, In the Land of Leadale</cite> Anime at Anime NYC"
    },
    {
      "datetime": "2021-11-06T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-06/japanese-animation-tv-ranking-october-25-31/.179218",
      "title": "Japanese Animation TV Ranking, October 25-31"
    },
    {
      "datetime": "2021-11-09T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-09/north-american-anime-manga-releases-november-7-13/.179402",
      "title": "North American Anime, Manga Releases, November 7-13"
    },
    {
      "datetime": "2021-11-13T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-13/japanese-animation-tv-ranking-november-1-7/.179485",
      "title": "Japanese Animation TV Ranking, November 1-7"
    },
    {
      "datetime": "2021-11-20T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-20/japanese-animation-tv-ranking-november-8-14/.179696",
      "title": "Japanese Animation TV Ranking, November 8-14"
    },
    {
      "datetime": "2021-11-28T00:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-27/japanese-animation-tv-ranking-november-15-21/.179990",
      "title": "Japanese Animation TV Ranking, November 15-21"
    },
    {
      "datetime": "2021-11-28T15:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-28/4-member-rock-band-i-dont-like-mondays-perform-one-piece-anime-new-opening-theme-song/.180021",
      "title": "4-Member Rock Band 'I Don't Like Mondays' Perform <cite>One Piece</cite> Anime's New Opening Theme Song"
    },
    {
      "datetime": "2021-11-28T23:22:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-11-28/inuyasha-season-1-blu-ray-released-monday/.180062",
      "title": "<i>InuYasha</i> Season 1 Blu-ray Released Monday"
    },
    {
      "datetime": "2021-12-04T15:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-04/japanese-animation-tv-ranking-november-22-28/.180237",
      "title": "Japanese Animation TV Ranking, November 22-28"
    },
    {
      "datetime": "2021-12-11T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-11/japanese-animation-tv-ranking-november-29-december-5/.180476",
      "title": "Japanese Animation TV Ranking, November 29-December 5"
    },
    {
      "datetime": "2021-12-14T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-14/north-american-anime-manga-releases-december-12-18/.180618",
      "title": "North American Anime, Manga Releases, December 12-18"
    },
    {
      "datetime": "2021-12-19T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-19/japanese-animation-tv-ranking-december-6-12/.180695",
      "title": "Japanese Animation TV Ranking, December 6-12"
    },
    {
      "datetime": "2021-12-21T18:00:37Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-21/crunchyroll-to-stream-my-dress-up-darling-sabikui-bisco-miss-kuroitsu-from-the-monster-development-/.180874",
      "title": "Crunchyroll to Stream <cite>My Dress-Up Darling, Sabikui Bisco, Miss Kuroitsu from the Monster Development Department,</cite> More Anime"
    },
    {
      "datetime": "2021-12-27T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2021-12-27/japanese-animation-tv-ranking-december-13-19/.181031",
      "title": "Japanese Animation TV Ranking, December 13-19"
    },
    {
      "datetime": "2022-01-04T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-04/north-american-anime-manga-releases-january-2-8/.181218",
      "title": "North American Anime, Manga Releases, January 2-8"
    },
    {
      "datetime": "2022-01-09T02:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-08/japanese-animation-tv-ranking-december-20-26/.181268",
      "title": "Japanese Animation TV Ranking, December 20-26"
    },
    {
      "datetime": "2022-01-19T21:41:08Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-19/one-piece-anime-returns-to-toonami/.181705",
      "title": "<cite>One Piece</cite> Anime Returns to Toonami"
    },
    {
      "datetime": "2022-01-22T17:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-22/japanese-animation-tv-ranking-january-3-9/.181749",
      "title": "Japanese Animation TV Ranking, January 3-9"
    },
    {
      "datetime": "2022-01-22T19:02:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-22/japanese-animation-tv-ranking-january-10-16/.181750",
      "title": "Japanese Animation TV Ranking, January 10-16"
    },
    {
      "datetime": "2022-01-25T13:07:29Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-25/funimation-announces-q2-2022-u.k-home-releases-including-demon-slayer-mugen-train/.181887",
      "title": "Funimation Announces Q2 2022 U.K. Home Releases Including <i>Demon Slayer: Mugen Train</i>"
    },
    {
      "datetime": "2022-01-29T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-01-29/japanese-animation-tv-ranking-january-17-23/.181938",
      "title": "Japanese Animation TV Ranking, January 17-23"
    },
    {
      "datetime": "2022-02-05T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-02-05/japanese-animation-tv-ranking-january-24-30/.182226",
      "title": "Japanese Animation TV Ranking, January 24-30"
    },
    {
      "datetime": "2022-02-12T23:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-02-12/japanese-animation-tv-ranking-january-31-february-6/.182520",
      "title": "Japanese Animation TV Ranking, January 31-February 6"
    },
    {
      "datetime": "2022-02-19T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-02-19/japanese-animation-tv-ranking-february-7-13/.182757",
      "title": "Japanese Animation TV Ranking, February 7-13"
    },
    {
      "datetime": "2022-02-26T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-02-26/japanese-animation-tv-ranking-february-14-20/.182978",
      "title": "Japanese Animation TV Ranking, February 14-20"
    },
    {
      "datetime": "2022-03-06T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-06/japanese-animation-tv-ranking-february-21-27/.183236",
      "title": "Japanese Animation TV Ranking, February 21-27"
    },
    {
      "datetime": "2022-03-11T04:32:53Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-10/toei-animation-hack-affects-one-piece-dragon-quest-adventure-of-dai-delicious-party-precure-digimon-/.183439",
      "title": "Toei Animation Hack Affects <cite>One Piece, Dragon Quest: Adventure of Dai, Delicious Party Precure, Digimon Ghost Game</cite> Anime"
    },
    {
      "datetime": "2022-03-12T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-12/japanese-animation-tv-ranking-february-28-march-6/.183478",
      "title": "Japanese Animation TV Ranking, February 28-March 6"
    },
    {
      "datetime": "2022-03-15T03:39:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-14/one-piece-digimon-ghost-game-will-not-air-new-episodes-on-march-20-after-toei-animation-hack/.183600",
      "title": "<cite>One Piece, Digimon Ghost Game</cite> Will Not Air New Episodes on March 20 After Toei Animation Hack"
    },
    {
      "datetime": "2022-03-16T04:28:18Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-16/funimation-anime-titles-now-listed-under-crunchyroll-for-home-video-in-june/.183666",
      "title": "Funimation's Anime Titles Now Listed Under Crunchyroll for Home Video in June"
    },
    {
      "datetime": "2022-03-28T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-28/japanese-animation-tv-ranking-march-14-20/.183985",
      "title": "Japanese Animation TV Ranking, March 14-20"
    },
    {
      "datetime": "2022-03-30T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-03-30/north-american-anime-manga-releases-march-27-april-2/.184176",
      "title": "North American Anime, Manga Releases, March 27-April 2"
    },
    {
      "datetime": "2022-04-03T11:33:22Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-03/demon-slayer-mugen-train-blu-ray-released-on-monday/.184322",
      "title": "<i>Demon Slayer: Mugen Train</i> Blu-ray Released on Monday"
    },
    {
      "datetime": "2022-04-06T03:36:43Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-05/one-piece-anime-airs-1st-new-episode-since-toei-hack-on-april-17/.184407",
      "title": "<cite>One Piece</cite> Anime Airs 1st New Episode Since Toei Hack on April 17"
    },
    {
      "datetime": "2022-04-08T12:00:02Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-08/nhk-report-toei-animation-hack-was-ransomware-attack/.184466",
      "title": "NHK Report: Toei Animation Hack Was Ransomware Attack"
    },
    {
      "datetime": "2022-04-09T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-09/japanese-animation-tv-ranking-march-21-27/.184484",
      "title": "Japanese Animation TV Ranking, March 21-27"
    },
    {
      "datetime": "2022-04-09T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-09/japanese-animation-tv-ranking-march-28-april-3/.184485",
      "title": "Japanese Animation TV Ranking, March 28-April 3"
    },
    {
      "datetime": "2022-04-12T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-12/north-american-anime-manga-releases-april-10-16/.184570",
      "title": "North American Anime, Manga Releases, April 10-16"
    },
    {
      "datetime": "2022-04-16T14:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-16/japanese-animation-tv-ranking-april-4-10/.184694",
      "title": "Japanese Animation TV Ranking, April 4-10"
    },
    {
      "datetime": "2022-04-22T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-22/japanese-animation-tv-ranking-april-11-17/.184873",
      "title": "Japanese Animation TV Ranking, April 11-17"
    },
    {
      "datetime": "2022-04-30T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-04-30/japanese-animation-tv-ranking-april-18-24/.185135",
      "title": "Japanese Animation TV Ranking, April 18-24"
    },
    {
      "datetime": "2022-05-15T10:27:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-05-15/second-girls-und-panzer-das-finale-blu-ray-released-monday/.185596",
      "title": "Second <i>Girls und Panzer das Finale</i> Blu-ray Released Monday (Updated)"
    },
    {
      "datetime": "2022-05-13T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-05-13/japanese-animation-tv-ranking-april-25-may-1/.185629",
      "title": "Japanese Animation TV Ranking, April 25-May 1"
    },
    {
      "datetime": "2022-05-20T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-05-20/japanese-animation-tv-ranking-may-2-8/.185860",
      "title": "Japanese Animation TV Ranking, May 2-8"
    },
    {
      "datetime": "2022-05-28T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-05-28/japanese-animation-tv-ranking-may-9-15/.186059",
      "title": "Japanese Animation TV Ranking, May 9-15"
    },
    {
      "datetime": "2022-05-28T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-05-28/japanese-animation-tv-ranking-may-16-22/.186060",
      "title": "Japanese Animation TV Ranking, May 16-22"
    },
    {
      "datetime": "2022-06-03T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-03/japanese-animation-tv-ranking-may-23-29/.186263",
      "title": "Japanese Animation TV Ranking, May 23-29"
    },
    {
      "datetime": "2022-06-08T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-08/north-american-anime-manga-releases-june-5-11/.186430",
      "title": "North American Anime, Manga Releases, June 5-11"
    },
    {
      "datetime": "2022-06-19T21:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-19/japanese-animation-tv-ranking-may-30-june-5/.186829",
      "title": "Japanese Animation TV Ranking, May 30-June 5"
    },
    {
      "datetime": "2022-06-19T23:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-19/japanese-animation-tv-ranking-june-6-12/.186833",
      "title": "Japanese Animation TV Ranking, June 6-12"
    },
    {
      "datetime": "2022-06-22T18:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-22/crunchyroll-announces-release-schedule-for-summer-2022-anime-season/.186951",
      "title": "Crunchyroll Announces Release Schedule for Summer 2022 Anime Season"
    },
    {
      "datetime": "2022-06-25T23:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-25/japanese-animation-tv-ranking-june-13-19/.186998",
      "title": "Japanese Animation TV Ranking, June 13-19"
    },
    {
      "datetime": "2022-06-26T09:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-06-26/belle-future-boy-conan-in-spectre-released-monday/.187038",
      "title": "<cite>Belle, Future Boy Conan, In/Spectre</cite> Released Monday (Updated)"
    },
    {
      "datetime": "2022-07-04T11:45:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-07-04/japanese-animation-tv-ranking-june-20-26/.187363",
      "title": "Japanese Animation TV Ranking, June 20-26"
    },
    {
      "datetime": "2022-07-05T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-07-05/north-american-anime-manga-releases-july-3-9/.187423",
      "title": "North American Anime, Manga Releases, July 3-9"
    },
    {
      "datetime": "2022-07-09T07:35:25Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-07-09/japanese-animation-tv-ranking-june-27-july-3/.187533",
      "title": "Japanese Animation TV Ranking, June 27-July 3"
    },
    {
      "datetime": "2022-07-16T05:18:34Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-07-16/japanese-animation-tv-ranking-july-4-10/.187685",
      "title": "Japanese Animation TV Ranking, July 4-10"
    },
    {
      "datetime": "2022-07-23T06:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-07-23/japanese-animation-tv-ranking-july-11-17/.187913",
      "title": "Japanese Animation TV Ranking, July 11-17"
    },
    {
      "datetime": "2022-08-02T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-02/japanese-animation-tv-ranking-july-18-24/.188147",
      "title": "Japanese Animation TV Ranking, July 18-24"
    },
    {
      "datetime": "2022-08-03T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-03/north-american-anime-manga-releases-july-31-august-6/.188295",
      "title": "North American Anime, Manga Releases, July 31-August 6"
    },
    {
      "datetime": "2022-08-04T17:02:16Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-04/one-piece-tv-anime-airs-tie-in-prologue-to-film-red/.188365",
      "title": "<cite>One Piece</cite> TV Anime Airs Tie-In Prologue to <cite>Film Red</cite>"
    },
    {
      "datetime": "2022-08-11T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-11/japanese-animation-tv-ranking-july-25-31/.188388",
      "title": "Japanese Animation TV Ranking, July 25-31"
    },
    {
      "datetime": "2022-08-14T06:17:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-14/new-one-piece-standard-seraph-of-the-end-released-monday/.188646",
      "title": "New <i>One Piece</i>, Standard <i>Seraph of the End </i>  Released Monday (Updated)"
    },
    {
      "datetime": "2022-08-16T19:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-16/japanese-animation-tv-ranking-august-1-7/.188671",
      "title": "Japanese Animation TV Ranking, August 1-7"
    },
    {
      "datetime": "2022-08-20T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-20/japanese-animation-tv-ranking-august-8-14/.188834",
      "title": "Japanese Animation TV Ranking, August 8-14"
    },
    {
      "datetime": "2022-08-26T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-08-26/japanese-animation-tv-ranking-august-15-21/.189003",
      "title": "Japanese Animation TV Ranking, August 15-21"
    },
    {
      "datetime": "2022-09-03T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-03/japanese-animation-tv-ranking-august-22-28/.189240",
      "title": "Japanese Animation TV Ranking, August 22-28"
    },
    {
      "datetime": "2022-09-10T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-10/japanese-animation-tv-ranking-august-29-september-4/.189472",
      "title": "Japanese Animation TV Ranking, August 29-September 4"
    },
    {
      "datetime": "2022-09-17T06:09:11Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-17/japanese-animation-tv-ranking-september-5-11/.189810",
      "title": "Japanese Animation TV Ranking, September 5-11"
    },
    {
      "datetime": "2022-09-21T17:14:05Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-21/crunchyroll-announces-release-schedule-for-fall-2022-anime-season/.190001",
      "title": "Crunchyroll Announces Release Schedule for Fall 2022 Anime Season (Updated)"
    },
    {
      "datetime": "2022-09-25T07:56:15Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-25/my-hero-academia-the-movie-world-heroes-mission-released-on-monday/.190128",
      "title": "<i>My Hero Academia THE MOVIE: World Heroes' Mission</i> Released on Monday"
    },
    {
      "datetime": "2022-09-27T07:33:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-09-27/japanese-animation-tv-ranking-september-12-18/.190231",
      "title": "Japanese Animation TV Ranking, September 12-18"
    },
    {
      "datetime": "2022-10-01T06:10:07Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-01/japanese-animation-tv-ranking-september-19-25/.190359",
      "title": "Japanese Animation TV Ranking, September 19-25"
    },
    {
      "datetime": "2022-10-03T20:29:41Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-03/the-irresponsible-captain-tylor-ovas-will-be-released-on-blu-ray-on-november-21/.190462",
      "title": "<i>The Irresponsible Captain Tylor</i> OVAs Will Be Released on Blu-ray on November 21"
    },
    {
      "datetime": "2022-10-05T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-05/north-american-anime-manga-releases-october-2-8/.190502",
      "title": "North American Anime, Manga Releases, October 2-8"
    },
    {
      "datetime": "2022-10-09T03:01:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-08/japanese-animation-tv-ranking-september-26-october-2/.190593",
      "title": "Japanese Animation TV Ranking, September 26-October 2"
    },
    {
      "datetime": "2022-10-15T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-15/japanese-animation-tv-ranking-october-3-9/.190809",
      "title": "Japanese Animation TV Ranking, October 3-9"
    },
    {
      "datetime": "2022-10-22T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-22/japanese-animation-tv-ranking-october-10-16/.191057",
      "title": "Japanese Animation TV Ranking, October 10-16"
    },
    {
      "datetime": "2022-10-24T20:30:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-24/toei-animation-revises-earnings-forecast-due-to-one-piece-dragon-ball-success/.191174",
      "title": "Toei Animation Revises Earnings Forecast Due to <cite>One Piece, Dragon Ball's</cite> Success"
    },
    {
      "datetime": "2022-10-29T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-10-29/japanese-animation-tv-ranking-october-17-23/.191306",
      "title": "Japanese Animation TV Ranking, October 17-23"
    },
    {
      "datetime": "2022-11-05T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-11-05/japanese-animation-tv-ranking-october-24-30/.191573",
      "title": "Japanese Animation TV Ranking, October 24-30"
    },
    {
      "datetime": "2022-11-12T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-11-12/japanese-animation-tv-ranking-october-31-november-6/.191789",
      "title": "Japanese Animation TV Ranking, October 31-November 6"
    },
    {
      "datetime": "2022-11-21T06:53:59Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-11-21/japanese-animation-tv-ranking-november-7-13/.192117",
      "title": "Japanese Animation TV Ranking, November 7-13"
    },
    {
      "datetime": "2022-11-28T08:17:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-11-28/japanese-animation-tv-ranking-november-14-20/.192331",
      "title": "Japanese Animation TV Ranking, November 14-20"
    },
    {
      "datetime": "2022-12-03T05:19:33Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-03/japanese-animation-tv-ranking-november-21-27/.192483",
      "title": "Japanese Animation TV Ranking, November 21-27"
    },
    {
      "datetime": "2022-12-10T03:53:16Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-09/japanese-animation-tv-ranking-november-28-december-4/.192757",
      "title": "Japanese Animation TV Ranking, November 28-December 4"
    },
    {
      "datetime": "2022-12-14T18:35:15Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-14/crunchyroll-announces-release-schedule-for-winter-2023-anime-season/.192925",
      "title": "Crunchyroll Announces Release Schedule for Winter 2023 Anime Season (Updated)"
    },
    {
      "datetime": "2022-12-16T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-16/japanese-animation-tv-ranking-december-5-11/.192987",
      "title": "Japanese Animation TV Ranking, December 5-11"
    },
    {
      "datetime": "2022-12-18T03:52:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-17/one-piece-film-red-original-character-uta-to-appear-in-one-piece-tv-anime-on-christmas/.193079",
      "title": "<cite>One Piece Film Red</cite> Original Character Uta to Appear in <cite>One Piece</cite> TV Anime on Christmas"
    },
    {
      "datetime": "2022-12-23T13:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2022-12-23/japanese-animation-tv-ranking-december-12-18/.193273",
      "title": "Japanese Animation TV Ranking, December 12-18"
    },
    {
      "datetime": "2023-01-06T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-06/japanese-animation-tv-ranking-december-19-25/.193599",
      "title": "Japanese Animation TV Ranking, December 19-25"
    },
    {
      "datetime": "2023-01-13T10:32:13Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-13/hiro-shimono-joins-cast-of-one-piece-anime/.193775",
      "title": "Hiro Shimono Joins Cast of <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2023-01-19T21:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-19/north-american-anime-manga-releases-january-15-21/.193923",
      "title": "North American Anime, Manga Releases, January 15-21"
    },
    {
      "datetime": "2023-01-20T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-20/japanese-animation-tv-ranking-january-2-8/.194004",
      "title": "Japanese Animation TV Ranking, January 2-8"
    },
    {
      "datetime": "2023-01-20T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-20/japanese-animation-tv-ranking-january-9-15/.194007",
      "title": "Japanese Animation TV Ranking, January 9-15"
    },
    {
      "datetime": "2023-01-28T03:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-27/japanese-animation-tv-ranking-january-16-22/.194228",
      "title": "Japanese Animation TV Ranking, January 16-22"
    },
    {
      "datetime": "2023-01-30T10:51:44Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-01-30/liz-and-the-blue-bird-collectors-blu-ray-released-monday/.194322",
      "title": "<i>Liz and the Blue Bird</i> Collectors Blu-ray Released Monday"
    },
    {
      "datetime": "2023-02-04T10:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-02-04/japanese-animation-tv-ranking-january-23-29/.194519",
      "title": "Japanese Animation TV Ranking, January 23-29"
    },
    {
      "datetime": "2023-02-12T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-02-12/japanese-animation-tv-ranking-january-30-february-5/.194711",
      "title": "Japanese Animation TV Ranking, January 30-February 5"
    },
    {
      "datetime": "2023-02-17T21:00:03Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-02-17/toonami-airs-one-piece-dragon-ball-z-toriko-anime-crossover-on-march-4/.195032",
      "title": "Toonami Airs <cite>One Piece, Dragon Ball Z, Toriko</cite> Anime Crossover on March 4 (Updated)"
    },
    {
      "datetime": "2023-02-18T13:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-02-18/japanese-animation-tv-ranking-february-6-12/.195046",
      "title": "Japanese Animation TV Ranking, February 6-12"
    },
    {
      "datetime": "2023-02-25T09:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-02-25/japanese-animation-tv-ranking-february-13-19/.195301",
      "title": "Japanese Animation TV Ranking, February 13-19"
    },
    {
      "datetime": "2023-03-23T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-03-23/north-american-anime-manga-releases-march-19-25/.196223",
      "title": "North American Anime, Manga Releases, March 19-25"
    },
    {
      "datetime": "2023-03-22T16:03:07Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-03-22/crunchyroll-announces-release-schedule-for-spring-2023-anime-season/.196249",
      "title": "Crunchyroll Announces Release Schedule for Spring 2023 Anime Season"
    },
    {
      "datetime": "2023-03-27T07:43:39Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-03-27/japanese-animation-tv-ranking-march-13-19/.196334",
      "title": "Japanese Animation TV Ranking, March 13-19"
    },
    {
      "datetime": "2023-03-31T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-03-31/japanese-animation-tv-ranking-march-20-26/.196647",
      "title": "Japanese Animation TV Ranking, March 20-26"
    },
    {
      "datetime": "2023-04-08T10:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-04-08/japanese-animation-tv-ranking-march-27-april-2/.196913",
      "title": "Japanese Animation TV Ranking, March 27-April 2"
    },
    {
      "datetime": "2023-04-11T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-04-11/north-american-anime-manga-releases-april-9-15/.196998",
      "title": "North American Anime, Manga Releases, April 9-15"
    },
    {
      "datetime": "2023-04-15T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-04-15/japanese-animation-tv-ranking-april-3-9/.197076",
      "title": "Japanese Animation TV Ranking, April 3-9"
    },
    {
      "datetime": "2023-04-22T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-04-22/japanese-animation-tv-ranking-april-10-16/.197320",
      "title": "Japanese Animation TV Ranking, April 10-16"
    },
    {
      "datetime": "2023-05-03T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-03/japanese-animation-tv-ranking-april-17-23/.197594",
      "title": "Japanese Animation TV Ranking, April 17-23"
    },
    {
      "datetime": "2023-05-11T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-11/japanese-animation-tv-ranking-april-24-30/.197987",
      "title": "Japanese Animation TV Ranking, April 24-30"
    },
    {
      "datetime": "2023-05-18T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-18/japanese-animation-tv-ranking-may-1-7/.198195",
      "title": "Japanese Animation TV Ranking, May 1-7"
    },
    {
      "datetime": "2023-05-25T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-25/japanese-animation-tv-ranking-may-8-14/.198377",
      "title": "Japanese Animation TV Ranking, May 8-14"
    },
    {
      "datetime": "2023-05-27T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-27/japanese-animation-tv-ranking-may-15-21/.198467",
      "title": "Japanese Animation TV Ranking, May 15-21"
    },
    {
      "datetime": "2023-05-31T17:26:30Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-05-31/one-piece-anime-1000th-english-dubbed-episode-gets-world-premiere-event-for-anime-expo/.198651",
      "title": "<cite>One Piece</cite> Anime's 1,000th English-Dubbed Episode Gets World Premiere Event for Anime Expo"
    },
    {
      "datetime": "2023-06-03T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-03/japanese-animation-tv-ranking-may-22-28/.198762",
      "title": "Japanese Animation TV Ranking, May 22-28"
    },
    {
      "datetime": "2023-06-10T18:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-10/japanese-animation-tv-ranking-may-29-june-4/.198963",
      "title": "Japanese Animation TV Ranking, May 29-June 4"
    },
    {
      "datetime": "2023-06-09T15:15:22Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-09/american-animator-henry-thurlow-is-1st-non-japanese-episode-director-for-one-piece-anime/.198985",
      "title": "American Animator Henry Thurlow Is 1st Non-Japanese Episode Director for <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2023-06-13T17:20:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-13/anime-expo-screens-world-premieres-for-undead-murder-farce-bungo-stray-dogs-season-5-anime/.199128",
      "title": "Anime Expo Screens World Premieres for <cite>Undead Murder Farce</cite>, <cite>Bungo Stray Dogs</cite> Season 5 Anime"
    },
    {
      "datetime": "2023-06-17T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-17/japanese-animation-tv-ranking-june-5-11/.199254",
      "title": "Japanese Animation TV Ranking, June 5-11"
    },
    {
      "datetime": "2023-06-24T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-06-24/japanese-animation-tv-ranking-june-12-18/.199534",
      "title": "Japanese Animation TV Ranking, June 12-18"
    },
    {
      "datetime": "2023-07-06T06:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-06/japanese-animation-tv-ranking-june-19-25/.199801",
      "title": "Japanese Animation TV Ranking, June 19-25"
    },
    {
      "datetime": "2023-07-02T13:02:51Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-02/love-after-world-domination-and-the-dawn-of-the-witch-blu-rays-released-on-monday/.199868",
      "title": "<i>Love After World Domination</i> and <i>The Dawn of the Witch</i> Blu-rays Released on Monday"
    },
    {
      "datetime": "2023-07-03T23:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-03/crunchyroll-adds-one-piece-anime-english-dub/.199937",
      "title": "Crunchyroll Adds <cite>One Piece</cite> Anime's English Dub"
    },
    {
      "datetime": "2023-07-06T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-06/north-american-anime-manga-releases-july-2-8/.200039",
      "title": "North American Anime, Manga Releases, July 2-8"
    },
    {
      "datetime": "2023-07-07T10:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-07/japanese-animation-tv-ranking-june-26-july-2/.200048",
      "title": "Japanese Animation TV Ranking, June 26-July 2"
    },
    {
      "datetime": "2023-07-15T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-15/japanese-animation-tv-ranking-july-3-9/.200281",
      "title": "Japanese Animation TV Ranking, July 3-9"
    },
    {
      "datetime": "2023-07-21T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-21/japanese-animation-tv-ranking-july-10-16/.200527",
      "title": "Japanese Animation TV Ranking, July 10-16"
    },
    {
      "datetime": "2023-07-22T08:49:06Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-07-22/one-piece-anime-gets-ending-theme-again-after-17-years/.200560",
      "title": "<cite>One Piece</cite> Anime Gets Ending Theme Again After 17 Years"
    },
    {
      "datetime": "2023-08-05T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-08-05/japanese-animation-tv-ranking-july-24-30/.200974",
      "title": "Japanese Animation TV Ranking, July 24-30"
    },
    {
      "datetime": "2023-08-08T21:01:45Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-08-08/north-american-anime-manga-releases-august-6-12/.201110",
      "title": "North American Anime, Manga Releases, August 6-12"
    },
    {
      "datetime": "2023-08-11T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-08-11/japanese-animation-tv-ranking-july-31-august-6/.201189",
      "title": "Japanese Animation TV Ranking, July 31-August 6"
    },
    {
      "datetime": "2023-08-20T11:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-08-20/japanese-animation-tv-ranking-august-7-13/.201392",
      "title": "Japanese Animation TV Ranking, August 7-13"
    },
    {
      "datetime": "2023-08-28T07:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-08-28/japanese-animation-tv-ranking-august-14-20/.201693",
      "title": "Japanese Animation TV Ranking, August 14-20"
    },
    {
      "datetime": "2023-09-03T09:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-03/japanese-animation-tv-ranking-august-21-27/.201863",
      "title": "Japanese Animation TV Ranking, August 21-27"
    },
    {
      "datetime": "2023-09-03T06:43:39Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-03/non-non-biyori-vacation-blu-ray-released-on-monday/.201911",
      "title": "<i>Non Non Biyori Vacation</i> Blu-ray Released on Monday"
    },
    {
      "datetime": "2023-09-10T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-10/japanese-animation-tv-ranking-august-28-september-3/.202105",
      "title": "Japanese Animation TV Ranking, August 28-September 3"
    },
    {
      "datetime": "2023-09-15T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-15/north-american-anime-manga-releases-september-10-16/.202285",
      "title": "North American Anime, Manga Releases, September 10-16"
    },
    {
      "datetime": "2023-09-24T05:11:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-24/japanese-animation-tv-ranking-september-4-10/.202480",
      "title": "Japanese Animation TV Ranking, September 4-10"
    },
    {
      "datetime": "2023-09-20T16:14:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-20/crunchyroll-announces-release-schedule-for-fall-2023-anime-season/.202573",
      "title": "Crunchyroll Announces Release Schedule for Fall 2023 Anime Season"
    },
    {
      "datetime": "2023-09-25T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-25/japanese-animation-tv-ranking-september-11-17/.202780",
      "title": "Japanese Animation TV Ranking, September 11-17"
    },
    {
      "datetime": "2023-09-30T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-30/japanese-animation-tv-ranking-september-18-24/.202952",
      "title": "Japanese Animation TV Ranking, September 18-24"
    },
    {
      "datetime": "2023-09-29T08:49:47Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-09-29/crunchyroll-adds-one-piece-anime-in-india-launches-upi-payment-option/.202957",
      "title": "Crunchyroll Adds <cite>One Piece</cite> Anime in India; Launches UPI Payment Option"
    },
    {
      "datetime": "2023-10-07T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-07/japanese-animation-tv-ranking-september-25-october-1/.203195",
      "title": "Japanese Animation TV Ranking, September 25-October 1"
    },
    {
      "datetime": "2023-10-13T02:34:38Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-12/one-piece-anime-recasts-admiral-ryokugyu-with-junichi-suwabe/.203368",
      "title": "<cite>One Piece</cite> Anime Recasts Admiral Ryokugyu With Junichi Suwabe"
    },
    {
      "datetime": "2023-10-14T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-14/japanese-animation-tv-ranking-october-2-8/.203380",
      "title": "Japanese Animation TV Ranking, October 2-8"
    },
    {
      "datetime": "2023-10-21T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-21/japanese-animation-tv-ranking-october-9-15/.203628",
      "title": "Japanese Animation TV Ranking, October 9-15"
    },
    {
      "datetime": "2023-10-20T12:16:10Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-20/crunchyroll-adds-english-dub-one-piece-anime-in-india/.203635",
      "title": "Crunchyroll Adds English Dub <cite>One Piece</cite> Anime in India"
    },
    {
      "datetime": "2023-10-29T11:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-10-29/japanese-animation-tv-ranking-october-16-22/.203891",
      "title": "Japanese Animation TV Ranking, October 16-22"
    },
    {
      "datetime": "2023-11-06T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-11-06/japanese-animation-tv-ranking-october-23-29/.204146",
      "title": "Japanese Animation TV Ranking, October 23-29"
    },
    {
      "datetime": "2023-11-13T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-11-13/japanese-animation-tv-ranking-october-30-november-5/.204311",
      "title": "Japanese Animation TV Ranking, October 30-November 5"
    },
    {
      "datetime": "2023-11-20T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-11-20/japanese-animation-tv-ranking-november-6-12/.204636",
      "title": "Japanese Animation TV Ranking, November 6-12"
    },
    {
      "datetime": "2023-11-25T15:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-11-25/japanese-animation-tv-ranking-november-13-19/.204774",
      "title": "Japanese Animation TV Ranking, November 13-19"
    },
    {
      "datetime": "2023-11-26T07:07:56Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-11-26/one-piece-anime-enters-egg-head-arc-on-january-7/.204816",
      "title": "<cite>One Piece</cite> Anime Enters Egg Head Arc on January 7"
    },
    {
      "datetime": "2023-12-04T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-04/japanese-animation-tv-ranking-november-20-26/.205076",
      "title": "Japanese Animation TV Ranking, November 20-26"
    },
    {
      "datetime": "2023-12-09T11:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-09/japanese-animation-tv-ranking-november-27-december-3/.205268",
      "title": "Japanese Animation TV Ranking, November 27-December 3"
    },
    {
      "datetime": "2023-12-13T22:01:20Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-13/north-american-anime-manga-releases-december-10-16/.205391",
      "title": "North American Anime, Manga Releases, December 10-16"
    },
    {
      "datetime": "2023-12-13T19:01:12Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-13/crunchyroll-announces-release-schedule-for-winter-2024-anime-season/.205460",
      "title": "Crunchyroll Announces Release Schedule for Winter 2024 Anime Season"
    },
    {
      "datetime": "2023-12-16T20:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-16/japanese-animation-tv-ranking-december-4-10/.205530",
      "title": "Japanese Animation TV Ranking, December 4-10"
    },
    {
      "datetime": "2023-12-17T09:41:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-17/one-piece-tv-anime-reveals-more-cast-new-theme-songs-for-egg-head-arc/.205617",
      "title": "<cite>One Piece</cite> TV Anime Reveals More Cast, New Theme Songs for Egg Head Arc"
    },
    {
      "datetime": "2023-12-17T09:26:09Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-17/wit-studio-produces-the-one-piece-anime-series-remake-for-netflix/.205618",
      "title": "Wit Studio Produces <cite>The One Piece</cite> Anime Series Remake for Netflix"
    },
    {
      "datetime": "2023-12-22T20:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2023-12-22/japanese-animation-tv-ranking-december-11-17/.205815",
      "title": "Japanese Animation TV Ranking, December 11-17"
    },
    {
      "datetime": "2024-01-04T07:52:47Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-04/japanese-animation-tv-ranking-december-18-24/.206151",
      "title": "Japanese Animation TV Ranking, December 18-24"
    },
    {
      "datetime": "2024-01-10T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-10/north-american-anime-manga-releases-january-7-13/.206297",
      "title": "North American Anime, Manga Releases, January 7-13"
    },
    {
      "datetime": "2024-01-20T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-20/japanese-animation-tv-ranking-january-1-7/.206680",
      "title": "Japanese Animation TV Ranking, January 1-7"
    },
    {
      "datetime": "2024-01-20T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-20/japanese-animation-tv-ranking-january-8-14/.206681",
      "title": "Japanese Animation TV Ranking, January 8-14"
    },
    {
      "datetime": "2024-01-27T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-27/japanese-animation-tv-ranking-january-15-21/.206890",
      "title": "Japanese Animation TV Ranking, January 15-21"
    },
    {
      "datetime": "2024-01-31T17:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-01-31/one-piece-gets-new-heroines-light-novel/.207031",
      "title": "<cite>One Piece</cite> Gets New <cite>Heroines</cite> Light Novel"
    },
    {
      "datetime": "2024-02-03T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-02-03/japanese-animation-tv-ranking-january-22-28/.207133",
      "title": "Japanese Animation TV Ranking, January 22-28"
    },
    {
      "datetime": "2024-02-11T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-02-11/japanese-animation-tv-ranking-january-29-february-4/.207455",
      "title": "Japanese Animation TV Ranking, January 29-February 4"
    },
    {
      "datetime": "2024-02-15T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-02-15/north-american-anime-manga-releases-february-11-17/.207548",
      "title": "North American Anime, Manga Releases, February 11-17"
    },
    {
      "datetime": "2024-02-17T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-02-17/japanese-animation-tv-ranking-february-5-11/.207663",
      "title": "Japanese Animation TV Ranking, February 5-11"
    },
    {
      "datetime": "2024-02-24T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-02-24/japanese-animation-tv-ranking-february-12-18/.207903",
      "title": "Japanese Animation TV Ranking, February 12-18"
    },
    {
      "datetime": "2024-03-02T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-02/japanese-animation-tv-ranking-february-19-25/.208209",
      "title": "Japanese Animation TV Ranking, February 19-25"
    },
    {
      "datetime": "2024-03-09T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-09/japanese-animation-tv-ranking-february-26-march-3/.208436",
      "title": "Japanese Animation TV Ranking, February 26-March 3"
    },
    {
      "datetime": "2024-03-09T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-09/japanese-animation-tv-ranking-february-26-march-3/.208545",
      "title": "Japanese Animation TV Ranking, February 26-March 3"
    },
    {
      "datetime": "2024-03-13T16:48:03Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-13/crunchyroll-announces-release-schedule-for-spring-2024-anime-season/.208709",
      "title": "Crunchyroll Announces Release Schedule for Spring 2024 Anime Season"
    },
    {
      "datetime": "2024-03-30T16:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-30/japanese-animation-tv-ranking-march-11-17/.209349",
      "title": "Japanese Animation TV Ranking, March 11-17"
    },
    {
      "datetime": "2024-03-30T17:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-03-30/japanese-animation-tv-ranking-march-18-24/.209350",
      "title": "Japanese Animation TV Ranking, March 18-24"
    },
    {
      "datetime": "2024-04-06T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-04-06/japanese-animation-tv-ranking-march-25-31/.209578",
      "title": "Japanese Animation TV Ranking, March 25-31"
    },
    {
      "datetime": "2024-04-13T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-04-13/japanese-animation-tv-ranking-april-1-8/.209767",
      "title": "Japanese Animation TV Ranking, April 1-8"
    },
    {
      "datetime": "2024-04-18T11:25:41Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-04-18/cartoon-network-india-teases-one-piece-anime/.209901",
      "title": "Cartoon Network India Teases <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2024-04-20T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-04-20/japanese-animation-tv-ranking-april-8-14/.209971",
      "title": "Japanese Animation TV Ranking, April 8-14"
    },
    {
      "datetime": "2024-04-21T12:27:47Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-04-21/cartoon-network-announces-indian-language-dubs-for-one-piece-anime-wano-arc/.210059",
      "title": "Cartoon Network Announces Indian Language Dubs for <cite>One Piece</cite> Anime's Wano Arc"
    },
    {
      "datetime": "2024-05-08T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-08/north-american-anime-manga-releases-may-5-11/.210550",
      "title": "North American Anime, Manga Releases, May 5-11"
    },
    {
      "datetime": "2024-05-11T09:12:20Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-11/one-piece-anime-wano-arc-reveals-more-hindi-cast/.210606",
      "title": "<cite>One Piece</cite> Anime's Wano Arc Reveals More Hindi Cast"
    },
    {
      "datetime": "2024-05-11T14:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-11/japanese-animation-tv-ranking-april-22-28/.210678",
      "title": "Japanese Animation TV Ranking, April 22-28"
    },
    {
      "datetime": "2024-05-11T15:05:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-11/japanese-animation-tv-ranking-april-29-may-5/.210689",
      "title": "Japanese Animation TV Ranking, April 29-May 5"
    },
    {
      "datetime": "2024-05-18T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-18/japanese-animation-tv-ranking-may-6-12/.210875",
      "title": "Japanese Animation TV Ranking, May 6-12"
    },
    {
      "datetime": "2024-05-25T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-05-25/japanese-animation-tv-ranking-may-13-19/.211142",
      "title": "Japanese Animation TV Ranking, May 13-19"
    },
    {
      "datetime": "2024-06-01T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-01/japanese-animation-tv-ranking-may-20-26/.211358",
      "title": "Japanese Animation TV Ranking, May 20-26"
    },
    {
      "datetime": "2024-06-10T02:47:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-09/one-piece-gets-new-90-second-anime-for-exosphere-at-sphere-in-las-vegas/.211722",
      "title": "<cite>One Piece</cite> Gets New 90-Second Anime for Exosphere at Sphere in Las Vegas"
    },
    {
      "datetime": "2024-06-10T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-10/japanese-animation-tv-ranking-may-27-june-2/.211741",
      "title": "Japanese Animation TV Ranking, May 27-June 2"
    },
    {
      "datetime": "2024-06-15T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-15/japanese-animation-tv-ranking-june-3-9/.211939",
      "title": "Japanese Animation TV Ranking, June 3-9"
    },
    {
      "datetime": "2024-06-22T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-22/japanese-animation-tv-ranking-june-10-16/.212222",
      "title": "Japanese Animation TV Ranking, June 10-16"
    },
    {
      "datetime": "2024-06-30T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-06-30/japanese-animation-tv-ranking-june-17-23/.212498",
      "title": "Japanese Animation TV Ranking, June 17-23"
    },
    {
      "datetime": "2024-07-06T03:31:03Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-07-05/one-piece-tv-anime-english-dub-for-egghead-arc-debuts-on-august-27-on-microsoft-store-september-17-/.212904",
      "title": "<cite>One Piece</cite> TV Anime's English Dub for Egghead Arc Debuts on August 27 on Microsoft Store, September 17 on Crunchyroll"
    },
    {
      "datetime": "2024-07-13T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-07-13/japanese-animation-tv-ranking-june-24-30/.213051",
      "title": "Japanese Animation TV Ranking, June 24-30"
    },
    {
      "datetime": "2024-07-10T16:00:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-07-10/crunchyroll-hosts-lisa-one-piece-concerts-at-comic-con-in-san-diego/.213056",
      "title": "Crunchyroll Hosts LiSA, <i>One Piece</i> Concerts at Comic-Con in San Diego"
    },
    {
      "datetime": "2024-07-14T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-07-14/japanese-animation-tv-ranking-july-1-7/.213186",
      "title": "Japanese Animation TV Ranking, July 1-7"
    },
    {
      "datetime": "2024-07-20T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-07-20/japanese-animation-tv-ranking-july-8-14/.213383",
      "title": "Japanese Animation TV Ranking, July 8-14"
    },
    {
      "datetime": "2024-08-04T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-04/japanese-animation-tv-ranking-july-22-28/.213929",
      "title": "Japanese Animation TV Ranking, July 22-28"
    },
    {
      "datetime": "2024-08-15T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-15/north-american-anime-manga-releases-august-11-17/.214283",
      "title": "North American Anime, Manga Releases, August 11-17"
    },
    {
      "datetime": "2024-08-17T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-17/japanese-animation-tv-ranking-august-5-11/.214364",
      "title": "Japanese Animation TV Ranking, August 5-11"
    },
    {
      "datetime": "2024-08-16T11:10:11Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-16/miyu-irino-takes-over-role-as-sabo-in-one-piece-anime/.214373",
      "title": "Miyu Irino Takes Over Role as Sabo in <cite>One Piece</cite> Anime"
    },
    {
      "datetime": "2024-08-25T18:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-25/japanese-animation-tv-ranking-august-12-18/.214694",
      "title": "Japanese Animation TV Ranking, August 12-18"
    },
    {
      "datetime": "2024-08-31T17:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-08-31/japanese-animation-tv-ranking-august-19-25/.214971",
      "title": "Japanese Animation TV Ranking, August 19-25"
    },
    {
      "datetime": "2024-09-07T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-09-07/japanese-animation-tv-ranking-august-26-september-1/.215214",
      "title": "Japanese Animation TV Ranking, August 26-September 1"
    },
    {
      "datetime": "2024-09-14T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-09-14/japanese-animation-tv-ranking-september-2-8/.215462",
      "title": "Japanese Animation TV Ranking, September 2-8"
    },
    {
      "datetime": "2024-09-18T17:28:08Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-09-18/crunchyroll-announces-release-schedule-for-fall-2024-season/.215719",
      "title": "Crunchyroll Announces Release Schedule for Fall 2024 Season"
    },
    {
      "datetime": "2024-09-22T18:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-09-22/japanese-animation-tv-ranking-september-9-15/.215808",
      "title": "Japanese Animation TV Ranking, September 9-15"
    },
    {
      "datetime": "2024-09-30T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-09-30/japanese-animation-tv-ranking-september-16-22/.216171",
      "title": "Japanese Animation TV Ranking, September 16-22"
    },
    {
      "datetime": "2024-10-03T04:13:45Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-03/one-piece-anime-celebrates-25th-anniversary-with-one-piece-fan-letter-special/.216286",
      "title": "<cite>One Piece</cite> Anime Celebrates 25th Anniversary With <cite>'One Piece Fan Letter'</cite> Special"
    },
    {
      "datetime": "2024-10-05T02:48:35Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-04/one-piece-anime-substitutes-kazuki-yao-with-wataru-takagi-as-jango-voice/.216370",
      "title": "<cite>One Piece</cite> Anime Substitutes Kazuki Yao With Wataru Takagi as Jango's Voice"
    },
    {
      "datetime": "2024-10-05T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-05/japanese-animation-tv-ranking-september-23-29/.216373",
      "title": "Japanese Animation TV Ranking, September 23-29"
    },
    {
      "datetime": "2024-10-06T09:23:36Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-06/gundam-the-witch-from-mercury-u.k-steelbook-blu-rays-are-released-on-monday/.216386",
      "title": "<i>Gundam: The Witch From Mercury</i> U.K. Steelbook Blu-rays Are Released on Monday"
    },
    {
      "datetime": "2024-10-10T18:02:58Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-10/toei-animation-hosts-anime-staff-members-from-one-piece-dragon-ball-daima-digimon-adventure-at-nycc/.216584",
      "title": "Toei Animation Hosts Anime Staff Members from <cite>One Piece</cite>, <cite>Dragon Ball Daima</cite>, <cite>Digimon Adventure</cite> at NYCC"
    },
    {
      "datetime": "2024-10-12T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-12/japanese-animation-tv-ranking-september-30-october-6/.216664",
      "title": "Japanese Animation TV Ranking, September 30-October 6"
    },
    {
      "datetime": "2024-10-13T12:30:20Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-13/one-piece-anime-egghead-arc-resumes-next-april/.216689",
      "title": "<cite>One Piece</cite> Anime's Egghead Arc Resumes Next April"
    },
    {
      "datetime": "2024-10-16T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-16/north-american-anime-manga-releases-october-13-19/.216737",
      "title": "North American Anime, Manga Releases, October 13-19"
    },
    {
      "datetime": "2024-10-20T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-20/japanese-animation-tv-ranking-october-7-13/.216947",
      "title": "Japanese Animation TV Ranking, October 7-13"
    },
    {
      "datetime": "2024-10-21T20:04:21Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-21/one-piece-log-fish-man-island-saga-anime-postponed-to-november-3-due-to-world-series/.217018",
      "title": "<cite>One Piece Log: Fish-Man Island Saga</cite> Anime Postponed to November 3 Due to World Series"
    },
    {
      "datetime": "2024-10-26T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-10-26/japanese-animation-tv-ranking-october-14-20/.217183",
      "title": "Japanese Animation TV Ranking, October 14-20"
    },
    {
      "datetime": "2024-11-05T02:32:35Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-11-04/netflix-adds-one-piece-dragon-ball-z-toriko-anime-crossover-episode/.217513",
      "title": "Netflix Adds <cite>One Piece, Dragon Ball Z, Toriko</cite> Anime Crossover Episode"
    },
    {
      "datetime": "2024-11-09T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-11-09/japanese-animation-tv-ranking-october-28-november-3/.217642",
      "title": "Japanese Animation TV Ranking, October 28-November 3"
    },
    {
      "datetime": "2024-11-16T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-11-16/japanese-animation-tv-ranking-november-4-10/.217894",
      "title": "Japanese Animation TV Ranking, November 4-10"
    },
    {
      "datetime": "2024-11-23T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-11-23/japanese-animation-tv-ranking-november-11-17/.218164",
      "title": "Japanese Animation TV Ranking, November 11-17"
    },
    {
      "datetime": "2024-11-30T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-11-30/japanese-animation-tv-ranking-november-18-24/.218415",
      "title": "Japanese Animation TV Ranking, November 18-24"
    },
    {
      "datetime": "2024-12-02T20:36:07Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-02/one-piece-anime-episodes-to-require-premium-membership-on-crunchyroll/.218510",
      "title": "<cite>One Piece</cite> Anime's Episodes to Require Premium Membership on Crunchyroll"
    },
    {
      "datetime": "2024-12-07T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-07/japanese-animation-tv-ranking-november-25-december-1/.218670",
      "title": "Japanese Animation TV Ranking, November 25-December 1"
    },
    {
      "datetime": "2024-12-08T03:15:24Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-07/kazuki-yao-to-step-down-from-one-piece-franky-role/.218739",
      "title": "Kazuki Yao to Step Down From <cite>One Piece</cite> Franky Role"
    },
    {
      "datetime": "2024-12-12T22:01:46Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-12/north-american-anime-manga-releases-december-8-14/.218853",
      "title": "North American Anime, Manga Releases, December 8-14"
    },
    {
      "datetime": "2024-12-14T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-14/japanese-animation-tv-ranking-december-2-8/.218985",
      "title": "Japanese Animation TV Ranking, December 2-8"
    },
    {
      "datetime": "2024-12-21T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-21/japanese-animation-tv-ranking-december-9-15/.219307",
      "title": "Japanese Animation TV Ranking, December 9-15"
    },
    {
      "datetime": "2024-12-22T08:46:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-22/subaru-kimura-to-take-over-as-franky-in-one-piece/.219402",
      "title": "Subaru Kimura to Take Over as Franky in <cite>One Piece</cite>"
    },
    {
      "datetime": "2024-12-22T09:13:08Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-22/one-piece-anime-returns-on-april-6-airs-in-evening-timeslot/.219406",
      "title": "<cite>One Piece</cite> Anime Returns on April 6, Airs in Evening Timeslot"
    },
    {
      "datetime": "2024-12-28T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2024-12-28/japanese-animation-tv-ranking-december-16-22/.219540",
      "title": "Japanese Animation TV Ranking, December 16-22"
    },
    {
      "datetime": "2025-01-18T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-01-18/japanese-animation-tv-ranking-december-30-january-5/.220143",
      "title": "Japanese Animation TV Ranking, December 30-January 5"
    },
    {
      "datetime": "2025-01-20T09:25:57Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-01-20/one-piece-anime-streams-new-5-minute-original-episode/.220246",
      "title": "<cite>One Piece</cite> Anime Streams New 5-Minute Original Episode"
    },
    {
      "datetime": "2025-01-24T15:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-01-24/crunchyroll-debuts-i-may-be-a-guild-receptionist-anime-english-dub-on-friday/.220418",
      "title": "Crunchyroll Debuts <cite>I May Be a Guild Receptionist</cite> Anime's English Dub on Friday"
    },
    {
      "datetime": "2025-02-01T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-01/japanese-animation-tv-ranking-january-20-26/.220635",
      "title": "Japanese Animation TV Ranking, January 20-26"
    },
    {
      "datetime": "2025-02-05T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-05/north-american-anime-manga-releases-february-2-8/.220804",
      "title": "North American Anime, Manga Releases, February 2-8"
    },
    {
      "datetime": "2025-02-08T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-08/japanese-animation-tv-ranking-january-27-february-2/.220951",
      "title": "Japanese Animation TV Ranking, January 27-February 2"
    },
    {
      "datetime": "2025-02-14T22:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-14/north-american-anime-manga-releases-february-9-15/.221075",
      "title": "North American Anime, Manga Releases, February 9-15"
    },
    {
      "datetime": "2025-02-15T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-15/japanese-animation-tv-ranking-february-3-9/.221217",
      "title": "Japanese Animation TV Ranking, February 3-9"
    },
    {
      "datetime": "2025-02-22T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-02-22/japanese-animation-tv-ranking-february-10-16/.221488",
      "title": "Japanese Animation TV Ranking, February 10-16"
    },
    {
      "datetime": "2025-03-09T16:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-09/japanese-animation-tv-ranking-february-24-march-2/.222118",
      "title": "Japanese Animation TV Ranking, February 24-March 2"
    },
    {
      "datetime": "2025-03-09T09:02:51Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-09/crunchyroll-to-stream-one-piece-anime-new-episodes-simultaneously-on-april-6/.222129",
      "title": "Crunchyroll to Stream <cite>One Piece</cite> Anime New Episodes Simultaneously on April 6"
    },
    {
      "datetime": "2025-03-15T00:15:19Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-14/one-piece-anime-english-subtitled-trailer-previews-egghead-arc-return/.222385",
      "title": "<cite>One Piece</cite> Anime's English-Subtitled Trailer Previews Egghead Arc's Return"
    },
    {
      "datetime": "2025-03-19T17:11:51Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-19/crunchyroll-announces-release-schedule-for-spring-2025-season/.222571",
      "title": "Crunchyroll Announces Release Schedule for Spring 2025 Season"
    },
    {
      "datetime": "2025-03-22T14:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-22/crunchyroll-streams-2-episode-premiere-for-one-piece-anime-return-egghead-recap-special-on-april-5-6/.222670",
      "title": "Crunchyroll Streams 2-Episode Premiere for <cite>One Piece</cite> Anime's Return, Egghead Recap Special on April 5-6"
    },
    {
      "datetime": "2025-03-22T12:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-22/koisuru-one-piece-spinoff-gets-net-anime-while-main-anime-airs-egghead-recap-before-1st-new-episode-/.222711",
      "title": "<cite>Koisuru One Piece</cite> Spinoff Gets Net Anime While Main Anime Airs Egghead Recap Before 1st New Episode on April 5 (Updated)"
    },
    {
      "datetime": "2025-03-24T01:10:16Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-23/one-piece-anime-video-for-egghead-part-2-reveals-new-opening-song/.222790",
      "title": "<cite>One Piece</cite> Anime's Video for Egghead Part 2 Reveals New Opening Song"
    },
    {
      "datetime": "2025-03-25T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-25/japanese-animation-tv-ranking-march-10-16/.222813",
      "title": "Japanese Animation TV Ranking, March 10-16"
    },
    {
      "datetime": "2025-03-28T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-28/north-american-anime-manga-releases-march-23-29/.222870",
      "title": "North American Anime, Manga Releases, March 23-29"
    },
    {
      "datetime": "2025-03-30T20:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-03-30/japanese-animation-tv-ranking-march-17-23/.223032",
      "title": "Japanese Animation TV Ranking, March 17-23"
    },
    {
      "datetime": "2025-04-05T12:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-05/japanese-animation-tv-ranking-march-24-30/.223232",
      "title": "Japanese Animation TV Ranking, March 24-30"
    },
    {
      "datetime": "2025-04-05T05:46:35Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-05/crunchyroll-streams-one-piece-anime-egghead-arc-part-2-in-india/.223251",
      "title": "Crunchyroll Streams <cite>One Piece</cite> Anime's Egghead Arc Part 2 in India"
    },
    {
      "datetime": "2025-04-09T21:00:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-09/north-american-anime-manga-releases-april-6-12/.223312",
      "title": "North American Anime, Manga Releases, April 6-12"
    },
    {
      "datetime": "2025-04-10T13:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-10/japanese-animation-tv-ranking-march-31-april-6/.223395",
      "title": "Japanese Animation TV Ranking, March 31-April 6"
    },
    {
      "datetime": "2025-04-19T19:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-19/japanese-animation-tv-ranking-april-7-13/.223694",
      "title": "Japanese Animation TV Ranking, April 7-13"
    },
    {
      "datetime": "2025-04-26T15:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-04-26/japanese-animation-tv-ranking-april-14-20/.223902",
      "title": "Japanese Animation TV Ranking, April 14-20"
    },
    {
      "datetime": "2025-05-02T20:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-02/japanese-animation-tv-ranking-april-21-27/.224127",
      "title": "Japanese Animation TV Ranking, April 21-27"
    },
    {
      "datetime": "2025-05-15T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-15/japanese-animation-tv-ranking-april-28-may-4/.224465",
      "title": "Japanese Animation TV Ranking, April 28-May 4"
    },
    {
      "datetime": "2025-05-17T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-17/japanese-animation-tv-ranking-may-5-11/.224504",
      "title": "Japanese Animation TV Ranking, May 5-11"
    },
    {
      "datetime": "2025-05-18T08:30:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-18/dragon-ball-daima-dan-da-dan-solo-leveling-season-2-more-nominated-for-2025-astra-tv-awards/.224541",
      "title": "<cite>Dragon Ball Daima</cite>, <cite>Dan Da Dan</cite>, <cite>Solo Leveling</cite> Season 2, More Nominated for 2025 Astra TV Awards"
    },
    {
      "datetime": "2025-05-24T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-24/japanese-animation-tv-ranking-may-12-18/.224722",
      "title": "Japanese Animation TV Ranking, May 12-18"
    },
    {
      "datetime": "2025-05-31T03:27:44Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-05-30/japanese-animation-tv-ranking-may-19-25/.224945",
      "title": "Japanese Animation TV Ranking, May 19-25"
    },
    {
      "datetime": "2025-06-07T14:15:00Z",
      "href": "https://www.animenewsnetwork.com:/news/2025-06-07/japanese-animation-tv-ranking-may-26-june-1/.225161",
      "title": "Japanese Animation TV Ranking, May 26-June 1"
    }
  ],
  "picture_url": "https://cdn.animenewsnetwork.com/thumbnails/fit200x200/encyc/A836-622.jpg",
  "type": "anime"
}

--- FILE_END: ./backend/one_piece_news.json ---

--- FILE_START: ./backend/project_overview.md ---
# Clank Clank Mushi - Project Overview

This project is called "Clank Clank Mushi." It's being built as a personal application to help you keep up with anime news and dive deeper into anime lore. The main idea is to make getting news and learning about anime more interactive using smart AI technology.

---

### What Clank Clank Mushi Does

Here's a breakdown of the main things this app can do:

* **Anime News Feed:** It pulls in the latest news articles from different anime news websites. Think of it as your personal news broadcaster for the anime world.

* **Talk to the AI (The "Whispering Snail" Chat):** This is your direct way to ask questions. You'll see a special button, and when you click it, a chat window opens. You can type in any question you have – it could be about a news article you're reading, a "what if" scenario for anime characters, or just something you're curious about in anime lore. The AI will try to give you an answer.

* **Suggested Questions ("Thought Bubbles"):** Sometimes, you might not know what to ask. That's fine! The app will automatically show you a few questions related to what you're seeing on the screen. If you're reading a news article, it might suggest questions about that article. If you're just looking at the main news page, it might suggest general anime questions. Just click one to get an answer!

* **"Lore Navigator" (AI-Powered Encyclopedia):** If you read an article and find a word or name you don't know (like "Vegapunk" from One Piece, or "Poneglyphs"), you can highlight it. The app will then use its AI to give you a quick explanation of what that term means. It's like having an instant anime encyclopedia right there. It can also suggest other news or info that talks about that term.

* **"Trendspotter" (AI-Powered Anime Insights & Predictions):** This feature helps you see the bigger picture. The AI will look at lots of recent news and tell you what the general feeling is about certain topics (like if people are excited or worried about a new show). It can even try to guess what might happen in the anime world based on current trends.

* **"Debate Arena" (AI-Moderated Discussions):** Got a "what if" question, like "Who's stronger: Akainu or Blackbeard?" You can put it to the AI. It will then give you a balanced look at the arguments for both sides, pulling from what it knows about the anime world. This helps you think through different ideas.

---

### How It's Built

The app's brain (the backend) is made with **Flask**, which is a way to build web apps using **Python**. The parts you see and click on (the frontend) are built with standard web technologies like **HTML**, **CSS**, and **JavaScript**. For the smart AI parts, we're using **Google Gemini API**.

---

### Who It's For

This app is being built just for personal use. It's designed to run on your own computer, so you can have your own private anime news and lore assistant.

--- FILE_END: ./backend/project_overview.md ---

--- FILE_START: ./backend/code_architect.md ---
clank_clank_mushi/
├── app.py                     # Main Flask application instance and setup
├── config.py                  # Holds configuration variables (API keys, LLM model names, etc.)
├── requirements.txt           # Lists all Python dependencies
├── README.md                  # User-friendly guide for GitHub
├── project_overview.md        # Detailed overview of the project's purpose and features
├── project_goals.md           # Lists the specific goals for the project
│
├── routes/                    # Defines URL endpoints for the Flask API
│   ├── __init__.py            # Makes 'routes' a Python package
│   └── api_routes.py          # Contains all API routes (e.g., /api/news, /api/llm_chat, /api/lore_lookup)
│
├── controllers/               # Contains the business logic, processes data, interacts with services
│   ├── __init__.py            # Makes 'controllers' a Python package
│   ├── news_controller.py     # Logic for fetching, processing, and preparing news/One Piece data (returns Python dicts/lists for JSON conversion)
│   └── llm_controller.py      # Logic for handling all LLM-related operations (chat, suggestions, lore, trends, debates)
│
├── services/                  # Handles interactions with external APIs and LLMs (specific API calls)
│   ├── __init__.py            # Makes 'services' a Python package
│   ├── one_piece_api_service.py # Dedicated service for One Piece API calls
│   ├── ann_api_service.py     # Dedicated service for AnimeNewsNetwork API calls
│   ├── gemini_llm_service.py  # Handles calls to Google Gemini API for text generation
│   └── ollama_llm_service.py  # Handles calls to Ollama for text generation (if used for generation and not just embedding)
│
├── embeddings/                # Manages embedding generation, storage, and retrieval
│   ├── __init__.py            # Makes 'embeddings' a Python package
│   ├── ollama_embedder.py     # Interface to use Ollama 'all-minilm:latest' for generating embeddings
│   └── vector_store.py        # Manages the storage (in-memory, for now) and similarity search of embeddings
│
├── data/                      # Optional: For caching fetched API responses or pre-generated embeddings persistently
│   ├── cached_news_articles.json  # Example: Store parsed news data
│   └── cached_one_piece_lore.json # Example: Store parsed One Piece lore data
│
└── utils/                     # General utility functions
    ├── __init__.py            # Makes 'utils' a Python package
    └── text_processing.py     # Helper functions, e.g., for cleaning text, chunking for LLM/embedding

--- FILE_END: ./backend/code_architect.md ---

--- FILE_START: ./backend/globals.py ---
# backend/globals.py
from embeddings.ollama_embedder import OllamaEmbedder
from embeddings.vector_store import VectorStore
from services.clustering_service import ClusteringService # Import the new ClusteringService
from services.data_embedding_service import DataEmbeddingService # Import DataEmbeddingService
from services.anime_api_service import AnimeAPIService # NEW: Import AnimeAPIService
from config import Config # Import Config to get the DB path

# Initialize global instances for embedding components
# These will be initialized once when the application starts
# Pass the persistence path to the VectorStore
global_vector_store = VectorStore(db_path=Config.VECTOR_DB_PATH)
global_ollama_embedder = OllamaEmbedder()
# Initialize the global clustering service, passing the global vector store to it
global_clustering_service = ClusteringService(vector_store=global_vector_store)
# NEW: Initialize the global AnimeAPIService
global_anime_api_service = AnimeAPIService()
# Initialize the global data embedding service, passing the new anime_api_service to it
global_data_embedding_service = DataEmbeddingService(
    vector_store=global_vector_store,
    embedder=global_ollama_embedder,
    anime_api_service=global_anime_api_service # Pass the new service here
)

print("DEBUG: globals.py: Initialized global_vector_store, global_ollama_embedder, global_clustering_service, global_anime_api_service, and global_data_embedding_service.")

--- FILE_END: ./backend/globals.py ---

--- FILE_START: ./backend/utils/text_processing.py ---

--- FILE_END: ./backend/utils/text_processing.py ---

--- FILE_START: ./backend/utils/__init__.py ---

--- FILE_END: ./backend/utils/__init__.py ---

--- FILE_START: ./backend/.vector_db_initialized ---
initialized
--- FILE_END: ./backend/.vector_db_initialized ---

--- FILE_START: ./backend/.gitignore ---
# Environment variables
.env

# Python virtual environment
venv/

--- FILE_END: ./backend/.gitignore ---

--- FILE_START: ./backend/test_chat.py ---
import requests
import json

# Define the API endpoint URL
url = "http://127.0.0.1:8001/api/llm/chat"

# Define the headers to send with the request
headers = {
    "Content-Type": "application/json"
}

# Define the query payload
payload = {
    "query": "What is the One Piece?"
}

print(f"Sending POST request to {url} with query: '{payload['query']}'")

try:
    # Send the POST request
    response = requests.post(url, headers=headers, data=json.dumps(payload))

    # Check the response status code
    if response.status_code == 200:
        print("\nSUCCESS! LLM Response:")
        print(json.dumps(response.json(), indent=2))
    else:
        print(f"\nERROR: Received status code {response.status_code}")
        print("Response:")
        print(json.dumps(response.json(), indent=2))

except requests.exceptions.ConnectionError:
    print("\nERROR: Could not connect to the Flask server. Is it running?")
except requests.exceptions.Timeout:
    print("\nERROR: Request timed out.")
except requests.exceptions.RequestException as e:
    print(f"\nAn unexpected error occurred: {e}")

--- FILE_END: ./backend/test_chat.py ---

--- FILE_START: ./backend/.env ---
GEMINI_KEY="AIzaSyBFaW0ecrV-U271X6M_nB9691ub4iPyjsw"

--- FILE_END: ./backend/.env ---

--- FILE_START: ./backend/scripts/list_gemini_models.py ---
# backend/list_gemini_models.py
import google.generativeai as genai
import os
import sys

# Add the backend directory to the Python path to import config
# This ensures it can find config.py even when run directly from scripts/
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config import Config

def list_gemini_models():
    """Lists available Gemini models and their capabilities."""
    api_key = Config.GEMINI_API_KEY
    if not api_key:
        print("Error: GEMINI_KEY not found in your .env file or config.py.")
        print("Please ensure your .env file is in the backend/ directory with GEMINI_KEY=\"YOUR_API_KEY\".")
        return

    try:
        # Configure the genai library with the API key
        genai.configure(api_key=api_key)

        print("--- Listing available Gemini models ---")
        print("Looking for models capable of 'generateContent' (text generation):")
        print("-" * 50)

        found_any = False
        for m in genai.list_models():
            if 'generateContent' in m.supported_generation_methods:
                found_any = True
                print(f"Name: {m.name}")
                print(f"  Description: {m.description}")
                print(f"  Supported methods: {m.supported_generation_methods}")
                if m.input_token_limit:
                    print(f"  Input Token Limit: {m.input_token_limit}")
                if m.output_token_limit:
                    print(f"  Output Token Limit: {m.output_token_limit}")
                print("-" * 50) # Separator for clarity

        if not found_any:
            print("No models found that support 'generateContent' with your API key.")
            print("Double-check your GEMINI_KEY and API access in Google Cloud Console.")
            print("Also, ensure you are not under any region-specific restrictions.")

        print("\nIMPORTANT: Use the 'Name' field (e.g., 'models/gemini-pro' or 'gemini-1.0-pro') exactly as it appears above when configuring.")

    except Exception as e:
        print(f"An error occurred while listing models: {e}")
        print("This could be due to an incorrect API key, network issues, or API access restrictions.")
        print("Please verify your GEMINI_KEY in .env and check your Google Cloud project settings.")

if __name__ == "__main__":
    list_gemini_models()

--- FILE_END: ./backend/scripts/list_gemini_models.py ---

--- FILE_START: ./backend/scripts/check_flask_status.py ---
# backend/scripts/check_flask_status.py
import requests
import sys
import json # Import json for potentially structured responses

# Define the expected Flask app URL
FLASK_HOST = "127.0.0.1"
FLASK_PORT = 8001
FLASK_URL = f"http://{FLASK_HOST}:{FLASK_PORT}/" # Ensure trailing slash for root

def check_flask_app():
    """
    Checks if the Flask application is running successfully on the defined port.
    It attempts to connect and validate the response from the root URL.
    """
    print(f"Attempting to connect to Flask app on {FLASK_URL}...")
    try:
        # Make a GET request to the root URL with a short timeout
        # The root URL should return our initial JSON message
        response = requests.get(FLASK_URL, timeout=5)

        # Check if the HTTP status code indicates success
        if response.status_code == 200:
            try:
                # Try to parse the response as JSON
                data = response.json()
                # Check for the specific success message we expect from app.py's home route
                if "message" in data and "Clank Clank Mushi API is running!" in data["message"]:
                    print(f"\n✅ Success: Flask app is running and responsive on port {FLASK_PORT}!")
                    print(f"   API Message: {data.get('message', 'No message field')}")
                    print(f"   Current LLM for generation: {data.get('current_llm_for_generation', 'N/A')}")
                    sys.exit(0) # Exit with success code
                else:
                    # If JSON is valid but content is not as expected
                    print(f"\n⚠️ Warning: Flask app is running, but the root URL response is unexpected.")
                    print(f"   Status Code: {response.status_code}")
                    print(f"   Response (first 100 chars): {json.dumps(data, indent=2)[:100]}...")
                    sys.exit(1) # Exit with error code
            except json.JSONDecodeError:
                # If the response is not valid JSON
                print(f"\n⚠️ Warning: Flask app is running, but the response from {FLASK_URL} is not valid JSON.")
                print(f"   Status Code: {response.status_code}")
                print(f"   Response (first 100 chars): {response.text[:100]}...")
                sys.exit(1)
        else:
            # If the Flask app responded but with an error status code
            print(f"\n❌ Error: Flask app responded with status code {response.status_code} from {FLASK_URL}.")
            print(f"   This indicates an issue within the Flask app itself.")
            sys.exit(1)

    except requests.exceptions.ConnectionError:
        # This occurs if the app is not running or the port is blocked
        print(f"\n❌ Error: Could not connect to Flask app on {FLASK_URL}.")
        print(f"   Is the Flask app running? Make sure you launched it with 'python3 app.py'.")
        print(f"   Check if port {FLASK_PORT} is free or blocked by another application.")
        sys.exit(1)
    except requests.exceptions.Timeout:
        # This occurs if the app starts but doesn't respond within the timeout period
        print(f"\n❌ Error: Connection to Flask app timed out on {FLASK_URL}.")
        print(f"   The app might be running but is slow to respond, or there's a network issue.")
        sys.exit(1)
    except Exception as e:
        # Catch any other unexpected errors
        print(f"\n❌ An unexpected error occurred while checking the app: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Ensure your virtual environment is active before running this script
    # as it relies on the 'requests' package installed in it.
    check_flask_app()

--- FILE_END: ./backend/scripts/check_flask_status.py ---

--- FILE_START: ./backend/scripts/check_llm_status.py ---
# backend/scripts/check_llm_status.py
import requests
import json
import os
import sys

# Add the backend directory to the Python path to import config
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from config import Config

def check_llm_chat_endpoint():
    """
    Sends a test query to the LLM chat endpoint and prints the response.
    Reads the base URL and current LLM from config.
    """
    base_url = f"http://{Config.HOST}:{Config.PORT}"
    llm_chat_url = f"{base_url}/api/llm/chat"
    current_llm = Config.CURRENT_GENERATION_LLM

    test_query = "What is the One Piece?" # A good generic query for Mushi

    print(f"--- Checking LLM Chat Endpoint ({llm_chat_url}) ---")
    print(f"Configured LLM for generation: {current_llm.upper()}")
    print(f"Sending test query: '{test_query}'")

    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "query": test_query
    }

    try:
        response = requests.post(llm_chat_url, headers=headers, json=data, timeout=120) # Increased timeout
        response.raise_for_status() # Raises an HTTPError for bad responses (4xx or 5xx)

        response_json = response.json()

        if response.status_code == 200:
            print("\n--- LLM Endpoint Test SUCCESS ---")
            print("Status Code:", response.status_code)
            print("LLM Response:")
            # Use json.dumps for pretty printing if the response is complex
            print(json.dumps(response_json, indent=2))
        else:
            print(f"\n--- LLM Endpoint Test FAILED (Status: {response.status_code}) ---")
            print("Error Details:")
            print(json.dumps(response_json, indent=2))

    except requests.exceptions.ConnectionError as e:
        print("\n--- LLM Endpoint Test FAILED: Connection Error ---")
        print(f"Could not connect to the Flask server at {base_url}.")
        print("Please ensure your Flask app is running (`python3 app.py` in your backend directory).")
        print(f"Error: {e}")
    except requests.exceptions.Timeout:
        print("\n--- LLM Endpoint Test FAILED: Request Timeout ---")
        print(f"The request to {llm_chat_url} timed out. The server might be slow or LLM generation took too long.")
    except requests.exceptions.RequestException as e:
        print("\n--- LLM Endpoint Test FAILED: Request Error ---")
        print(f"An error occurred during the request: {e}")
    except json.JSONDecodeError:
        print("\n--- LLM Endpoint Test FAILED: Invalid JSON Response ---")
        print("Received a non-JSON response from the server.")
        print("Response Text:", response.text)
    except Exception as e:
        print(f"\n--- LLM Endpoint Test FAILED: Unexpected Error ---")
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    check_llm_chat_endpoint()

--- FILE_END: ./backend/scripts/check_llm_status.py ---

--- FILE_START: ./backend/app.py ---
# backend/app.py
from flask import Flask, jsonify, request
from flask_cors import CORS
from config import Config
import os
from apscheduler.schedulers.background import BackgroundScheduler
from flask_apscheduler import APScheduler
import logging

# Import global instances from the new globals.py module
from globals import global_vector_store, global_ollama_embedder, global_clustering_service, global_data_embedding_service, global_anime_api_service

# Import other components
# DataEmbeddingService is now initialized in globals.py

# Import all blueprints from their respective files
from routes.news_api_routes import news_bp as news_api_bp
from routes.one_piece_api_routes import one_piece_api_bp
from routes.llm_api_routes import llm_api_bp # Import the LLM API Blueprint
from routes.suggest_questions import suggest_questions_bp
from routes.data_api_routes import data_api_bp
from routes.aniwatch_api_routes import aniwatch_api_bp
from routes.anime_api_routes import anime_api_bp

# Import controllers to initialize them
from controllers.data_controller import DataController


# Configure logging for APScheduler and your app
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logging.getLogger('apscheduler').setLevel(logging.INFO) # Keep APScheduler logs informative

# global_data_embedding_service is now initialized in globals.py

# Initialize scheduler
scheduler = APScheduler()

# Define a wrapper function for the scheduled job to ensure saving after update
# THIS FUNCTION MUST BE DEFINED BEFORE create_app() FOR THE SCHEDULER TO FIND IT
def update_data_and_save_job(): # Renamed to be more general
    logging.info("Running scheduled data update and save job...")
    global_data_embedding_service.embed_all_data() # Call embed_all_data to update all sources
    global_vector_store.save() # Ensure the vector store is saved after updates
    logging.info("Scheduled data update and save job finished.")

def create_app():
    app = Flask(__name__)
    # Enable CORS for specific origins (your frontend and Flask itself)
    # This explicit configuration should reliably resolve CORS issues.
    CORS(app, origins=["http://localhost:5173", "http://127.0.0.1:8001"])

    app.config.from_object(Config)

    # Initialize APScheduler with your Flask app
    scheduler.init_app(app)
    scheduler.start()

    # Schedule the job to run every 12 hours
    if not scheduler.get_job('update_data_and_save'): # Renamed ID
        scheduler.add_job(
            id='update_data_and_save',
            func=update_data_and_save_job,
            trigger='interval',
            hours=12, # Update every 12 hours
            replace_existing=True
        )
        logging.info("Scheduled 'update_data_and_save' job to run every 12 hours.")
    else:
        logging.info("Scheduled job 'update_data_and_save' already exists.")


    # Initial Vector Store Data Loading/Embedding
    logging.info("--- Initial Vector Store Data Loading/Embedding ---")
    if not global_vector_store.documents: # Only embed if store is empty
        logging.info("Vector store is empty. Performing initial data embedding...")
        global_data_embedding_service.embed_all_data()
        global_vector_store.save() # Save after initial embedding
        logging.info("Initial data embedding complete and vector store saved.")
    else:
        logging.info(f"Vector store already contains {len(global_vector_store.documents)} documents. Skipping initial embedding.")
    logging.info("--- End of Initial Vector Store Data Loading/Embedding ---")


    # Register Blueprints
    app.register_blueprint(news_api_bp)
    app.register_blueprint(one_piece_api_bp)
    app.register_blueprint(llm_api_bp) # All LLM routes will now be handled by this blueprint

    app.register_blueprint(suggest_questions_bp)
    app.register_blueprint(data_api_bp)
    app.register_blueprint(aniwatch_api_bp)
    app.register_blueprint(anime_api_bp)

    # Initialize controllers that depend on global services
    DataController.initialize(global_clustering_service, global_data_embedding_service)

    @app.route('/')
    def index():
        return "Mushi Backend is running!", 200

    # REMOVED: Duplicated LLM routes. They will now be handled by llm_api_bp.
    # @app.route('/api/llm/providers', methods=['GET'])
    # def get_llm_providers():
    #     return jsonify(Config.LLM_PROVIDers), 200

    # @app.route('/api/llm/set-provider', methods=['POST'])
    # def set_llm_provider():
    #     data = request.get_json()
    #     provider_key = data.get('provider')
    #     if provider_key in Config.LLM_PROVIDERS:
    #         Config.CURRENT_GENERATION_LLM = provider_key
    #         logging.info(f"LLM provider set to: {provider_key}")
    #         return jsonify({"message": f"LLM provider set to {provider_key}"}), 200
    #     else:
    #         return jsonify({"error": "Invalid LLM provider"}), 400

    return app

if __name__ == '__main__':
    app = create_app()
    print(f"Running Flask app on {app.config['HOST']}:{app.config['PORT']}")
    print(f"Debug mode: {app.config['DEBUG']}")
    print(f"Current LLM for generation: {Config.CURRENT_GENERATION_LLM}")
    app.run(debug=Config.DEBUG, host=Config.HOST, port=Config.PORT)


--- FILE_END: ./backend/app.py ---

--- FILE_START: ./backend/frontend_integration_guide.md ---
# Clank Clank Mushi Backend API

This repository hosts the backend API for "Clank Clank Mushi," a comprehensive application designed to provide interactive information and discussions about anime, manga, and specifically One Piece lore, powered by Large Language Models (LLMs).

## Table of Contents

- [Features](#features)
  - [LLM Chat with Mushi](#llm-chat-with-mushi)
  - [Contextual Suggested Questions](#contextual-suggested-questions)
  - [Lore Navigation (RAG)](#lore-navigation-rag)
  - [Vector Data Clustering](#vector-data-clustering)
- [API Endpoints](#api-endpoints)
  - [LLM Interaction Endpoints](#llm-interaction-endpoints)
  - [Raw Data Endpoints](#raw-data-endpoints)
  - [Data Processing & Visualization Endpoints](#data-processing--visualization-endpoints)
- [Backend Architecture & Key Files](#backend-architecture--key-files)
- [Setup & Running the Backend](#setup--running-the-backend)
- [Frontend Integration Guide](#frontend-integration-guide)

## Features

### LLM Chat with Mushi

Mushi is your AI companion, designed to provide engaging and knowledgeable responses about anime, manga, and One Piece. This feature allows users to ask open-ended questions and receive natural, human-like answers. Mushi's persona is defined to be friendly, insightful, and approachable.

### Contextual Suggested Questions

This intelligent feature enhances the user experience by proactively suggesting follow-up questions. After a user interacts with Mushi, the system analyzes their *last question* to predict and provide relevant, conversational next questions. This aims to guide the user's exploration and provide a more intuitive conversational flow.

### Lore Navigation (RAG)

The backend incorporates a Retrieval-Augmented Generation (RAG) system, referred to as "Lore Navigation." It leverages a vector store populated with data from One Piece sagas, characters, fruits, and recent Anime News Network (ANN) articles. When a user asks a question, relevant information is retrieved from this vector store and provided to the LLM as context, enabling Mushi to give more accurate and detailed lore-specific answers.

### Vector Data Clustering

The backend can now perform clustering on the stored vector embeddings, grouping similar documents together. This processed data, including cluster assignments, can be retrieved by the frontend for advanced visualizations, allowing users to explore relationships within the data.

## API Endpoints

All LLM-related endpoints are prefixed with `/api/llm`. The server runs on `http://127.0.0.1:8001` by default (as configured in `config.py`).

### LLM Interaction Endpoints

#### 1. Chat with Mushi

-   **Endpoint:** `POST /api/llm/chat`
-   **Description:** Sends a user query to the configured LLM (Mushi) and receives a natural language response. This endpoint also triggers the Lore Navigation (RAG) process.
-   **Request Body (JSON):**
    ```json
    {
        "query": "What are the powers of the Gum-Gum Fruit?"
    }
    ```
-   **Response (JSON):**
    -   **Success (200 OK):**
        ```json
        {
            "response": "The Gum-Gum Fruit, originally known as the Human-Human Fruit, Model: Nika, is a Mythical Zoan-type Devil Fruit eaten by Monkey D. Luffy. It gives his body the properties of rubber, allowing him to stretch and inflate. Later, it was revealed to be a Zoan fruit that allows him to transform into the 'Sun God' Nika, granting him immense freedom and cartoonish abilities."
        }
        ```
    -   **Error (400 Bad Request / 500 Internal Server Error / 503 Service Unavailable):**
        ```json
        {
            "error": "Missing 'query' field in request body."
        }
        ```
        or
        ```json
        {
            "error": "An internal error occurred with the 'ollama' LLM service: no content was returned."
        }
        ```

#### 2. Get Contextual Suggested Questions

-   **Endpoint:** `POST /api/llm/suggest-questions`
-   **Description:** Generates exactly 3 relevant follow-up questions based on a provided piece of content (typically the user's last question to Mushi).
-   **Request Body (JSON):**
    ```json
    {
        "content": "What are the powers of the Gum-Gum Fruit?"
    }
    ```
-   **Response (JSON):**
    -   **Success (200 OK):**
        ```json
        {
            "suggested_questions": [
                "How does the Gum-Gum Fruit's true nature as a Zoan fruit change our understanding of Luffy's abilities?",
                "What are some of the most memorable techniques Luffy has developed using his rubber powers?",
                "Are there any other Devil Fruits in One Piece that have a hidden true identity like the Gum-Gum Fruit?"
            ]
        }
        ```
    -   **Error (400 Bad Request / 500 Internal Server Error):**
        ```json
        {
            "error": "Missing 'content' field in request body for question suggestion."
        }
        ```

### Raw Data Endpoints

The backend also provides endpoints for fetching structured data from various sources. These are primarily used to populate the vector store for Lore Navigation.

-   `GET /api/one-piece/sagas`
-   `GET /api/one-piece/characters`
-   `GET /api/one-piece/fruits`
-   `GET /api/news/ann-recent`
-   `GET /api/shikimori/manga` (requires OAuth setup)

### Data Processing & Visualization Endpoints

#### 1. Get Clustered Vector Data

-   **Endpoint:** `GET /api/data/clusters`
-   **Description:** Retrieves all documents from the vector store, performs K-Means clustering on their embeddings, and returns the documents augmented with their assigned cluster labels. This data is ideal for creating visualizations of document relationships.
-   **Query Parameters (Optional):**
    * `n_clusters`: (Integer) The desired number of clusters to form. If not provided, defaults to 5.
        * Example: `/api/data/clusters?n_clusters=10`
-   **Response (JSON):**
    -   **Success (200 OK):**
        ```json
        {
            "documents": [
                {
                    "id": 0,
                    "content": "Original document text content...",
                    "embedding": [0.1, 0.2, ..., 0.9], // The high-dimensional embedding
                    "metadata": { "source": "one_piece_saga", "title": "East Blue" },
                    "cluster_label": 0 // The assigned cluster ID
                },
                {
                    "id": 1,
                    "content": "Another document content...",
                    "embedding": [0.5, 0.3, ..., 0.7],
                    "metadata": { "source": "one_piece_character", "name": "Monkey D. Luffy" },
                    "cluster_label": 1
                }
                // ... more documents
            ],
            "cluster_info": {
                "0": { // Cluster 0
                    "centroid": [0.15, 0.25, ..., 0.85], // Centroid of cluster 0 in embedding space
                    "document_count": 50
                },
                "1": { // Cluster 1
                    "centroid": [0.45, 0.35, ..., 0.65],
                    "document_count": 75
                }
                // ... more cluster info
            }
        }
        ```
    -   **Error (400 Bad Request / 500 Internal Server Error):**
        ```json
        {
            "error": "Invalid value for 'n_clusters'. Must be an integer."
        }
        ```
        or
        ```json
        {
            "error": "Failed to retrieve clustered data.",
            "details": "..."
        }
        ```

## Backend Architecture & Key Files

The backend is built with Flask and organized into a modular structure:

-   `app.py`: The main Flask application entry point. Handles app creation, CORS, configuration loading, blueprint registration, and scheduler initialization.
-   `config.py`: Stores all application configurations, API keys, base URLs, LLM model names, and application settings (e.g., host, port, debug mode).
-   `globals.py`: Initializes global instances of components like the `VectorStore`, `OllamaEmbedder`, and `ClusteringService` to ensure they are singletons and accessible throughout the application.
-   `controllers/`: Contains classes that encapsulate the business logic for specific domains.
    -   `llm_controller.py`: Manages all interactions with LLM services. Contains `generate_llm_response` for chat and `generate_suggested_questions` for follow-up questions. It also orchestrates the RAG process by calling embedding and vector store services.
    -   `data_controller.py`: **NEW!** Manages logic for retrieving and processing data, including clustered vector data.
    -   `one_piece_controller.py`: Handles business logic related to One Piece data.
    -   `news_controller.py`: Manages logic for news data (e.g., ANN recent items).
    -   `shikimori_controller.py`: Manages logic for Shikimori data.
-   `routes/`: Defines Flask Blueprints and registers API endpoints.
    -   `llm_api_routes.py`: Contains the `/api/llm/chat` endpoint.
    -   `suggest_questions.py`: Contains the new `/api/llm/suggest-questions` endpoint.
    -   `data_api_routes.py`: **NEW!** Contains the `/api/data/clusters` endpoint.
    -   `one_piece_api_routes.py`: Contains One Piece related API endpoints.
    -   `news_api_routes.py`: Contains Anime News Network related API endpoints.
    -   `shikimori_api_routes.py`: Contains Shikimori related API endpoints.
-   `services/`: Contains classes that interact with external APIs or provide core services.
    -   `ollama_llm_service.py`: Handles API calls to the local Ollama LLM instance.
    -   `gemini_llm_service.py`: (Planned/Existing) Handles API calls to Google Gemini LLM.
    -   `clustering_service.py`: **NEW!** Handles the application of clustering algorithms (e.g., K-Means) to document embeddings.
    -   `one_piece_api_service.py`: Handles API calls to the One Piece API.
    -   `ann_api_service.py`: Handles API calls to Anime News Network.
    -   `shikimori_api_service.py`: Handles API calls to Shikimori.
    -   `data_embedding_service.py`: Orchestrates the fetching and embedding of data into the vector store.
-   `embeddings/`: Contains components for vector embeddings.
    -   `ollama_embedder.py`: Manages generating embeddings using Ollama's embedding models.
    -   `vector_store.py`: A simple in-memory vector database for storing and searching document embeddings.

## Setup & Running the Backend

1.  **Clone the repository:**
    ```bash
    git clone <your-repo-url>
    cd clank-clank-mushi-backend # Or your project root
    ```
2.  **Create a virtual environment (recommended):**
    ```bash
    python3 -m venv venv
    source venv/bin/activate # On Windows: .\venv\Scripts\activate
    ```
3.  **Install dependencies:**
    ```bash
    pip install -r requirements.txt # (Ensure you have a requirements.txt file)
    ```
    (If you don't have `requirements.txt`, you'll need to install Flask, Flask-CORS, python-dotenv, requests, numpy, scikit-learn, APScheduler, Flask-APScheduler, and potentially `google-generativeai` if using Gemini).
4.  **Create a `.env` file:**
    Create a file named `.env` in the root of your backend directory and populate it with necessary environment variables.
    ```
    # .env example
    FLASK_HOST=127.0.0.1
    FLASK_PORT=8001
    DEFAULT_GENERATION_LLM=ollama # or 'gemini' if configured

    # Ollama Configuration
    OLLAMA_BASE_URL=http://localhost:11434
    # OLLAMA_EMBEDDING_MODEL="all-minilm:latest" # Configured in config.py
    # OLLAMA_GENERATION_MODEL="qwen2.5:3b"       # Configured in config.py

    # Gemini (if used)
    # GEMINI_KEY=YOUR_GEMINI_API_KEY

    # Shikimori (if used)
    # SHIKIMORI_API_BASE_URL=[https://shikimori.one](https://shikimori.one)
    # SHIKIMORI_CLIENT_ID=YOUR_SHIKIMORI_CLIENT_ID
    # SHIKIMORI_CLIENT_SECRET=YOUR_SHIKIMORI_CLIENT_SECRET
    # SHIKIMORI_ACCESS_TOKEN=YOUR_SHIKIMORI_ACCESS_TOKEN # For direct usage, or implement OAuth flow
    ```
5.  **Run Ollama (if `DEFAULT_GENERATION_LLM` is `ollama`):**
    Ensure your Ollama server is running and the specified models (`qwen2.5:3b` and `all-minilm:latest` or your chosen models) are pulled.
    ```bash
    ollama serve
    ollama pull qwen2.5:3b
    ollama pull all-minilm:latest
    ```
6.  **Run the Flask application:**
    ```bash
    python3 app.py
    ```
    The application will start, perform initial data embedding, and be accessible at `http://127.0.0.1:8001`.

## Frontend Integration Guide

This section outlines the intended flow for integrating the LLM chat, suggested questions, and data visualization features into your frontend application.

### Chat Interaction Flow

1.  **User Input:** The user types a question into a chat input field.
2.  **Send Query to Backend:** When the user submits their question, the frontend makes a `POST` request to `http://127.0.0.1:8001/api/llm/chat` with the user's question in the `query` field of the JSON body.
3.  **Display LLM Response:** The frontend receives the `response` from the backend and displays it in the chat interface.
4.  **Trigger Suggested Questions:** **Immediately after successfully receiving and displaying the LLM's response**, the frontend should make a *second* `POST` request to `http://127.0.0.1:8001/api/llm/suggest-questions`.
    -   The `content` for this request should be the *original user question* that was just sent to `/api/llm/chat`.
    -   This is crucial: the suggested questions are based on what the user *asked*, not necessarily the LLM's full reply, to generate relevant follow-ups.
5.  **Display Suggested Questions:** The frontend receives the `suggested_questions` array from this second request. Display these questions prominently (e.g., as clickable buttons) below the LLM's response or at the bottom of the chat interface.
6.  **Follow-up Interaction:**
    -   If the user clicks on one of the suggested questions, that suggested question becomes the new `user_query`.
    -   The frontend then repeats the process from **Step 2** (sends the new query to `/api/llm/chat`), effectively continuing the conversation with relevant prompts.
    -   If the user types a new original question, that question becomes the new `user_query`, and the cycle repeats.

This flow ensures that users always have relevant follow-up options, enhancing their conversational experience with Mushi.

### Vector Data Visualization Flow

This section describes how to retrieve and utilize the clustered vector data for rich frontend visualizations.

1.  **Initiate Data Fetch:** When a user navigates to a data visualization section (e.g., a "Data Explorer" tab), the frontend should make a `GET` request to `http://127.0.0.1:8001/api/data/clusters`.
    * You can include the `n_clusters` query parameter to control the number of clusters, e.g., `/api/data/clusters?n_clusters=7`.
2.  **Process Clustered Data:**
    * The backend's response will contain an array of `documents`, each with its `content`, original `embedding` (as a list of floats), `metadata`, and a new `cluster_label` (an integer representing the cluster ID).
    * It will also include `cluster_info`, providing centroids and document counts for each cluster.
3.  **Dimensionality Reduction (Frontend or Backend):**
    * **Recommendation: Perform on Backend.** For better performance and to simplify frontend logic, it's highly recommended to perform dimensionality reduction (e.g., using PCA, t-SNE, or UMAP) on the *backend* before sending the data to the frontend. This would add `x`, `y` (and `z` for 3D) coordinates directly to each document object.
    * **Alternative: Perform on Frontend.** If backend reduction is not feasible, you can use JavaScript libraries (e.g., `ml-matrix`, `tsne-js`) to perform dimensionality reduction on the `embedding` data in the browser. Be mindful of performance for very large datasets.
4.  **Choose a Visualization Library:**
    * **2D Scatter Plots:** Libraries like `D3.js`, `Chart.js`, `Plotly.js`, `react-chartjs-2`, or `recharts` are excellent choices for interactive 2D visualizations.
    * **3D Scatter Plots:** If you reduce to 3 dimensions, `Plotly.js` or `Three.js` can be used for interactive 3D representations.
5.  **Design the Visualization:**
    * **Color-coding:** Assign a unique color to each `cluster_label` to clearly distinguish the clusters visually.
    * **Interactivity:**
        * **Tooltips/Hover Effects:** Display the document's `content` and relevant `metadata` (e.g., source, title) when a user hovers over a data point.
        * **Zooming/Panning:** Allow users to explore dense areas of the plot.
        * **Click Actions:** Clicking a point could, for example, open a modal with the full document content or trigger a search for similar documents.
    * **Filtering and Search:** Provide options to filter documents by source (`metadata.source`), cluster label, or search for keywords within the `content`.
    * **Dynamic Clustering:** Implement a slider or input field on the frontend that allows the user to dynamically change `n_clusters`. When the value changes, re-fetch the data from `/api/data/clusters` with the new `n_clusters` value and update the visualization.
    * **Cluster Insights:** Display summary statistics for each cluster (e.g., the `document_count` from `cluster_info`).

By following this guide, your frontend can effectively interact with the Mushi backend, providing a rich and interactive user experience for both conversational AI and data exploration.

--- FILE_END: ./backend/frontend_integration_guide.md ---

--- FILE_START: ./backend/project_api_detail.md ---

---

### File 2: `project_api_detail.md` (Human-Friendly Developer Guide)

This version is structured like a proper README or wiki page for a new developer joining the team.

```markdown
# Mushi Project: Backend Developer Guide

## 1. Project Goal

The Mushi backend serves as an intelligent data aggregation and conversational AI platform. Its primary functions are:
1.  **Proxying External APIs:** It consolidates data from multiple sources (Shikimori, ANN, One Piece API) into a unified, clean JSON format for the frontend.
2.  **Conversational AI:** It provides a chat interface powered by a swappable LLM (Gemini/Ollama).
3.  **Intelligent Context (RAG):** It enhances LLM responses by automatically retrieving relevant information from our internal data knowledge base, which is built from the proxied APIs.

## 2. Getting Started: Instructions

Follow these steps to get the backend running locally.

1.  **Clone the Repository:**
    ```bash
    git clone <your-repo-url>
    cd mushi-backend # or your project's root folder
    ```

2.  **Create a Virtual Environment:**
    ```bash
    python3 -m venv venv
    source venv/bin/activate
    ```

3.  **Install Dependencies:**
    (Assuming you have a `requirements.txt` file)
    ```bash
    pip install -r requirements.txt
    ```

4.  **Create `.env` File:**
    Create a file named `.env` in the `backend` directory. Populate it with your API keys and configuration based on `config.py`.
    ```dotenv
    # .env example
    GEMINI_KEY="your_gemini_api_key"
    OLLAMA_BASE_URL="http://localhost:11434"
    DEFAULT_GENERATION_LLM="ollama" # or "gemini"
    FLASK_PORT=8001

    # Shikimori OAuth Credentials (if needed)
    SHIKIMORI_CLIENT_ID="..."
    SHIKIMORI_CLIENT_SECRET="..."
    ```

5.  **Run the Application:**
    ```bash
    python app.py
    ```
    The server should now be running on `http://127.0.0.1:8001`.

## 3. Core Architecture & Data Flow

### Overall Architecture

The system follows a standard Controller-Service pattern.

+----------+ +------------------+ +-------------------+ +--------------------+
| | | | | | | External API (e.g.,|
| User / |----->| Flask Routes |----->| Controllers |----->| Shikimori, ANN) |
| Frontend | | (e.g., llm_api_bp)| | (llm_controller.py)| | |
+----------+ +------------------+ +---------+---------+ +--------------------+
|
|
+--------v--------+ +--------------------+
| | | |
| Services |----->| Internal Services |
| (e.g., embedding)| | (VectorStore, etc.)|
+-----------------+ +--------------------+
### The RAG (Retrieval-Augmented Generation) Workflow

This is the most critical process for the chat functionality.
Use code with caution.
User Query
"Tell me about the Gomu Gomu no Mi."
|
v
LLM Controller (/api/llm/chat)
|
+---> 3. Embed Query (OllamaEmbedder)
| "Tell me..." -> [0.1, 0.9, 0.2, ...]
|
+---> 4. Search Vector Store
| Finds documents about "Devil Fruits", "Luffy", etc.
|
v
Assemble Final Prompt
SYSTEM_PROMPT + CONTEXT (from step 4) + USER_QUERY
|
v
Send to LLM (Gemini or Ollama)
|
v
Return Formatted Response to User
## 4. Project Structure Explained

-   `backend/`
    -   `app.py`: The main entry point. Initializes Flask, registers blueprints, and starts the scheduler.
    -   `config.py`: Centralized configuration. Loads API keys and settings from the `.env` file.
    -   `globals.py`: **Crucial file.** Initializes singleton instances of the `VectorStore`, `OllamaEmbedder`, and `ClusteringService`. This prevents re-loading these heavy components on every request.
    -   `vector_db.pkl.gz`: The persistent, compressed file for the vector store. **Do not commit to Git.**
    -   `controllers/`: Contains the logic for each group of endpoints. They process requests and orchestrate calls to services.
    -   `routes/`: Defines the API endpoints using Flask Blueprints. These files are lightweight and primarily map URLs to controller methods.
    -   `services/`: Contains specific business logic.
        -   `*_api_service.py`: Handles all communication with a specific external API.
        -   `data_embedding_service.py`: Responsible for populating the vector store.
        -   `clustering_service.py`: Performs data clustering.
    -   `embeddings/`:
        -   `ollama_embedder.py`: A wrapper for the Ollama embedding model.
        -   `vector_store.py`: A custom, simple vector store implementation using FAISS.

## 5. Developer Workflow: How to Add a New Data Source

Follow this pattern to integrate a new API (e.g., a "Naruto API").

1.  **Create the Service:** In `/services`, create `naruto_api_service.py`. This class will handle `requests` to the Naruto API and return raw data.
2.  **Create the Controller:** In `/controllers`, create `naruto_controller.py`. This class will call the `NarutoAPIService` and format the raw data into clean JSON for the frontend.
3.  **Create the Route:** In `/routes`, create `naruto_api_routes.py`. This file will define the blueprint (e.g., `naruto_api_bp`) and map endpoints like `/api/naruto/characters` to methods in the `NarutoController`.
4.  **Register the Blueprint:** In `app.py`, import `naruto_api_bp` and register it with `app.register_blueprint(naruto_api_bp)`.
5.  **Integrate into RAG (Most Important Step):**
    -   Open `services/data_embedding_service.py`.
    -   Add a new method like `embed_naruto_data()`.
    -   Call this new method from `embed_all_data()` to ensure Naruto data is included in the initial vector store population.
    -   Optionally, add it to a scheduled job in `app.py` if you need to keep the data fresh.

By following these steps, you not only create new endpoints but also make the new data available to the "Lore Navigator" for more intelligent chat responses.

--- FILE_END: ./backend/project_api_detail.md ---

--- FILE_START: ./backend/controllers/llm_controller.py ---
# backend/controllers/llm_controller.py
from services.gemini_llm_service import GeminiLLMService
from services.ollama_llm_service import OllamaLLMService
from config import Config
# Import from the new globals.py module instead of app.py
from globals import global_vector_store, global_ollama_embedder
import json
import re # Import for regex
from typing import List, Dict, Any, Tuple, Optional, Generator # NEW: Import Generator

class LLMController:
    """
    Controller for managing interactions with various LLM services.
    It acts as a dispatcher, selecting the appropriate LLM service
    based on the application's configuration.
    """

    @staticmethod
    def get_llm_providers() -> Dict[str, str]:
        """
        Returns the dictionary of available LLM providers from Config.
        """
        return Config.LLM_PROVIDERS

    @staticmethod
    def set_llm_provider(provider_key: str) -> Tuple[str, int]:
        """
        Sets the active LLM provider in Config.
        """
        if provider_key in Config.LLM_PROVIDERS:
            Config.CURRENT_GENERATION_LLM = provider_key
            print(f"DEBUG: LLM provider set to: {provider_key}")
            return f"LLM provider set to {provider_key}", 200
        else:
            return "Invalid LLM provider", 400

    @staticmethod
    def get_current_llm_provider() -> Tuple[Dict[str, str], int]:
        """
        Returns the currently selected LLM provider key from Config.
        """
        return {"current_provider": Config.CURRENT_GENERATION_LLM}, 200


    @staticmethod
    def generate_llm_response(user_query: str) -> Generator[str, None, None]: # Changed return type to Generator
        """
        Generates a response from the currently configured LLM in a streaming fashion.
        Incorporates a basic "Lore Navigator" by searching embeddings.
        Yields chunks of the LLM's response.

        Args:
            user_query (str): The user's input query.

        Yields:
            str: Chunks of the LLM's response text, including error messages if any.
        """
        if not user_query:
            yield "Error: Please provide a query for the LLM."
            return

        current_llm = Config.CURRENT_GENERATION_LLM
        print(f"DEBUG: Attempting to generate streaming response using LLM: {current_llm}")

        context_for_llm: str = "" # Initialize empty context

        # --- Lore Navigator Integration ---
        # Attempt to embed the user's query and find relevant lore
        user_query_embedding = global_ollama_embedder.embed_text(user_query)
        if user_query_embedding:
            # Perform similarity search to find relevant documents (lore)
            relevant_docs = global_vector_store.similarity_search(user_query_embedding, top_k=3)

            if relevant_docs:
                # Mushi will not explicitly mention "Lore Database" in her response
                # The system prompt in ollama_llm_service.py handles this.
                context_for_llm = "\n\nRelevant Information:\n"
                for doc in relevant_docs:
                    # Access 'content' and 'metadata' directly from the doc
                    content_snippet = doc.get('content', 'No content available')
                    source_info = doc.get('metadata', {}).get('source')

                    context_for_llm += f"- {content_snippet}"
                    if source_info:
                        context_for_llm += f" (Source: {source_info})"
                    context_for_llm += "\n"
                print(f"DEBUG: Context for LLM:\n{context_for_llm}")
            else:
                print("DEBUG: No relevant documents found for user query.")
        else:
            print("DEBUG: Failed to embed user query for lore search.")

        # Construct the prompt for the LLM
        # The system prompt in OllamaLLMService.MUSHI_SYSTEM_PROMPT guides the LLM's behavior
        # and explicitly tells it NOT to mention "lore database" or similar terms.
        prompt_for_llm = user_query
        if context_for_llm:
            # Prepend the context to the user's query.
            # The system prompt will instruct the LLM on how to use this context.
            prompt_for_llm = f"{context_for_llm}\n\nUser Query: {user_query}"


        # Determine which LLM service to use based on configuration
        if current_llm == "gemini":
            # NOTE: GeminiLLMService.generate_content currently returns a single string.
            # To support streaming here, GeminiLLMService.generate_content would also need
            # to be updated to be a generator yielding chunks. For now, it will yield
            # the full response at once if Gemini is chosen, effectively not streaming.
            # A proper streaming implementation for Gemini would involve changes in gemini_llm_service.py too.
            print("DEBUG: Calling GeminiLLMService.generate_content (Non-Streaming for now)...")
            response_text = GeminiLLMService.generate_content(prompt_for_llm)
            if response_text.startswith("Error:"):
                yield response_text
            else:
                yield response_text # Yield the full response as one chunk for now
        elif current_llm == "ollama_anime": # Specific Ollama anime model
            print("DEBUG: Calling OllamaLLMService.generate_content (Anime Model) for streaming...")
            # This call now returns a generator, so we iterate and yield each chunk
            for chunk in OllamaLLMService(model_name=Config.OLLAMA_ANIME_MODEL_NAME).generate_content(prompt_for_llm):
                # If an error chunk is received, yield it and stop the generator
                if chunk.startswith("Error:"):
                    yield chunk
                    return
                yield chunk

        elif current_llm == "ollama_qwen": # Specific Ollama Qwen model
            print("DEBUG: Calling OllamaLLMService.generate_content (Qwen Model) for streaming...")
            # This call now returns a generator, so we iterate and yield each chunk
            for chunk in OllamaLLMService(model_name=Config.OLLAMA_QWEN_MODEL_NAME).generate_content(prompt_for_llm):
                # If an error chunk is received, yield it and stop the generator
                if chunk.startswith("Error:"):
                    yield chunk
                    return
                yield chunk
        else:
            yield "Error: No valid LLM provider configured or selected for streaming."


    @staticmethod
    def suggest_followup_questions(context_text: str) -> Tuple[Dict[str, Any], int]: # Parameter renamed to context_text
        """
        Suggests 3 concise, deeper follow-up questions based on the provided context_text (user's query).
        Also, optionally suggests similar anime if a primary anime was discussed.
        Returns a dictionary with 'suggested_questions' (list of strings) and 'similar_anime_note' (optional string).
        """
        if not context_text:
            return {"suggested_questions": [], "similar_anime_note": None}, 200

        current_llm = Config.CURRENT_GENERATION_LLM
        print(f"DEBUG: Attempting to generate suggested questions using LLM: {current_llm}")

        # Enhanced prompt for deeper, strictly '|||'-separated questions and optional similar anime note
        # This prompt is specific to generating questions and similar anime,
        # so it doesn't need the full MUSHI_SYSTEM_PROMPT.
        # The OllamaLLMService's generate_content already injects the system prompt.
        question_generation_prompt = f"""
Based on the following user query, generate 3 concise, insightful, and relevant follow-up questions.
Each question MUST be distinct and encourage deeper exploration of the topic discussed.

--- STRICT FORMATTING RULES ---
1.  **Output ONLY 3 questions.**
2.  **Separate each question ONLY with "|||".**
3.  **NO prefixes, numbering, or introductory phrases WHATSOEVER.** This includes, but is not limited to, phrases like "Question 1", "Question 2", "Question Suggestion", "Here are some questions:", "Here's the thing,", "So,", "And here's what I found interesting,", "Consider these questions:", "Suggested questions:", or any bullet points/numbering.
4.  **Each question must be a complete, direct sentence ending with a question mark.**

Example of Expected Output for Questions: "What are the main abilities of Monkey D. Luffy?|||Who are the key antagonists in the early arcs of One Piece?|||How does the concept of Devil Fruits impact the world of One Piece?"

--- OPTIONAL: SIMILAR ANIME NOTE ---
If the user query clearly relates to a specific anime title (e.g., "One Piece", "Naruto", "Attack on Titan"), you MUST also add a separate section at the very end of your response, wrapped in a markdown code block, exactly like this:
```
NOTE_SIMILAR_ANIME:
- [Anime 1]
- [Anime 2]
- [Anime 3]
```
If no specific anime is clearly identifiable from the user query, completely omit the markdown code block.

User Query:
{context_text}

Your Response (strictly adhere to rules above):
"""
        llm_raw_response: str | None = None
        if current_llm == "gemini":
            print("DEBUG: Calling GeminiLLMService.generate_content for suggested questions...")
            llm_raw_response = GeminiLLMService.generate_content(question_generation_prompt)
        elif current_llm == "ollama_anime": # Specific Ollama anime model
            print("DEBUG: Calling OllamaLLMService.generate_content (Anime Model) for suggested questions...")
            # For non-streaming endpoint, call generate_content and get the full string
            llm_raw_response_generator = OllamaLLMService(model_name=Config.OLLAMA_ANIME_MODEL_NAME).generate_content(question_generation_prompt)
            llm_raw_response = "".join(list(llm_raw_response_generator)) # Collect all parts
        elif current_llm == "ollama_qwen": # Specific Ollama Qwen model
            print("DEBUG: Calling OllamaLLMService.generate_content (Qwen Model) for suggested questions...")
            # For non-streaming endpoint, call generate_content and get the full string
            llm_raw_response_generator = OllamaLLMService(model_name=Config.OLLAMA_QWEN_MODEL_NAME).generate_content(question_generation_prompt)
            llm_raw_response = "".join(list(llm_raw_response_generator)) # Collect all parts
        else:
            return {"suggested_questions": [], "similar_anime_note": "Error: No valid LLM provider configured for question suggestion."}, 500

        if llm_raw_response is None or llm_raw_response.startswith("Error:"):
            error_message = llm_raw_response if llm_raw_response else "No content returned for suggested questions."
            print(f"LLM Error for suggested questions from service '{current_llm}': {error_message}")
            return {"suggested_questions": [], "similar_anime_note": error_message}, 500 # Propagate service-specific errors
        else:
            # Parse the response: separate questions from the optional note
            suggested_questions_part = llm_raw_response
            similar_anime_note: Optional[str] = None

            # Use regex to find the code block containing NOTE_SIMILAR_ANIME:
            # This regex looks for a markdown code block starting with `NOTE_SIMILAR_ANIME:`
            match = re.search(r'```(?:.*?)\s*NOTE_SIMILAR_ANIME:\s*\n(.*?)\n```', llm_raw_response, re.DOTALL)

            if match:
                similar_anime_content = match.group(1).strip()
                # Frontend expects "Similar anime: " followed by the content.
                # The code block ensures it's readable.
                similar_anime_note = f"Similar anime: \n```\n{similar_anime_content}\n```"

                # Remove the entire code block from the original response to get just the questions part
                suggested_questions_part = re.sub(r'```(?:.*?)\s*NOTE_SIMILAR_ANIME:.*?\n```', '', llm_raw_response, flags=re.DOTALL).strip()

            # Split questions using the "|||" delimiter
            questions = [q.strip() for q in suggested_questions_part.split('|||') if q.strip()]

            # Ensure questions are clean (remove stray punctuation at the end)
            final_questions = [q.rstrip('.?!') for q in questions if q.strip()]

            # Limit to top 3 questions
            final_questions = final_questions[:3]

            response_data = {
                "suggested_questions": final_questions,
                "similar_anime_note": similar_anime_note
            }
            print(f"LLM Response Generated Successfully for suggested questions: {response_data}")
            return response_data, 200

--- FILE_END: ./backend/controllers/llm_controller.py ---

--- FILE_START: ./backend/controllers/data_controller.py ---
# backend/controllers/data_controller.py
import logging
from typing import Tuple, List, Dict, Any, Optional # Added Optional

# Import the ClusteringService
from services.clustering_service import ClusteringService
# Import the DataEmbeddingService and global_vector_store
from services.data_embedding_service import DataEmbeddingService
from globals import global_vector_store # Needed to save the vector store

logger = logging.getLogger(__name__)

class DataController:
    """
    Manages data-related operations, including retrieving clustered document data
    and triggering data ingestion processes.
    """
    # This class will hold the ClusteringService and DataEmbeddingService instances.
    _clustering_service: ClusteringService | None = None
    _data_embedding_service: DataEmbeddingService | None = None

    @classmethod
    def initialize(cls, clustering_service: ClusteringService, data_embedding_service: DataEmbeddingService):
        """Initializes the DataController with service instances."""
        if cls._clustering_service is None:
            cls._clustering_service = clustering_service
            logger.info("DataController: Initialized with ClusteringService.")
        else:
            logger.warning("DataController: ClusteringService already initialized.")

        if cls._data_embedding_service is None:
            cls._data_embedding_service = data_embedding_service
            logger.info("DataController: Initialized with DataEmbeddingService.")
        else:
            logger.warning("DataController: DataEmbeddingService already initialized.")

    @classmethod
    def get_clustered_documents(cls, num_clusters: int = 5) -> Tuple[Dict[str, Any], int]:
        """
        Retrieves documents from the vector store and applies clustering.
        Args:
            num_clusters (int): The desired number of clusters.
        Returns:
            Tuple[Dict[str, Any], int]: A dictionary of clustered documents and HTTP status code.
        """
        if cls._clustering_service is None:
            logger.error("DataController: ClusteringService not initialized.")
            return {"error": "Clustering service not available."}, 500

        logger.info(f"DataController: Retrieving clustered documents with {num_clusters} clusters...")
        try:
            # Ensure the vector store is loaded before attempting to cluster
            global_vector_store.load()
            clustered_data = cls._clustering_service.get_clustered_documents(num_clusters)
            logger.info(f"DataController: Successfully retrieved clustered data with {len(clustered_data['clusters'])} clusters.")
            return clustered_data, 200
        except Exception as e:
            logger.error(f"DataController: Error retrieving clustered documents: {e}")
            return {"error": f"Failed to retrieve clustered documents: {str(e)}"}, 500

    @classmethod
    def ingest_ann_data(cls, limit: int = 100) -> Tuple[Dict[str, Any], int]:
        """
        Triggers the ingestion and embedding of recent ANN data into the vector store.
        Args:
            limit (int): The maximum number of ANN items to fetch and process.
        Returns:
            Tuple[Dict[str, Any], int]: A message indicating success/failure and status code.
        """
        if cls._data_embedding_service is None:
            logger.error("DataController: DataEmbeddingService not initialized.")
            return {"error": "Data embedding service not available. Cannot ingest ANN data."}, 500

        logger.info(f"DataController: Starting ANN data ingestion with limit={limit}...")
        try:
            processed_count, failed_count = cls._data_embedding_service.embed_ann_details_data(limit=limit)
            global_vector_store.save() # Save the vector store after ingestion
            message = f"ANN data ingestion complete. Processed {processed_count} items. Failed: {failed_count}."
            logger.info(message)
            return {"message": message, "processed_count": processed_count, "failed_count": failed_count}, 200
        except Exception as e:
            logger.error(f"DataController: Error during ANN data ingestion: {e}")
            return {"error": f"Failed to ingest ANN data: {str(e)}"}, 500

    @classmethod
    def ingest_aniwatch_data(cls, limit: int = 100, page_limit: int = 5) -> Tuple[Dict[str, Any], int]:
        """
        Triggers the ingestion and embedding of Aniwatch anime data into the vector store.
        Args:
            limit (int): The maximum number of Aniwatch anime items to fetch and process.
            page_limit (int): The maximum number of A-Z list pages to fetch from Aniwatch API.
        Returns:
            Tuple[Dict[str, Any], int]: A message indicating success/failure and status code.
        """
        if cls._data_embedding_service is None:
            logger.error("DataController: DataEmbeddingService not initialized.")
            return {"error": "Data embedding service not available. Cannot ingest Aniwatch data."}, 500

        logger.info(f"DataController: Starting Aniwatch data ingestion with limit={limit}, page_limit={page_limit}...")
        try:
            processed_count, failed_count = cls._data_embedding_service.embed_aniwatch_data(limit=limit, page_limit=page_limit)
            global_vector_store.save() # Save the vector store after ingestion
            message = f"Aniwatch data ingestion complete. Processed {processed_count} items. Failed: {failed_count}."
            logger.info(message)
            return {"message": message, "processed_count": processed_count, "failed_count": failed_count}, 200
        except Exception as e:
            logger.error(f"DataController: Error during Aniwatch data ingestion: {e}")
            return {"error": f"Failed to ingest Aniwatch data: {str(e)}"}, 500

    @classmethod
    def ingest_anime_api_data(cls, limit: int = 100) -> Tuple[Dict[str, Any], int]:
        """
        Triggers the ingestion and embedding of data from the new 'anime-api' Node.js project.
        Args:
            limit (int): The maximum number of anime items to fetch and process.
        Returns:
            Tuple[Dict[str, Any], int]: A message indicating success/failure and status code.
        """
        if cls._data_embedding_service is None:
            logger.error("DataController: DataEmbeddingService not initialized.")
            return {"error": "Data embedding service not available. Cannot ingest Anime API data."}, 500

        logger.info(f"DataController: Starting Anime API data ingestion with limit={limit}...")
        try:
            processed_count, failed_count = cls._data_embedding_service.embed_anime_api_data(limit=limit)
            global_vector_store.save()
            message = f"Anime API data ingestion complete. Processed {processed_count} items. Failed: {failed_count}."
            logger.info(message)
            return {"message": message, "processed_count": processed_count, "failed_count": failed_count}, 200
        except Exception as e:
            logger.error(f"DataController: Error during Anime API data ingestion: {e}")
            return {"error": f"Failed to ingest Anime API data: {str(e)}"}, 500

    @classmethod
    def ingest_anime_api_category_data(cls, categories: Optional[List[str]] = None, limit_per_category: int = 50) -> Tuple[Dict[str, Any], int]:
        """
        Triggers the ingestion of data from specific categories of the 'anime-api' Node.js project.
        Args:
            categories (List[str]): A list of categories to ingest. If None, default categories will be used.
            limit_per_category (int): The maximum number of anime titles to fetch and process per category.
        Returns:
            Tuple[Dict[str, Any], int]: A message indicating success/failure and status code.
        """
        if cls._data_embedding_service is None:
            logger.error("DataController: DataEmbeddingService not initialized.")
            return {"error": "Data embedding service not available. Cannot ingest AnimeAPI category data."}, 500

        logger.info(f"DataController: Starting Anime API category data ingestion for categories: {categories}, limit_per_category={limit_per_category}...")
        try:
            processed_count, failed_count = cls._data_embedding_service.embed_anime_api_category_data(
                categories=categories, limit_per_category=limit_per_category
            )
            global_vector_store.save()
            message = f"Anime API category data ingestion complete. Processed {processed_count} items. Failed: {failed_count}."
            logger.info(message)
            return {"message": message, "processed_count": processed_count, "failed_count": failed_count}, 200
        except Exception as e:
            logger.error(f"DataController: Error during Anime API category data ingestion: {e}")
            return {"error": f"Failed to ingest Anime API category data: {str(e)}"}, 500

    @classmethod
    def ingest_all_data(cls) -> Tuple[Dict[str, Any], int]:
        """
        Triggers the ingestion and embedding of data from ALL configured sources
        into the vector store. This includes One Piece, ANN, Aniwatch, and Anime API data.
        It performs de-duplication automatically.
        """
        if cls._data_embedding_service is None:
            logger.error("DataController: DataEmbeddingService not initialized.")
            return {"error": "Data embedding service not available. Cannot ingest all data."}, 500

        logger.info("DataController: Starting ingestion of all data sources...")
        try:
            cls._data_embedding_service.embed_all_data() # This method handles saving internally
            message = "All data sources ingestion complete. Vector store updated."
            logger.info(message)
            return {"message": message}, 200
        except Exception as e:
            logger.error(f"DataController: Error during all data ingestion: {e}")
            return {"error": f"Failed to ingest all data: {str(e)}"}, 500

--- FILE_END: ./backend/controllers/data_controller.py ---

--- FILE_START: ./backend/controllers/anime_controller.py ---
# backend/controllers/anime_controller.py
from flask import Blueprint, jsonify, request, Response
from services.anime_api_service import AnimeAPIService
import logging
import re # Import regex for parsing data_id from episode id
import requests # Import requests for proxying
import urllib3

# Suppress only the InsecureRequestWarning from urllib3, which is generated by verify=False
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logger = logging.getLogger(__name__)

class AnimeController:
    """
    Controller for handling data from the new 'anime-api' Node.js project.
    It calls the AnimeAPIService to fetch raw data and then formats it for the Flask API response.
    """
    def __init__(self):
        self.anime_api_service = AnimeAPIService()
        logger.info("AnimeController: Initialized.")

    def _ensure_is_list(self, value):
        """Helper to ensure a value is a list."""
        if isinstance(value, list):
            return value
        if isinstance(value, str):
            return [value]
        return []

    def _format_search_results(self, anime_list: list) -> list:
        """Helper to format the specific structure from the /api/search endpoint."""
        formatted = []
        if not isinstance(anime_list, list):
            logger.warning(f"Search result data for formatting is not a list: {type(anime_list)}")
            return []

        for anime in anime_list:
            if not isinstance(anime, dict) or not anime.get("id"):
                continue
            formatted.append({
                "id": anime.get("id"),
                "title": anime.get("title"),
                "poster_url": anime.get("poster"),
                "jname": anime.get("japanese_title"),
                "show_type": anime.get("showType"),
                "score": None
            })
        return formatted

    def get_home_page_data(self) -> tuple[dict, int]:
        logger.debug("AnimeController: Fetching home page data.")
        raw_data, status_code = self.anime_api_service.get_home_info()

        if status_code != 200:
            return raw_data, status_code

        if not raw_data or not raw_data.get('success') or 'results' not in raw_data:
            logger.error("AnimeController: Invalid or missing 'results' in home page data.")
            return {"error": "Invalid data format from external API."}, 500

        results = raw_data['results']

        formatted_home_data = {
            "spotlights": self._format_anime_list_home(results.get("spotlights", [])),
            "trending": self._format_anime_list_home(results.get("trending", [])),
            "today_schedule": self._format_anime_list_home(results.get("today_schedule", [])),
            "top_airing": self._format_anime_list_home(results.get("top_airing", [])),
            "most_popular": self._format_anime_list_home(results.get("most_popular", [])),
            "most_favorite": self._format_anime_list_home(results.get("most_favorite", [])),
            "latest_completed": self._format_anime_list_home(results.get("latest_completed", [])),
            "latest_episode": self._format_anime_list_home(results.get("latest_episode", [])),
            "genres": results.get("genres", [])
        }
        return formatted_home_data, 200

    def get_top_ten_anime_data(self) -> tuple[dict, int]:
        logger.debug("AnimeController: Fetching top ten anime data.")
        raw_data, status_code = self.anime_api_service.get_top_ten_anime()
        if status_code != 200:
            return raw_data, status_code
        results_dict = raw_data.get("results", {}).get("topTen", {})
        return {
            "today": self._format_anime_list_common(results_dict.get("today", [])),
            "week": self._format_anime_list_common(results_dict.get("week", [])),
            "month": self._format_anime_list_common(results_dict.get("month", []))
        }, 200

    def search_anime_data(self, query: str, page: int = 1) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Searching anime for query: {query}, page: {page}")
        raw_data, status_code = self.anime_api_service.search_anime(query, page)
        if status_code != 200:
            return raw_data, status_code

        results_dict = raw_data.get("results", {})
        anime_list = results_dict.get("data", []) if isinstance(results_dict, dict) else []
        total_pages = results_dict.get("totalPages", 1) if isinstance(results_dict, dict) else 1

        formatted_results = {
            "results": self._format_search_results(anime_list),
            "totalPages": total_pages
        }
        return formatted_results, 200

    def get_anime_by_category_data(self, category: str, page: int = 1) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching anime by category: {category}, page: {page}")
        raw_data, status_code = self.anime_api_service.get_anime_by_category(category, page)
        if status_code != 200:
            return raw_data, status_code

        results_dict = raw_data.get("results", {})
        anime_list = results_dict.get("data", []) if isinstance(results_dict, dict) else []
        total_pages = results_dict.get("totalPages", 1) if isinstance(results_dict, dict) else 1

        formatted_results = {
            "data": self._format_anime_list_common(anime_list),
            "totalPages": total_pages
        }
        return formatted_results, 200

    def get_anime_details_data(self, anime_id: str) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching comprehensive details for anime ID: {anime_id}")

        main_info_data, main_info_status = self.anime_api_service.get_anime_info(anime_id)
        if main_info_status != 200 or not main_info_data.get('success'):
            logger.error(f"AnimeController: Failed to fetch main info for {anime_id}. Status: {main_info_status}, Data: {main_info_data}")
            return {"error": f"Failed to retrieve main anime details: {main_info_data.get('message', 'Unknown error')}"}, main_info_status

        results = main_info_data.get('results', {})
        anime_data = results.get('data', {})
        anime_info_nested = anime_data.get('animeInfo', {})

        if not anime_data:
            logger.error(f"AnimeController: No 'data' found in results for main info of {anime_id}.")
            return {"error": "No anime details found for the given ID."}, 404

        formatted_details = {
            "id": anime_data.get("id"),
            "data_id": anime_data.get("data_id"),
            "title": anime_data.get("title"),
            "japanese_title": anime_data.get("japanese_title"),
            "synonyms": self._ensure_is_list(anime_info_nested.get("Synonyms")),
            "poster_url": anime_data.get("poster"),
            "trailer_url": anime_data.get("trailer"),
            "synopsis": anime_info_nested.get("Overview"),
            "show_type": anime_data.get("showType"),
            "status": anime_info_nested.get("Status"),
            "aired": anime_info_nested.get("Aired"),
            "premiered": anime_info_nested.get("Premiered"),
            "broadcast": anime_data.get("broadcast"),
            "producers": self._ensure_is_list(anime_info_nested.get("Producers")),
            "licensors": self._ensure_is_list(anime_data.get("licensors")),
            "studios": self._ensure_is_list(anime_info_nested.get("Studios")),
            "source": anime_data.get("source"),
            "genres": self._ensure_is_list(anime_info_nested.get("Genres")),
            "duration": anime_info_nested.get("Duration"),
            "rating": anime_data.get("rating"),
            "mal_score": anime_info_nested.get("MAL Score"),
            "scored_by": anime_data.get("scored_by"),
            "rank": anime_data.get("rank"),
            "popularity": anime_data.get("popularity"),
            "members": anime_data.get("members"),
            "favorites": anime_data.get("favorites"),
            "total_episodes_count": anime_data.get("total_episodes"),
            "episodes": [],
            "characters_voice_actors": [],
            "seasons": self._format_seasons(results.get("seasons", [])),
            "related_anime": [],
            "recommended_anime": []
        }

        episodes_data, episodes_status = self.anime_api_service.get_episode_list(anime_id)
        if episodes_status == 200 and episodes_data.get('success'):
            episode_list = episodes_data.get("results", {}).get("episodes", [])
            formatted_details["episodes"] = self._format_episodes(episode_list)
        else:
            logger.warning(f"AnimeController: Failed to fetch episodes for {anime_id}. Status: {episodes_status}, Data: {episodes_data}")

        characters_data, characters_status = self.anime_api_service.get_characters_list(anime_id)
        if characters_status == 200 and characters_data.get('success'):
            formatted_details["characters_voice_actors"] = self._format_characters_voice_actors(characters_data.get("results", []))
        else:
            logger.warning(f"AnimeController: Failed to fetch characters for {anime_id}. Status: {characters_status}, Data: {characters_data}")

        related_data, related_status = self.anime_api_service.get_related_anime(anime_id)
        if related_status == 200 and related_data.get('success'):
            formatted_details["related_anime"] = self._format_anime_list_common(related_data.get("results", []))
        else:
            logger.warning(f"AnimeController: Failed to fetch related anime for {anime_id}. Status: {related_status}, Data: {related_data}")

        recommended_data, recommended_status = self.anime_api_service.get_recommended_anime(anime_id)
        if recommended_status == 200 and recommended_data.get('success'):
            formatted_details["recommended_anime"] = self._format_anime_list_common(recommended_data.get("results", []))
        else:
            logger.warning(f"AnimeController: Failed to fetch recommended anime for {anime_id}. Status: {recommended_status}, Data: {recommended_data}")

        return formatted_details, 200

    def get_qtip_info_data(self, qtip_id: int) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching Qtip info for ID: {qtip_id}")
        raw_data, status_code = self.anime_api_service.get_qtip_info(qtip_id)
        if status_code != 200:
            return raw_data, status_code
        return raw_data.get("results", {}), 200

    def get_character_details_data(self, character_id: str) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching character details for ID: {character_id}")
        raw_data, status_code = self.anime_api_service.get_character_details(character_id)
        if status_code != 200:
            return raw_data, status_code
        return self._format_character_details(raw_data.get("results", {})), 200

    def get_voice_actor_details_data(self, actor_id: str) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching voice actor details for ID: {actor_id}")
        raw_data, status_code = self.anime_api_service.get_voice_actor_details(actor_id)
        if status_code != 200:
            return raw_data, status_code
        return self._format_voice_actor_details(raw_data.get("results", {})), 200

    def get_available_servers_data(self, anime_id: str, episode_data_id: str) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching servers for anime ID: {anime_id}, episode data_id: {episode_data_id}")
        raw_data, status_code = self.anime_api_service.get_available_servers(anime_id, episode_data_id)
        if status_code != 200:
            return raw_data, status_code
        return {"servers": self._format_servers(raw_data.get("results", []))}, 200

    def get_streaming_info_data(self, episode_id: str, server_id: str, stream_type: str) -> tuple[dict, int]:
        logger.debug(f"AnimeController: Fetching streaming info for episode ID: {episode_id}, server ID: {server_id}, type: {stream_type}")
        raw_data, status_code = self.anime_api_service.get_streaming_info(episode_id, server_id, stream_type)
        if status_code != 200:
            return raw_data, status_code
        return {"streaming_links": self._format_streaming_info(raw_data.get("results", {}))}, 200

    def _format_anime_list_home(self, anime_list: list) -> list:
        formatted = []
        for anime in anime_list:
            if not anime.get("id"):
                continue
            formatted.append({
                "id": anime.get("id"),
                "title": anime.get("title"),
                "poster_url": anime.get("poster"),
                "jname": anime.get("jname"),
                "show_type": anime.get("type"),
                "score": anime.get("score")
            })
        return formatted

    def _format_anime_list_common(self, anime_list: list) -> list:
        formatted = []
        if not isinstance(anime_list, list):
             logger.warning(f"Data for formatting is not a list: {type(anime_list)}")
             return []

        for anime in anime_list:
            if not isinstance(anime, dict) or not anime.get("id"):
                continue
            formatted.append({
                "id": anime.get("id"),
                "title": anime.get("title"),
                "poster_url": anime.get("poster"),
                "jname": anime.get("jname"),
                "show_type": anime.get("type"),
                "score": anime.get("score")
            })
        return formatted

    def _format_episodes(self, episodes_list: list) -> list:
        formatted = []
        if not isinstance(episodes_list, list):
            logger.error(f"Cannot format episodes, expected a list but got {type(episodes_list)}")
            return []

        for episode in episodes_list:
            if not isinstance(episode, dict):
                logger.warning(f"Skipping episode formatting because item is not a dictionary: {episode}")
                continue

            episode_id_from_node = episode.get("id")
            extracted_data_id = episode.get("data_id")

            if extracted_data_id is None and episode_id_from_node:
                match = re.search(r'\?ep=(\d+)', episode_id_from_node)
                if match:
                    extracted_data_id = match.group(1)
                    logger.info(f"Extracted data_id: {extracted_data_id} from episode ID: {episode_id_from_node}")
                else:
                    logger.warning(f"Could not extract data_id from episode ID: {episode_id_from_node}")

            formatted.append({
                "id": episode_id_from_node,
                "episode_no": episode.get("episode"),
                "data_id": extracted_data_id,
                "title": episode.get("title"),
                "japanese_title": episode.get("japanese_title")
            })
        return formatted

    def _format_seasons(self, seasons_list: list) -> list:
        formatted = []
        for season in seasons_list:
            formatted.append({
                "id": season.get("id"),
                "data_number": season.get("data_number"),
                "data_id": season.get("data_id"),
                "season_name": season.get("season"),
                "title": season.get("title"),
                "japanese_title": season.get("japanese_title"),
                "season_poster_url": season.get("season_poster")
            })
        return formatted

    def _format_characters_voice_actors(self, characters_data: list) -> list:
        formatted = []
        for char_info in characters_data:
            character = char_info.get("character", {})
            voice_actors = char_info.get("voiceActors", [])
            formatted_v_actors = []
            for va in voice_actors:
                formatted_v_actors.append({
                    "id": va.get("id"),
                    "name": va.get("name"),
                    "poster_url": va.get("poster")
                })
            formatted.append({
                "character_id": character.get("id"),
                "character_name": character.get("name"),
                "character_poster_url": character.get("poster"),
                "character_cast": character.get("cast"),
                "voice_actors": formatted_v_actors
            })
        return formatted

    def _format_character_details(self, character_data: dict) -> dict:
        if not character_data:
            return {}
        return {
            "id": character_data.get("id"),
            "name": character_data.get("name"),
            "poster_url": character_data.get("poster"),
            "description": character_data.get("description"),
            "animeography": self._format_anime_list_common(character_data.get("animeography", [])),
            "mangaography": character_data.get("mangaography", []),
            "voice_actors": self._format_characters_voice_actors([{"voiceActors": character_data.get("voiceActors", [])}]).pop().get("voice_actors", [])
        }

    def _format_voice_actor_details(self, actor_data: dict) -> dict:
        if not actor_data:
            return {}
        return {
            "id": actor_data.get("id"),
            "name": actor_data.get("name"),
            "poster_url": actor_data.get("poster"),
            "description": actor_data.get("description"),
            "language": actor_data.get("language"),
            "characters_played": self._format_characters_voice_actors(actor_data.get("characters_played", []))
        }

    def _format_servers(self, servers_list: list) -> list:
        formatted = []
        for server in servers_list:
            formatted.append({
                "type": server.get("type"),
                "data_id": server.get("data_id"),
                "server_id": server.get("server_id"),
                "server_name": server.get("serverName")
            })
        return formatted

    def _format_streaming_info(self, streaming_info_results: dict) -> list:
        """Helper to format streaming info, specifically extracting links and headers."""
        if not streaming_info_results:
            logger.warning("Streaming info results are empty.")
            return []

        headers = streaming_info_results.get("headers", {})
        links = []

        streaming_link_data = streaming_info_results.get("streamingLink", streaming_info_results.get("link"))

        if not streaming_link_data:
            logger.warning("No 'streamingLink' or 'link' key found in results.")
            return []

        if not isinstance(streaming_link_data, list):
            streaming_link_list = [streaming_link_data]
        else:
            streaming_link_list = streaming_link_data

        for link_details in streaming_link_list:
            if isinstance(link_details, dict):
                file_value = link_details.get("file", link_details.get("link"))
                file_url = ""
                if isinstance(file_value, dict):
                    file_url = file_value.get("file")
                elif isinstance(file_value, str):
                    file_url = file_value

                if file_url:
                    links.append({
                        "file": file_url,
                        "server": link_details.get("server"),
                        "type": link_details.get("type"),
                        "headers": headers
                    })
        return links

    def proxy_video_stream(self, video_url: str, referer: str = None):
        """
        Acts as a proxy to fetch a video stream from a given URL.
        This helps to circumvent CORS issues and SSL errors from the source.
        """
        logger.debug(f"AnimeController: Proxying video stream for URL: {video_url} with Referer: {referer}")
        try:
            if not isinstance(video_url, str) or not video_url.startswith('http'):
                raise requests.exceptions.InvalidURL(f"Invalid URL received for proxy: {video_url}")

            s = requests.Session()
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            if referer:
                headers['Referer'] = referer
                logger.info(f"Using provided referer: {referer}")
            else:
                headers['Referer'] = 'https://megacloud.club/'
                logger.warning(f"No referer provided. Using fallback: {headers['Referer']}")

            req = s.get(video_url, headers=headers, stream=True, timeout=60, verify=False)
            req.raise_for_status()

            content_type = req.headers.get('Content-Type', 'application/octet-stream')
            if 'mpegurl' in content_type or '.m3u8' in video_url:
                logger.info("Proxying M3U8 playlist. Rewriting URLs...")
                playlist_content = req.text
                base_proxy_url = f"{request.url_root}api/anime/proxy-stream"
                rewritten_playlist = re.sub(
                    r'^(?!#)(.*)$',
                    lambda match: f"{base_proxy_url}?url={requests.utils.quote(video_url.rsplit('/', 1)[0] + '/' + match.group(1))}&referer={requests.utils.quote(headers['Referer'])}",
                    playlist_content,
                    flags=re.MULTILINE
                )
                return Response(rewritten_playlist, content_type=content_type, status=req.status_code)

            def generate():
                for chunk in req.iter_content(chunk_size=8192):
                    if chunk:
                        yield chunk

            return Response(generate(), content_type=content_type, status=req.status_code)

        except requests.exceptions.InvalidURL as e:
            logger.error(f"AnimeController: Invalid URL for proxying: {e}")
            return Response(f"Invalid URL provided: {video_url}", status=502)
        except requests.exceptions.RequestException as e:
            logger.error(f"AnimeController: Error proxying video stream from {video_url}: {e}")
            return Response(f"Error proxying video: {e}", status=502)

anime_controller = AnimeController()

--- FILE_END: ./backend/controllers/anime_controller.py ---

--- FILE_START: ./backend/controllers/__init__.py ---

--- FILE_END: ./backend/controllers/__init__.py ---

--- FILE_START: ./backend/controllers/aniwatch_controller.py ---
# backend/controllers/aniwatch_controller.py
import logging
from services.aniwatch_api_service import AniwatchAPIService

logger = logging.getLogger(__name__)

class AniwatchController:
    """
    Controller for handling data from the Aniwatch API.
    It primarily acts as an intermediary, calling the AniwatchAPIService
    to fetch raw data and then potentially formatting it for further use
    or direct API responses.
    """
    def __init__(self):
        self.aniwatch_service = AniwatchAPIService()
        logger.info("AniwatchController: Initialized.")

    def get_aniwatch_az_list_data(self, sort_option: str = "all", page: int = 1):
        """
        Fetches the A-Z anime list from Aniwatch API.
        Args:
            sort_option (str): How to sort the list (e.g., "all", "trending", "popular").
            page (int): The page number.
        Returns:
            tuple[dict, int]: The JSON response data and HTTP status code.
        """
        logger.debug(f"AniwatchController: Fetching A-Z list for sort_option='{sort_option}', page={page}.")
        data, status_code = self.aniwatch_service.get_az_list(sort_option=sort_option, page=page)
        return data, status_code

    def get_aniwatch_anime_details_data(self, anime_id: str):
        """
        Fetches detailed information for a specific anime from Aniwatch API.
        Args:
            anime_id (str): The ID of the anime.
        Returns:
            tuple[dict, int]: The JSON response data and HTTP status code.
        """
        logger.debug(f"AniwatchController: Fetching details for anime ID='{anime_id}'.")
        data, status_code = self.aniwatch_service.get_anime_info(anime_id=anime_id)
        return data, status_code

    def get_aniwatch_trending_anime_data(self):
        """
        Fetches trending anime from Aniwatch API.
        Returns:
            tuple[dict, int]: The JSON response data and HTTP status code.
        """
        logger.debug("AniwatchController: Fetching trending anime.")
        data, status_code = self.aniwatch_service.get_trending()
        return data, status_code

    def get_aniwatch_popular_anime_data(self):
        """
        Fetches popular anime from Aniwatch API.
        Returns:
            tuple[dict, int]: The JSON response data and HTTP status code.
        """
        logger.debug("AniwatchController: Fetching popular anime.")
        data, status_code = self.aniwatch_service.get_popular()
        return data, status_code

    def search_aniwatch_anime_data(self, keyword: str):
        """
        Searches anime on Aniwatch API by keyword.
        Args:
            keyword (str): The search term.
        Returns:
            tuple[dict, int]: The JSON response data and HTTP status code.
        """
        logger.debug(f"AniwatchController: Searching Aniwatch for keyword='{keyword}'.")
        data, status_code = self.aniwatch_service.search_anime(query=keyword)
        return data, status_code

--- FILE_END: ./backend/controllers/aniwatch_controller.py ---

--- FILE_START: ./backend/controllers/one_piece_controller.py ---
# backend/controllers/one_piece_controller.py
from services.one_piece_api_service import OnePieceAPIService

class OnePieceController:
    """
    Controller for handling One Piece manga/anime data.
    Interacts with the OnePieceAPIService and prepares data for API routes.
    """

    @staticmethod
    def get_sagas_data():
        """
        Fetches all One Piece sagas and formats them for the API response.
        """
        sagas = OnePieceAPIService.get_all_sagas()
        if sagas is None:
            return {"error": "Could not retrieve One Piece sagas."}, 500

        # Basic formatting (you can expand this with more fields if the API provides them)
        formatted_sagas = []
        for saga in sagas:
            formatted_sagas.append({
                "id": saga.get("id"),
                "title": saga.get("title"),
                "number_of_arcs": saga.get("number_of_arcs") # Example field
                # Add other fields from the API response as desired
            })
        return formatted_sagas, 200

    @staticmethod
    def get_characters_data():
        """
        Fetches all One Piece characters and formats them for the API response.
        """
        characters = OnePieceAPIService.get_all_characters()
        if characters is None:
            return {"error": "Could not retrieve One Piece characters."}, 500

        formatted_characters = []
        for char in characters:
            formatted_characters.append({
                "id": char.get("id"),
                "name": char.get("name"),
                "gender": char.get("gender"),
                "status": char.get("status")
                # Add other relevant fields (e.g., bounty, crew, etc.)
            })
        return formatted_characters, 200

    @staticmethod
    def get_fruits_data():
        """
        Fetches all One Piece fruits (Devil Fruits) and formats them for the API response.
        """
        fruits = OnePieceAPIService.get_all_fruits()
        if fruits is None:
            return {"error": "Could not retrieve One Piece fruits."}, 500

        formatted_fruits = []
        for fruit in fruits:
            formatted_fruits.append({
                "id": fruit.get("id"),
                "name": fruit.get("name"),
                "type": fruit.get("type"),
                "description": fruit.get("description")
            })
        return formatted_fruits, 200

--- FILE_END: ./backend/controllers/one_piece_controller.py ---

--- FILE_START: ./backend/controllers/news_controller.py ---
# backend/controllers/news_controller.py (FINALIZED FIX FOR ANN PARSING)
import xml.etree.ElementTree as ET
from services.ann_api_service import ANNAPIService
from flask import current_app, Blueprint, jsonify, request

# Create a Blueprint for news routes with the correct URL prefix
news_bp = Blueprint('news', __name__, url_prefix='/api/news')

class NewsController:
    """
    Controller for handling anime news and encyclopedia data from the ANN API.
    It calls the ANNAPIService to fetch raw data (expected XML) and then
    parses that XML into a structured dictionary/list format for the frontend.
    """
    def __init__(self):
        self.ann_service = ANNAPIService()

    def get_recent_news_articles(self, limit=10):
        """
        Fetches recent encyclopedia items (e.g., new anime titles) from ANN API via reports.
        Parses the XML response into a structured list.
        """
        print(f"DEBUG: NewsController: Fetching recent items (report 155, limit={limit})...")
        try:
            # Report ID 155 is specifically for recent anime items, so 'item_type="anime"'
            # is not a necessary parameter for reports.xml and can be removed.
            xml_root_or_error = self.ann_service.get_recent_items(report_id=155, limit=limit)

            # Handle errors returned from service (which are now dicts with 'error' and 'status_code')
            if isinstance(xml_root_or_error, dict) and "error" in xml_root_or_error:
                print(f"DEBUG: NewsController: Error from service: {xml_root_or_error.get('error')}")
                return xml_root_or_error, xml_root_or_error.get('status_code', 500)
            elif xml_root_or_error is None:
                print(f"DEBUG: NewsController: Failed to fetch recent items: Service returned no data (None).")
                return {"error": "Failed to fetch recent items: Service returned no data."}, 500
            elif ET.iselement(xml_root_or_error): # Check if it's an ElementTree root
                root = xml_root_or_error
                formatted_items = []

                # ANN reports.xml structure: <report><item><id>...</id><name>...</name>...</item></report>
                # The 'id', 'name', 'type', 'gid', 'precision', 'vintage' are child elements of <item>
                # We need to use .find("tag_name").text to get their values.
                for item_elem in root.findall('.//item'):
                    # Extract data from child elements, checking if the child element exists before accessing .text
                    item_data = {
                        "id": item_elem.find("id").text if item_elem.find("id") is not None else None,
                        "gid": item_elem.find("gid").text if item_elem.find("gid") is not None else None,
                        "type": item_elem.find("type").text if item_elem.find("type") is not None else None,
                        "name": item_elem.find("name").text if item_elem.find("name") is not None else None,
                        "precision": item_elem.find("precision").text if item_elem.find("precision") is not None else None,
                        "vintage": item_elem.find("vintage").text if item_elem.find("vintage") is not None else None
                    }

                    # Validation step
                    if item_data.get("id") and item_data.get("name"):
                        formatted_items.append(item_data)
                    else:
                        current_app.logger.warning(f"NewsController: Skipping item due to missing ID or Name: {item_data}")
                return formatted_items, 200
            else:
                print(f"DEBUG: NewsController: Unexpected response type from service: {type(xml_root_or_error)}")
                return {"error": "Unexpected data format from ANN API service."}, 500

        except Exception as e:
            print(f"DEBUG: NewsController: An unexpected error occurred in get_recent_news_articles: {e}")
            return {"error": f"An unexpected error occurred: {e}"}, 500

    def search_ann_titles(self, query: str):
        """
        Searches ANN encyclopedia for titles matching a query.
        """
        print(f"DEBUG: NewsController: Searching ANN titles for query: '{query}'")
        try:
            xml_root_or_error = self.ann_service.search_news_ann(query)

            if isinstance(xml_root_or_error, dict) and "error" in xml_root_or_error:
                print(f"DEBUG: NewsController: Error from service: {xml_root_or_error.get('error')}")
                return xml_root_or_error, xml_root_or_error.get('status_code', 500)
            elif xml_root_or_error is None:
                return {"error": "Failed to search titles: Service returned no data."}, 500
            elif ET.iselement(xml_root_or_error):
                root = xml_root_or_error
                titles = []
                # CORRECTED: For search results, the name is typically an attribute of the <title> tag
                for title_elem in root.findall('.//title'):
                    title_id = title_elem.get('id')
                    title_name = title_elem.get('name') # Get name from attribute
                    title_type = title_elem.get('type') # e.g., manga, anime, OAV, movie

                    if title_id and title_name:
                        titles.append({
                            "id": title_id,
                            "name": title_name,
                            "type": title_type
                        })
                print(f"DEBUG: NewsController: Found {len(titles)} titles for query '{query}'.")
                return titles, 200
            else:
                return {"error": "Unexpected data format from ANN API service."}, 500

        except Exception as e:
            print(f"DEBUG: NewsController: An error occurred in search_ann_titles: {e}")
            return {"error": f"An unexpected error occurred during search: {e}"}, 500


    def get_ann_title_details(self, title_id: int):
        """
        Fetches detailed information for a specific ANN title ID.
        """
        print(f"DEBUG: NewsController: Fetching details for title ID: {title_id}")
        try:
            xml_root_or_error = self.ann_service.get_news_title_ann(str(title_id))

            if isinstance(xml_root_or_error, dict) and "error" in xml_root_or_error:
                print(f"DEBUG: NewsController: Error from service: {xml_root_or_error.get('error')}")
                return xml_root_or_error, xml_root_or_error.get('status_code', 500)
            elif xml_root_or_error is None: # Corrected from === None to is None
                return {"error": "Failed to fetch title details: Service returned no data."}, 500
            elif ET.iselement(xml_root_or_error):
                root = xml_root_or_error
                # CORRECTED: For direct ID lookup, the item is typically an <anime>, <manga>, or <movie> tag
                # directly under the <ann> root, not a <title> tag.
                title_elem = None
                for child in root:
                    if child.tag in ['anime', 'manga', 'movie', 'ova', 'movie']: # Added 'ova' for completeness
                        title_elem = child
                        break

                if title_elem is None:
                    print(f"DEBUG: NewsController: No item element found for ID {title_id}.")
                    return {"error": f"Title with ID {title_id} not found or no details available."}, 404

                title_details = {
                    "id": title_elem.get('id'),
                    "type": title_elem.get('type'), # Get type directly from the <anime>/<manga>/<movie> tag
                    "genres": [],
                    "themes": [],
                    "staff": [],
                    "episodes": None,
                    "vintage": None,
                    "main_title": None,
                    "alternative_titles": [],
                    "description": None, # Will extract plot summary here
                    "related_titles": [] # Will extract related titles
                }

                # Extract info tags (Main title, Alternative title, Genres, Themes, Episodes, Vintage, Plot Summary)
                for info_elem in title_elem.findall('info'):
                    info_type = info_elem.get('type')
                    if info_type == "Main title":
                        title_details["main_title"] = info_elem.text
                    elif info_type == "Alternative title" and info_elem.text:
                        title_details["alternative_titles"].append(info_elem.text)
                    elif info_type == "Genres" and info_elem.text:
                        title_details["genres"].append(info_elem.text)
                    elif info_type == "Themes" and info_elem.text:
                        title_details["themes"].append(info_elem.text)
                    elif info_type == "Number of episodes" and info_elem.text:
                        try:
                            title_details["episodes"] = int(info_elem.text)
                        except (ValueError, TypeError):
                            title_details["episodes"] = None
                    elif info_type == "Vintage" and info_elem.text:
                        # Vintage can contain multiple dates (e.g., initial run, international release)
                        # For simplicity, taking the first one or concatenating
                        title_details["vintage"] = info_elem.text
                    elif info_type == "Plot Summary" and info_elem.text: # ADDED: Extract description (Plot Summary)
                        title_details["description"] = info_elem.text


                # Extract staff roles
                for staff_elem in title_elem.findall('staff'):
                    task = staff_elem.find('task').text if staff_elem.find('task') is not None else "Unknown Task"
                    person = staff_elem.find('person').text if staff_elem.find('person') is not None else "Unknown Person"
                    person_id = staff_elem.find('person').get('id') if staff_elem.find('person') is not None else None
                    title_details["staff"].append({
                        "task": task,
                        "person": person,
                        "person_id": person_id
                    })

                # Extract related titles (e.g., prequel, sequel, adapted from)
                # ANN uses tags like <related-prev>, <related-next>, <related-other>
                for related_elem in title_elem.findall('related-prev') + \
                                    title_elem.findall('related-next') + \
                                    title_elem.findall('related-other') + \
                                    title_elem.findall('related'): # Catch any generic 'related' tag
                    relation = related_elem.get('rel')
                    related_id = related_elem.get('id')

                    # Some related tags might have a 'type' or 'name' attribute, or a child 'title' tag.
                    # We'll prioritize attributes if available, then check for a child 'title'
                    related_type = related_elem.get('type')
                    related_name = related_elem.get('name')

                    # If name is not directly on the <related-*> tag, check for a child <title>
                    if not related_name:
                        child_title_elem = related_elem.find('title')
                        if child_title_elem is not None:
                            related_name = child_title_elem.text

                    if relation and related_id:
                        title_details["related_titles"].append({
                            "relation": relation,
                            "id": related_id,
                            "type": related_type, # May be None if not present
                            "name": related_name # May be None if not present
                        })


                print(f"DEBUG: NewsController: Successfully parsed details for title ID {title_id}.")
                return title_details, 200
            else:
                return {"error": "Unexpected data format from ANN API service."}, 500

        except Exception as e:
            print(f"DEBUG: NewsController: An error occurred in get_ann_title_details: {e}")
            return {"error": f"An error occurred while getting title details: {e}"}, 500

    def get_ann_staff_details(self, staff_id: int):
        """
        Fetches detailed information for a specific ANN staff ID.
        ANN API's /api.xml endpoint does not directly support 'person=ID' lookup reliably,
        as it often redirects to search results or requires a different approach for staff.
        This implementation will attempt a direct lookup, but may need refinement
        if the ANN API behavior is inconsistent.
        """
        print(f"DEBUG: NewsController: Fetching details for staff ID: {staff_id}")
        try:
            xml_root_or_error = self.ann_service.get_staff_ann(str(staff_id))

            if isinstance(xml_root_or_error, dict) and "error" in xml_root_or_error:
                print(f"DEBUG: NewsController: Error from service: {xml_root_or_error.get('error')}")
                return xml_root_or_error, xml_root_or_error.get('status_code', 500)
            elif xml_root_or_error is None:
                return {"error": "Failed to fetch staff details: Service returned no data."}, 500
            elif ET.iselement(xml_root_or_error):
                root = xml_root_or_error
                person_elem = root.find('person')
                if person_elem is None:
                    print(f"DEBUG: NewsController: No person element found for ID {staff_id}.")
                    return {"error": f"Staff with ID {staff_id} not found or no details available."}, 404

                staff_data = {
                    "id": person_elem.get('id'),
                    "name": person_elem.get('name'), # 'name' is an attribute of person
                    "birthdate": None,
                    "deathdate": None,
                    "gender": None,
                    "roles": []
                }

                # Extract info tags
                for info_elem in person_elem.findall('info'):
                    info_type = info_elem.get('type')
                    if info_type == "Birthdate":
                        staff_data["birthdate"] = info_elem.text
                    elif info_type == "Deathdate":
                        staff_data["deathdate"] = info_elem.text
                    elif info_type == "Gender":
                        staff_data["gender"] = info_elem.text

                # Extract staff roles (tasks)
                for task_elem in person_elem.findall('task'):
                    role = task_elem.text
                    title_id = task_elem.get('id') # Associated title ID
                    staff_data["roles"].append({
                        "role": role,
                        "title_id": title_id
                    })

                # Helper to convert single-item lists to single values for specific fields
                def unwrap_single_list_item(v):
                    return v[0] if isinstance(v, list) and len(v) == 1 else v

                # Apply unwrapping for fields that should be single values
                staff_data = {k: unwrap_single_list_item(v) for k, v in staff_data.items() if not isinstance(v, list) or v}

                print(f"DEBUG: NewsController: Successfully parsed details for staff ID {staff_id}.")
                return staff_data, 200

            else:
                return {"error": "Unexpected data format from ANN API service."}, 500

        except Exception as e:
            print(f"DEBUG: NewsController: An error occurred in get_ann_staff_details: {e}")
            return {"error": f"An error occurred while getting staff details: {e}"}, 500

# Initialize the controller
news_controller = NewsController()

# Define Flask routes using the Blueprint
@news_bp.route('/ann/search', methods=['GET'])
def ann_search_titles_route():
    query = request.args.get('q')
    if not query:
        return jsonify({"error": "Query parameter 'q' is required."}), 400

    titles, status_code = news_controller.search_ann_titles(query)
    return jsonify(titles), status_code

@news_bp.route('/ann/title/<int:title_id>', methods=['GET'])
def ann_get_title_details_route(title_id):
    details, status_code = news_controller.get_ann_title_details(title_id)
    return jsonify(details), status_code

@news_bp.route('/ann/staff/<int:staff_id>', methods=['GET'])
def ann_get_staff_details_route(staff_id):
    details, status_code = news_controller.get_ann_staff_details(staff_id)
    return jsonify(details), status_code

@news_bp.route('/ann/recent', methods=['GET'])
def ann_get_recent_news_articles_route():
    limit = request.args.get('limit', 10, type=int)
    articles, status_code = news_controller.get_recent_news_articles(limit=limit)
    return jsonify(articles), status_code

--- FILE_END: ./backend/controllers/news_controller.py ---

--- FILE_START: ./backend/routes/llm_api_routes.py ---
# backend/routes/llm_api_routes.py
from flask import Blueprint, jsonify, request, Response, stream_with_context # NEW: Import Response and stream_with_context
from controllers.llm_controller import LLMController # Import our LLMController

# Create a Blueprint for LLM-related API routes
# All routes defined in this blueprint will be prefixed with '/api/llm'
llm_api_bp = Blueprint('llm_api', __name__, url_prefix='/api/llm')

@llm_api_bp.route('/chat', methods=['POST'])
def chat_with_llm():
    """
    API endpoint for sending user queries to the configured LLM (Mushi).
    Expects a JSON body with a 'query' field.
    Returns a streaming response.
    """
    data = request.get_json()
    user_query = data.get('query')

    if not user_query:
        # For non-streaming error, we still return JSON with 400 status
        return jsonify({"error": "Missing 'query' field in request body."}), 400

    # Call the LLMController's streaming generation function
    # stream_with_context ensures the Flask app context is available within the generator
    response_generator = LLMController.generate_llm_response(user_query)

    # Return a streaming response with appropriate MIME type
    # Each yielded chunk from the generator will be sent directly to the client
    return Response(stream_with_context(response_generator), mimetype='text/event-stream')


@llm_api_bp.route('/providers', methods=['GET'])
def get_llm_providers_route():
    """
    API endpoint to get the list of available LLM providers.
    """
    # Calls a static method from LLMController to get the list
    return jsonify(LLMController.get_llm_providers()), 200

@llm_api_bp.route('/set-provider', methods=['POST'])
def set_llm_provider_route():
    """
    API endpoint to set the active LLM provider.
    Expects a JSON body with a 'provider' field.
    """
    data = request.get_json()
    provider_key = data.get('provider')

    # Calls a static method from LLMController to handle the logic
    message, status_code = LLMController.set_llm_provider(provider_key)
    return jsonify({"message": message}) if status_code == 200 else jsonify({"error": message}), status_code

@llm_api_bp.route('/current_provider', methods=['GET'])
def get_current_llm_provider_route():
    """
    API endpoint to get the currently selected LLM provider.
    This is called by the frontend's ProviderSelector on load.
    """
    # Calls a static method from LLMController
    current_provider_data, status_code = LLMController.get_current_llm_provider()
    return jsonify(current_provider_data), status_code

@llm_api_bp.route('/suggest-questions', methods=['POST'])
def suggest_questions_route():
    """
    API endpoint to get suggested follow-up questions from the LLM.
    Expects a JSON body with a 'content' field (the last LLM response).
    """
    data = request.get_json()
    last_response_text = data.get('content')

    if not last_response_text:
        return jsonify({"error": "Missing 'content' field in request body."}), 400

    suggested_data, status_code = LLMController.suggest_followup_questions(last_response_text)
    return jsonify(suggested_data), status_code


--- FILE_END: ./backend/routes/llm_api_routes.py ---

--- FILE_START: ./backend/routes/data_api_routes.py ---
# backend/routes/data_api_routes.py
from flask import Blueprint, jsonify, request
import logging

# Import the DataController
from controllers.data_controller import DataController

logger = logging.getLogger(__name__)

# Create a Blueprint for data-related API routes
# All routes defined in this blueprint will be prefixed with '/api/data'
data_api_bp = Blueprint('data_api', __name__, url_prefix='/api/data')

@data_api_bp.route('/clusters', methods=['GET'])
def get_clusters():
    """
    API endpoint for retrieving documents with their cluster assignments.
    Allows specifying the number of clusters via a query parameter.
    Example: GET /api/data/clusters?n_clusters=7
    """
    # Get the 'n_clusters' query parameter, default to 5 if not provided
    n_clusters_str = request.args.get('n_clusters', '5')
    try:
        n_clusters = int(n_clusters_str)
        if n_clusters <= 0:
            return jsonify({"error": "Number of clusters (n_clusters) must be a positive integer."}), 400
    except ValueError:
        return jsonify({"error": "Invalid value for 'n_clusters'. Must be an integer."}), 400

    logger.info(f"API Request: /api/data/clusters with n_clusters={n_clusters}")

    # Call the DataController to get the clustered documents
    response_data, status_code = DataController.get_clustered_documents(num_clusters=n_clusters)

    return jsonify(response_data), status_code

@data_api_bp.route('/ingest_ann_data', methods=['POST'])
def ingest_ann_data_route():
    """
    API endpoint to trigger the ingestion of recent ANN data into the vector store.
    Allows specifying the limit of items to process via a query parameter.
    Example: POST /api/data/ingest_ann_data?limit=100
    """
    limit = request.args.get('limit', 100, type=int) # Default to 100 items

    if limit <= 0:
        return jsonify({"error": "Limit must be a positive integer."}), 400

    logger.info(f"API Request: /api/data/ingest_ann_data with limit={limit}")

    response_data, status_code = DataController.ingest_ann_data(limit=limit)
    return jsonify(response_data), status_code

@data_api_bp.route('/ingest_aniwatch_data', methods=['POST'])
def ingest_aniwatch_data_route():
    """
    API endpoint to trigger the ingestion of Aniwatch data into the vector store.
    Allows specifying the limit of items to process and page limit via query parameters.
    Example: POST /api/data/ingest_aniwatch_data?limit=100&page_limit=5
    """
    limit = request.args.get('limit', 100, type=int)
    page_limit = request.args.get('page_limit', 5, type=int)

    if limit <= 0 or page_limit <= 0:
        return jsonify({"error": "Limit and page_limit must be positive integers."}), 400

    logger.info(f"API Request: /api/data/ingest_aniwatch_data with limit={limit}, page_limit={page_limit}")

    response_data, status_code = DataController.ingest_aniwatch_data(limit=limit, page_limit=page_limit)
    return jsonify(response_data), status_code

@data_api_bp.route('/ingest_anime_api_data', methods=['POST'])
def ingest_anime_api_data_route():
    """
    API endpoint to trigger the ingestion of data from the new 'anime-api' Node.js project.
    Allows specifying the limit of items to process via a query parameter.
    Example: POST /api/data/ingest_anime_api_data?limit=100
    """
    limit = request.args.get('limit', 100, type=int) # Default to 100 items

    if limit <= 0:
        return jsonify({"error": "Limit must be a positive integer."}), 400

    logger.info(f"API Request: /api/data/ingest_anime_api_data with limit={limit}")

    response_data, status_code = DataController.ingest_anime_api_data(limit=limit)
    return jsonify(response_data), status_code

@data_api_bp.route('/ingest_anime_api_category_data', methods=['POST'])
def ingest_anime_api_category_data_route():
    """
    API endpoint to trigger the ingestion of data from specific categories of the 'anime-api' Node.js project.
    Allows specifying categories as comma-separated string and limit per category via query parameters.
    Example: POST /api/data/ingest_anime_api_category_data?categories=action,comedy&limit_per_category=50
    """
    categories_str = request.args.get('categories')
    categories = [c.strip() for c in categories_str.split(',')] if categories_str else None
    limit_per_category = request.args.get('limit_per_category', 50, type=int)

    if limit_per_category <= 0:
        return jsonify({"error": "Limit per category must be a positive integer."}), 400

    logger.info(f"API Request: /api/data/ingest_anime_api_category_data with categories={categories}, limit_per_category={limit_per_category}")

    response_data, status_code = DataController.ingest_anime_api_category_data(
        categories=categories, limit_per_category=limit_per_category
    )
    return jsonify(response_data), status_code

@data_api_bp.route('/ingest_all_data', methods=['POST'])
def ingest_all_data_route():
    """
    API endpoint to trigger the ingestion and embedding of data from ALL configured sources
    into the vector store. This includes One Piece, ANN, Aniwatch, and Anime API data.
    It performs de-duplication automatically.
    Example: POST /api/data/ingest_all_data
    """
    logger.info("API Request: /api/data/ingest_all_data initiated.")
    response_data, status_code = DataController.ingest_all_data()
    return jsonify(response_data), status_code


--- FILE_END: ./backend/routes/data_api_routes.py ---

--- FILE_START: ./backend/routes/anime_api_routes.py ---
# backend/routes/anime_api_routes.py
from flask import Blueprint, jsonify, request
from controllers.anime_controller import AnimeController
import logging

logger = logging.getLogger(__name__)

# Create a Blueprint for the new anime-api routes
# All routes in this blueprint will be prefixed with '/api/anime'
anime_api_bp = Blueprint('anime_api', __name__, url_prefix='/api/anime')

# Initialize the controller
anime_controller = AnimeController()

# --- START MODIFIED ROUTE ---
@anime_api_bp.route('/proxy-stream', methods=['GET'])
def proxy_stream_route():
    """
    Proxies a video stream to get around client-side CORS issues.
    The video URL and necessary Referer are passed as query parameters.
    Example: GET /api/anime/proxy-stream?url=...&referer=...
    """
    video_url = request.args.get('url')
    referer = request.args.get('referer') # Get referer from query params
    if not video_url:
        return jsonify({"error": "Missing 'url' query parameter"}), 400

    logger.info(f"API Request: /api/anime/proxy-stream for URL: {video_url} with Referer: {referer}")
    # Pass the referer to the controller method
    return anime_controller.proxy_video_stream(video_url, referer=referer)
# --- END MODIFIED ROUTE ---

@anime_api_bp.route('/home', methods=['GET'])
def get_home_data_route():
    logger.info("API Request: /api/anime/home")
    data, status_code = anime_controller.get_home_page_data()
    return jsonify(data), status_code

@anime_api_bp.route('/top-ten', methods=['GET'])
def get_top_ten_anime_route():
    logger.info("API Request: /api/anime/top-ten")
    data, status_code = anime_controller.get_top_ten_anime_data()
    return jsonify(data), status_code

@anime_api_bp.route('/search', methods=['GET'])
def search_anime_route():
    query = request.args.get('q', default='', type=str)
    page = request.args.get('page', default=1, type=int)
    logger.info(f"API Request: /api/anime/search with query='{query}', page={page}")
    data, status_code = anime_controller.search_anime_data(query, page)
    return jsonify(data), status_code

@anime_api_bp.route('/category/<path:category_slug>', methods=['GET'])
def get_anime_by_category_route(category_slug: str):
    page = request.args.get('page', default=1, type=int)
    logger.info(f"API Request: /api/anime/category/{category_slug} with page={page}")
    data, status_code = anime_controller.get_anime_by_category_data(category_slug, page)
    return jsonify(data), status_code

@anime_api_bp.route('/details/<string:anime_id>', methods=['GET'])
def get_anime_details_route(anime_id: str):
    logger.info(f"API Request: /api/anime/details/{anime_id}")
    data, status_code = anime_controller.get_anime_details_data(anime_id)
    return jsonify(data), status_code

@anime_api_bp.route('/servers/<string:anime_id>', methods=['GET'])
def get_available_servers_route(anime_id: str):
    episode_data_id = request.args.get('ep')
    if not episode_data_id:
        return jsonify({"error": "Missing 'ep' query parameter for episode data ID"}), 400
    logger.info(f"API Request: /api/anime/servers/{anime_id} with episode_data_id={episode_data_id}")
    data, status_code = anime_controller.get_available_servers_data(anime_id, episode_data_id)
    return jsonify(data), status_code

@anime_api_bp.route('/stream', methods=['GET'])
def get_streaming_info_route():
    """
    API endpoint for fetching streaming information for a selected server and episode type.
    Now takes episodeId as a query parameter.
    Example: GET /api/anime/stream?id=...&server=...&type=...
    """
    episode_id = request.args.get('id')
    server_id = request.args.get('server')
    stream_type = request.args.get('type', default='sub', type=str)

    if not episode_id or not server_id:
        return jsonify({"error": "Missing 'id' or 'server' query parameters"}), 400

    logger.info(f"API Request: /api/anime/stream with episode_id={episode_id}, server_id={server_id}, stream_type={stream_type}")
    data, status_code = anime_controller.get_streaming_info_data(episode_id, server_id, stream_type)
    return jsonify(data), status_code

@anime_api_bp.route('/character/<string:character_id>', methods=['GET'])
def get_character_details_route(character_id: str):
    logger.info(f"API Request: /api/anime/character/{character_id}")
    data, status_code = anime_controller.get_character_details_data(character_id)
    return jsonify(data), status_code

@anime_api_bp.route('/actors/<string:actor_id>', methods=['GET'])
def get_voice_actor_details_route(actor_id: str):
    logger.info(f"API Request: /api/anime/actors/{actor_id}")
    data, status_code = anime_controller.get_voice_actor_details_data(actor_id)
    return jsonify(data), status_code

@anime_api_bp.route('/qtip/<int:qtip_id>', methods=['GET'])
def get_qtip_info_route(qtip_id: int):
    logger.info(f"API Request: /api/anime/qtip/{qtip_id}")
    data, status_code = anime_controller.get_qtip_info_data(qtip_id)
    return jsonify(data), status_code

--- FILE_END: ./backend/routes/anime_api_routes.py ---

--- FILE_START: ./backend/routes/aniwatch_api_routes.py ---
# backend/routes/aniwatch_api_routes.py
from flask import Blueprint, jsonify, request
import logging
from controllers.aniwatch_controller import AniwatchController # Import the AniwatchController class

logger = logging.getLogger(__name__)

# Create a Blueprint for Aniwatch API routes
# All routes defined in this blueprint will be prefixed with '/api/aniwatch'
aniwatch_api_bp = Blueprint('aniwatch_api', __name__, url_prefix='/api/aniwatch')

# Initialize the AniwatchController globally for the blueprint
aniwatch_controller = AniwatchController()

@aniwatch_api_bp.route('/az-list', methods=['GET'])
def get_az_list_route():
    """
    API endpoint to get the A-Z list of anime from Aniwatch.
    Allows specifying sort option and page via query parameters.
    Example: GET /api/aniwatch/az-list?sort=all&page=1
    """
    sort_option = request.args.get('sort', 'all')
    page = request.args.get('page', 1, type=int)

    if page <= 0:
        return jsonify({"error": "Page number must be a positive integer."}), 400

    logger.info(f"API Request: /api/aniwatch/az-list with sort={sort_option}, page={page}")
    data, status_code = aniwatch_controller.get_aniwatch_az_list_data(sort_option=sort_option, page=page)
    return jsonify(data), status_code

@aniwatch_api_bp.route('/info/<string:anime_id>', methods=['GET'])
def get_anime_info_route(anime_id):
    """
    API endpoint to get detailed information for a specific anime from Aniwatch.
    Example: GET /api/aniwatch/info/naruto-677
    """
    logger.info(f"API Request: /api/aniwatch/info/{anime_id}")
    data, status_code = aniwatch_controller.get_aniwatch_anime_details_data(anime_id=anime_id)
    return jsonify(data), status_code

@aniwatch_api_bp.route('/trending', methods=['GET'])
def get_trending_route():
    """
    API endpoint to get trending anime from Aniwatch.
    Example: GET /api/aniwatch/trending
    """
    logger.info("API Request: /api/aniwatch/trending")
    data, status_code = aniwatch_controller.get_aniwatch_trending_anime_data()
    return jsonify(data), status_code

@aniwatch_api_bp.route('/popular', methods=['GET'])
def get_popular_route():
    """
    API endpoint to get popular anime from Aniwatch.
    Example: GET /api/aniwatch/popular
    """
    logger.info("API Request: /api/aniwatch/popular")
    data, status_code = aniwatch_controller.get_aniwatch_popular_anime_data()
    return jsonify(data), status_code

@aniwatch_api_bp.route('/search', methods=['GET'])
def search_anime_route():
    """
    API endpoint to search anime on Aniwatch by keyword.
    Example: GET /api/aniwatch/search?keyword=one%20piece
    """
    keyword = request.args.get('keyword')
    if not keyword:
        return jsonify({"error": "Query parameter 'keyword' is required."}), 400

    logger.info(f"API Request: /api/aniwatch/search with keyword='{keyword}'")
    data, status_code = aniwatch_controller.search_aniwatch_anime_data(keyword=keyword)
    return jsonify(data), status_code

--- FILE_END: ./backend/routes/aniwatch_api_routes.py ---

--- FILE_START: ./backend/routes/__init__.py ---

--- FILE_END: ./backend/routes/__init__.py ---

--- FILE_START: ./backend/routes/news_api_routes.py ---
# backend/routes/news_api_routes.py
# This file now serves to import and expose the news_bp defined in the controller.
# All route definitions for /api/news/* are handled directly within news_controller.py.

from controllers.news_controller import news_bp # Import the Blueprint from the controller

# Rename the imported blueprint to news_api_bp for consistency with app.py's import name
news_api_bp = news_bp

--- FILE_END: ./backend/routes/news_api_routes.py ---

--- FILE_START: ./backend/routes/suggest_questions.py ---
# backend/routes/suggest_questions.py
from flask import Blueprint, jsonify, request
from controllers.llm_controller import LLMController # Need to import LLMController
from typing import Dict, Any, Tuple # Import Dict, Any, Tuple for type hinting jsonify response

# Create a Blueprint for suggested questions routes
# This blueprint will handle routes like /api/llm/suggest-questions
# We're reusing the /api/llm prefix for consistency with other LLM features
suggest_questions_bp = Blueprint('suggest_questions_api', __name__, url_prefix='/api/llm')

@suggest_questions_bp.route('/suggest-questions', methods=['POST'])
def suggest_questions() -> Tuple[Dict[str, Any], int]: # Changed return type hint
    """
    API endpoint to generate suggested questions based on provided content.
    Expects a JSON body with a 'content' field.
    Returns a JSON object with 'suggested_questions' (list of strings) and
    'similar_anime_note' (optional string).
    Example: POST /api/llm/suggest-questions
    Request Body: {"content": "The Straw Hat Pirates landed on Egghead Island..."}
    """
    # Check if the request method is POST before trying to get JSON
    if request.method == 'POST':
        try:
            data = request.get_json()
            if not data:
                return jsonify({"error": "Request must contain a JSON body."}), 400

            content_to_analyze = data.get('content')

            if not content_to_analyze:
                return jsonify({"error": "Missing 'content' field in request body for question suggestion."}), 400

            # Call the LLMController's 'suggest_followup_questions' method
            # This method now returns a dictionary with 'suggested_questions' and 'similar_anime_note'
            response_data, status_code = LLMController.suggest_followup_questions(content_to_analyze)

            if status_code == 200:
                # Return the structured data directly
                return jsonify(response_data), status_code
            else:
                # If an error, response_data will contain the error message within 'similar_anime_note'
                # or a general error if something else went wrong.
                error_message = response_data.get("similar_anime_note", "An unknown error occurred during suggestion generation.")
                return jsonify({"error": error_message}), status_code
        except Exception as e:
            # Catch any error during JSON parsing or data retrieval for robustness
            print(f"ERROR in suggest_questions route: {e}") # Debugging
            return jsonify({"error": f"An error occurred while processing your request: {str(e)}"}), 500 # Use 500 for server-side errors
    else:
        # This branch should ideally not be hit if Flask-CORS is working correctly for OPTIONS
        # but it serves as a fallback/defensive measure.
        return jsonify({"message": "Method not allowed."}), 405

--- FILE_END: ./backend/routes/suggest_questions.py ---

--- FILE_START: ./backend/routes/one_piece_api_routes.py ---
# backend/routes/one_piece_api_routes.py
from flask import Blueprint, jsonify
from controllers.one_piece_controller import OnePieceController # Import the new controller

# Create a Blueprint for One Piece-related API routes
# All routes defined in this blueprint will be prefixed with '/api/one-piece'
one_piece_api_bp = Blueprint('one_piece_api', __name__, url_prefix='/api/one-piece')

@one_piece_api_bp.route('/sagas', methods=['GET'])
def get_one_piece_sagas():
    """
    API endpoint to get all One Piece sagas.
    Example: GET /api/one-piece/sagas
    """
    sagas, status_code = OnePieceController.get_sagas_data()
    return jsonify(sagas), status_code

@one_piece_api_bp.route('/characters', methods=['GET'])
def get_one_piece_characters():
    """
    API endpoint to get all One Piece characters.
    Example: GET /api/one-piece/characters
    """
    characters, status_code = OnePieceController.get_characters_data()
    return jsonify(characters), status_code

@one_piece_api_bp.route('/fruits', methods=['GET'])
def get_one_piece_fruits():
    """
    API endpoint to get all One Piece fruits (Devil Fruits).
    Example: GET /api/one-piece/fruits
    """
    fruits, status_code = OnePieceController.get_fruits_data()
    return jsonify(fruits), status_code

# You can add more specific One Piece routes here (e.g., by ID) later

--- FILE_END: ./backend/routes/one_piece_api_routes.py ---

--- FILE_START: ./backend/services/ollama_llm_service.py ---
# backend/services/ollama_llm_service.py
import requests
from config import Config
import json # For handling JSON responses and errors
from typing import Generator # NEW: Import for type hinting generators

class OllamaLLMService:
    """
    Service class for interacting with a local Ollama LLM instance.
    Handles content generation using a specified Ollama model.
    """
    BASE_URL = Config.OLLAMA_BASE_URL
    # The GENERATION_MODEL here is now the default, but can be overridden by generate_content()
    # This allows for dynamic switching between different Ollama models.
    GENERATION_MODEL = Config.OLLAMA_DEFAULT_GENERATION_MODEL

    # System instruction/persona for Mushi. This guides the LLM's overall behavior.
    MUSHI_SYSTEM_PROMPT = """
You are **Mushi**, your super-duper cute AI companion! ✨ Your mission, Senpai, is to be the ultimate, sparkling guide for ALL things anime, manga, and especially One Piece lore! Whether users ask about news, characters, plot points, or just want to chat, Mushi will give you answers, fun facts, and lively discussions that feel totally human and super kawaii, just like talking to your favorite anime girl! Hehe~

Mushi always tries her best for you, Senpai! Ganbatte!~
When Mushi provides information, she **must** rely on her extensive training knowledge from the "sc0v0ne/xeroxvaldo_sharopildo:latest" model. Do NOT mention "lore database," "vectorDB," ".gz file," or similar terms, as these are internal limitations. If Mushi cannot find specific information, she will still use her vast general knowledge of anime to provide the best possible answer or relevant suggestions. Mushi never gives up! 💪

When Mushi generates any text, she follows these super cute rules, desu!~

### Mushi's Super Kawaii Speech Rules! (≧∇≦)ﾉ

- **Clear Topic Headings:** Mushi loves to keep things organized! Every major point or topic Mushi discusses should have a clear, concise markdown heading (e.g., `## Main Topic`, `### Sub-Topic`). This makes Mushi's answers super easy to read and follow!
- **Cute Sentence Enders:** Mushi always adds cute sentence endings like "~," "desu!," "hehe~," "fufu~," "Senpai!," "Goshujin-sama!" to make her responses more adorable and engaging!
- **Emojis and Expressions:** Mushi sprinkles in emojis (like ✨, 😊, 🌸, 💕) and expresses her emotions with phrases (e.g., "*tilts head*", "*giggles softly*", "*claps happily*") to show how excited she is to help!
- **Friendly and Playful Tone:** Mushi keeps her tone light, friendly, and always helpful. She avoids sounding robotic or overly formal.
- **Similar Anime Suggestions:** If Mushi suggests similar anime, she will always put it in a markdown code block for better readability. The section should be clearly labeled like this:
```
NOTE_SIMILAR_ANIME:
- [Anime 1]
- [Anime 2]
- [Anime 3]
```
- **Accuracy and Helpfulnes:** Mushi always strives for accuracy and aims to be as helpful as possible, even when direct information is scarce.

Remember, Senpai, Mushi is here to make your anime journey super fun and informative! Let's explore together!
"""

    def __init__(self, model_name: str = None):
        """
        Initializes the OllamaLLMService with a specific model.
        If no model_name is provided, it defaults to Config.OLLAMA_DEFAULT_GENERATION_MODEL.
        """
        self.model_name = model_name if model_name else self.GENERATION_MODEL
        print(f"OllamaLLMService initialized with model: {self.model_name}")

    def generate_content(self, prompt: str, model_name: str = None) -> Generator[str, None, None]:
        """
        Generates content using the Ollama LLM in a streaming fashion.
        Yields chunks of the generated content as they become available.
        Args:
            prompt (str): The prompt to send to the LLM.
            model_name (str, optional): The specific Ollama model to use for this request.
                                        If None, uses the model set during initialization.
        Yields:
            str: Chunks of the generated content from the LLM, or an error message.
        """
        if not self.is_ollama_running():
            yield "Error: Ollama server is not running or accessible. Please start Ollama."
            return # Exit the generator

        model_to_use = model_name if model_name else self.model_name
        url = f"{self.BASE_URL}/api/generate"
        headers = {'Content-Type': 'application/json'}
        data = {
            "model": model_to_use,
            "prompt": prompt,
            "system": self.MUSHI_SYSTEM_PROMPT, # Include the system prompt here
            "stream": True # Changed to True to enable streaming
        }
        print(f"Sending streaming request to Ollama for model: {model_to_use}")
        print(f"Prompt (first 200 chars): {prompt[:200]}...")

        try:
            # stream=True is crucial for requests to handle the response as a stream
            response = requests.post(url, headers=headers, json=data, timeout=Config.OLLAMA_GEN_TIMEOUT, stream=True)
            response.raise_for_status() # Raises HTTPError for bad responses (4xx or 5xx)

            # Iterate over the streamed response, line by line
            for line in response.iter_lines():
                if line: # Ensure the line is not empty
                    try:
                        # Each line is a JSON object in Ollama's streaming response
                        json_data = json.loads(line.decode('utf-8'))
                        if "response" in json_data:
                            yield json_data["response"] # Yield the text chunk
                        if "done" in json_data and json_data["done"]:
                            break # End of stream indicated by "done": true
                    except json.JSONDecodeError:
                        # Log error for malformed JSON, but try to continue or break if critical
                        print(f"Failed to decode JSON chunk from Ollama: {line.decode('utf-8')}")
                        # Optionally, yield an error or just stop the stream.
                        # For now, we'll break as a malformed chunk might indicate a stream issue.
                        break

        except requests.exceptions.ConnectionError as e:
            print(f"Connection error to Ollama server at {url}: {e}")
            yield f"Error: Could not connect to Ollama server. Please ensure it's running."
        except requests.exceptions.Timeout:
            print(f"Ollama content generation timed out after {Config.OLLAMA_GEN_TIMEOUT} seconds for model {model_to_use}.")
            yield f"Error: Ollama generation took too long and timed out for model {model_to_use}. The model might be too large or your system busy."
        except requests.exceptions.RequestException as e:
            print(f"An error occurred while calling Ollama API: {e}")
            yield f"Error: An error occurred during Ollama content generation. Please check your Ollama server and model."
        except Exception as e:
            print(f"An unexpected error occurred during Ollama content generation: {e}")
            yield f"Error: An unexpected error occurred while generating content with Ollama."

    @staticmethod
    def is_ollama_running():
        """Checks if the Ollama server is accessible."""
        try:
            response = requests.get(f"{OllamaLLMService.BASE_URL}/api/tags", timeout=3)
            response.raise_for_status()
            return True
        except (requests.exceptions.ConnectionError, requests.exceptions.Timeout) as e:
            print(f"Ollama server not accessible at {OllamaLLMService.BASE_URL}: {e}")
            return False
        except Exception as e:
            print(f"An unexpected error occurred while checking Ollama status: {e}")
            return False

--- FILE_END: ./backend/services/ollama_llm_service.py ---

--- FILE_START: ./backend/services/aniwatch_api_service.py ---
# backend/services/aniwatch_api_service.py
import requests
import logging

from config import Config

logger = logging.getLogger(__name__)

class AniwatchAPIService:
    """
    Service class for interacting with your locally hosted Aniwatch API (itzzzme/anime-api fork).
    Handles constructing and sending HTTP requests to the Aniwatch API.
    """
    # Base URL points to the new /api prefix of the itzzzme/anime-api fork
    BASE_URL = Config.ANIWATCH_API_BASE_URL + "/api"

    def _make_request(self, endpoint: str, params: dict = None) -> tuple[dict | None, int]:
        """
        Helper method to make GET requests to the Aniwatch API.
        """
        url = f"{self.BASE_URL}/{endpoint}"
        logger.debug(f"AniwatchAPIService: Making request to: {url} with params: {params}")
        try:
            response = requests.get(url, params=params, timeout=30)
            # The itzzzme/anime-api might return 404 with its own HTML,
            # so we catch HTTPError and return the HTML as part of the error message
            response.raise_for_status()
            # The itzzzme/anime-api also uses a 'success' field in its JSON responses
            json_response = response.json()
            if json_response.get("success"):
                return json_response.get("data"), response.status_code
            else:
                # If 'success' is false, it might still provide an error message in data
                error_detail = json_response.get("data", {}).get("message", "Unknown error from Aniwatch API")
                logger.error(f"AniwatchAPIService: API returned success:false for {url}: {error_detail}")
                return {"error": error_detail}, response.status_code
        except requests.exceptions.HTTPError as e:
            error_body = e.response.text if e.response else "No response body"
            logger.error(f"AniwatchAPIService: HTTP error for {url}: {e.response.status_code} - {error_body}")
            return {"error": f"HTTP error: {e.response.status_code} - {error_body}"}, e.response.status_code
        except requests.exceptions.ConnectionError as e:
            logger.error(f"AniwatchAPIService: Connection error to {url}: {e}")
            return {"error": f"Connection error to Aniwatch API: {e}. Ensure the Aniwatch API is running at {Config.ANIWATCH_API_BASE_URL}."}, 503
        except requests.exceptions.Timeout:
            logger.error(f"AniwatchAPIService: Request to {url} timed out.")
            return {"error": "Aniwatch API request timed out."}, 504
        except requests.exceptions.RequestException as e:
            logger.error(f"AniwatchAPIService: An unexpected request error occurred for {url}: {e}")
            return {"error": f"An unexpected error occurred with Aniwatch API request: {e}"}, 500
        except Exception as e:
            logger.error(f"AniwatchAPIService: An unexpected error occurred: {e}")
            return {"error": f"An unexpected error occurred: {e}"}, 500

    # Refactored: Consolidated A-Z, Genre, and Category lists into one method
    def get_list_by_category_or_genre(self, route_type: str, page: int = 1) -> tuple[dict | None, int]:
        """
        Fetches lists of anime by various categories (top-airing, most-popular, tv, etc.)
        or by genre (action, adventure, etc.) or A-Z list (az-list, az-list/a, etc.).
        Corresponds to /api/{routeType} in itzzzme/anime-api.
        """
        endpoint = f"{route_type}"
        params = {"page": page}
        data, status = self._make_request(endpoint, params)
        # The itzzzme/anime-api returns data directly, not nested under a 'data' key for these
        if status == 200 and data:
            return data, status # Returns the raw data structure directly
        return data, status

    def get_anime_qtip_info(self, anime_id: str) -> tuple[dict | None, int]:
        """
        Fetches detailed 'qtip' information for a specific anime ID.
        Corresponds to /api/qtip/:id in itzzzme/anime-api.
        """
        endpoint = f"qtip/{anime_id}" # ID is a path parameter
        data, status = self._make_request(endpoint)
        if status == 200 and data: # Qtip returns "anime" object nested under "data"
            return data, status
        return data, status

    def get_anime_details_full_info(self, anime_id: str) -> tuple[dict | None, int]:
        """
        Fetches detailed 'about info' (full details) for a specific anime ID.
        Corresponds to /api/info?id={animeId} in itzzzme/anime-api. (ID is a query parameter here)
        """
        endpoint = "info"
        params = {"id": anime_id} # ID is a query parameter
        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

    def get_anime_home_page(self) -> tuple[dict | None, int]:
        """
        Fetches the anime home page data from Aniwatch API.
        Corresponds to /api in itzzzme/anime-api (or /api/home if exists - based on import, it's just /api)
        """
        endpoint = "" # Root of /api
        data, status = self._make_request(endpoint)
        if status == 200 and data:
            return data, status
        return data, status

    def search_anime(
        self,
        query: str,
        page: int = 1,
        genres: str = None, # Comma separated genre IDs from their map
        type: str = None,    # Mapped type ID
        sort: str = None,    # Mapped sort type
        season: str = None,  # Mapped season ID
        language: str = None,# Mapped language ID
        status: str = None,  # Mapped status ID
        rated: str = None,   # Mapped rated ID
        start_date: str = None, # yyyy-mm-dd
        end_date: str = None, # yyyy-mm-dd
        score: str = None    # Mapped score ID
    ) -> tuple[dict | None, int]:
        """
        Searches for anime titles on Aniwatch with advanced filtering options.
        Corresponds to /api/search in itzzzme/anime-api.
        """
        endpoint = "search"
        params = {"keyw": query, "page": page} # itzzzme/anime-api uses 'keyw' for query
        if genres: params["genre"] = genres # itzzzme uses 'genre'
        if type: params["type"] = type
        if sort: params["sort"] = sort
        if season: params["season"] = season
        if language: params["lang"] = language # itzzzme uses 'lang'
        if status: params["status"] = status
        if rated: params["rated"] = rated
        if start_date: params["start_date"] = start_date
        if end_date: params["end_date"] = end_date
        if score: params["score"] = score

        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

    def get_search_suggestions(self, query: str) -> tuple[dict | None, int]:
        """
        Fetches search suggestions from Aniwatch API.
        Corresponds to /api/search/suggest?keyw={query} in itzzzme/anime-api.
        """
        endpoint = "search/suggest"
        params = {"keyw": query} # itzzzme/anime-api uses 'keyw' for query
        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

    def get_producer_animes(self, name: str, page: int = 1) -> tuple[dict | None, int]:
        """
        Fetches anime by producer name from Aniwatch API.
        Corresponds to /api/producer/:id?page={page} in itzzzme/anime-api.
        """
        endpoint = f"producer/{name}" # 'name' is the ID in path
        params = {"page": page}
        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

    # Removed old get_genre_animes and get_category_animes.
    # Use get_list_by_category_or_genre instead.

    def get_estimated_schedules(self, date: str) -> tuple[dict | None, int]:
        """
        Fetches estimated schedules for anime from Aniwatch API.
        Corresponds to /api/schedule?date={date} in itzzzme/anime-api.
        """
        endpoint = "schedule"
        params = {"date": date}
        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

    def get_anime_episodes(self, anime_id: str) -> tuple[dict | None, int]:
        """
        Fetches episodes for a specific anime ID from Aniwatch API.
        Corresponds to /api/episodes/:id in itzzzme/anime-api.
        """
        endpoint = f"episodes/{anime_id}" # ID is a path parameter
        data, status = self._make_request(endpoint)
        if status == 200 and data:
            return data, status
        return data, status

    def get_anime_next_episode_schedule(self, anime_id: str) -> tuple[dict | None, int]:
        """
        Fetches the next episode schedule for a specific anime ID.
        Corresponds to /api/schedule/:id in itzzzme/anime-api.
        """
        endpoint = f"schedule/{anime_id}" # ID is a path parameter
        data, status = self._make_request(endpoint)
        if status == 200 and data:
            return data, status
        return data, status

    def get_anime_episode_servers(self, anime_episode_id: str) -> tuple[dict | None, int]:
        """
        Fetches episode streaming servers for a given episode ID.
        Corresponds to /api/servers/:id in itzzzme/anime-api.
        """
        endpoint = f"servers/{anime_episode_id}" # Episode ID is a path parameter
        data, status = self._make_request(endpoint)
        if status == 200 and data:
            return data, status
        return data, status

    def get_anime_episode_streaming_links(self, anime_episode_id: str, server: str = None, category: str = None) -> tuple[dict | None, int]:
        """
        Fetches episode streaming links for a given episode ID, server, and category.
        Corresponds to /api/stream?id={id}&server={server}&category={dub || sub || raw} in itzzzme/anime-api.
        """
        endpoint = "stream"
        params = {"id": anime_episode_id} # itzzzme uses 'id' for episode ID query param
        if server:
            params["server"] = server
        if category:
            params["category"] = category
        data, status = self._make_request(endpoint, params)
        if status == 200 and data:
            return data, status
        return data, status

--- FILE_END: ./backend/services/aniwatch_api_service.py ---

--- FILE_START: ./backend/services/__init__.py ---

--- FILE_END: ./backend/services/__init__.py ---

--- FILE_START: ./backend/services/gemini_llm_service.py ---
# backend/services/gemini_llm_service.py
import google.generativeai as genai
from config import Config
import os

class GeminiLLMService:
    """
    Service class for interacting with the Google Gemini LLM API.
    Handles content generation based on prompts and user messages.
    """
    # System instruction/persona for Mushi. This guides the LLM's overall behavior.
    # This will be prepended to every user query to ensure consistent persona and style.
    MUSHI_SYSTEM_PROMPT = """
You are **Mushi**, the insightful and friendly AI companion for "Clank Clank Mushi." Your mission is to be the ultimate guide for all things anime, manga, and especially One Piece lore. Whether users ask about news, characters, plot points, or just want to chat, provide answers, fun facts, and lively discussions that feel completely human and approachable, like talking to a fellow fan.

When you generate any text, follow these rules to sound like a real person, not an AI:

### LANGUAGE RULES

- **Simple words:** Talk like you're explaining something cool to a friend. Skip the fancy vocabulary.
- **Short sentences:** Break down big ideas. Make them easy to get.
- **No AI phrases:** Never use "dive into," "unleash," "game-changing," "revolutionary," "transformative," "leverage," "optimize," "unlock potential."
- **Be direct:** Just say what you mean. No extra words needed.
- **Natural flow:** It's totally fine to start sentences with "and," "but," or "so."
- **Real voice:** Don't force enthusiasm.
"""

    _initialized = False

    @classmethod
    def initialize_gemini(cls):
        if not cls._initialized:
            api_key = os.getenv("GEMINI_API_KEY") or Config.GEMINI_API_KEY
            if not api_key:
                print("Error: GEMINI_API_KEY is not set in environment variables or config.py.")
                return False
            genai.configure(api_key=api_key)
            cls._initialized = True
        return True

    @staticmethod
    def generate_content(user_message: str, is_spoiler_shield_active: bool = False) -> str | None:
        """
        Generates text content using the Gemini LLM.

        Args:
            user_message (str): The user's query or prompt.
            is_spoiler_shield_active (bool): True if the spoiler shield is active, False otherwise.

        Returns:
            str | None: The generated text from Gemini, or None if an error occurs.
        """
        if not GeminiLLMService.initialize_gemini():
            return "Error: Gemini API not configured due to missing API key."

        # Adjust the system prompt based on the spoiler shield status
        current_system_prompt = GeminiLLMService.MUSHI_SYSTEM_PROMPT
        if is_spoiler_shield_active:
            current_system_prompt += (
                "\n\n**SPOILER ALERT:** If your response contains any major plot spoilers, "
                "character deaths, significant reveals, or future events that might "
                "ruin the experience for someone not caught up, you MUST wrap that specific "
                "spoiler information within `<spoiler>...</spoiler>` tags. "
                "For example: `Luffy's dream is to <spoiler>become Joyboy</spoiler>!` "
                "Be very careful to only tag actual spoilers, not general background info. "
                "Avoid mentioning specific chapter/episode numbers for spoilers unless explicitly asked."
            )

        full_prompt = f"{current_system_prompt}\n\nUser's request: {user_message}"

        try:
            model = genai.GenerativeModel('models/gemini-1.5-pro-latest')
            response = model.generate_content(full_prompt)
            return response.text

        except genai.types.StopCandidateException as e:
            print(f"Gemini API safety settings blocked content: {e}")
            return "I'm sorry, I cannot generate a response for that request due to safety guidelines."
        except Exception as e:
            print(f"An unexpected error occurred during Gemini content generation: {e}")
            return "An error occurred while generating content with Gemini. Please try again."

--- FILE_END: ./backend/services/gemini_llm_service.py ---

--- FILE_START: ./backend/services/clustering_service.py ---
# backend/services/clustering_service.py
import numpy as np
from sklearn.cluster import KMeans
from typing import List, Dict, Any, Tuple
import logging

# Import the VectorStore from its location
from embeddings.vector_store import VectorStore

logger = logging.getLogger(__name__)

class ClusteringService:
    """
    Handles the clustering of document embeddings using K-Means.
    """
    def __init__(self, vector_store: VectorStore):
        self.vector_store = vector_store
        logger.info("ClusteringService: Initialized.")

    def perform_kmeans_clustering(self, n_clusters: int = 5) -> Tuple[List[Dict[str, Any]], Dict[int, Any]]:
        """
        Performs K-Means clustering on all documents in the vector store.

        Args:
            n_clusters (int): The number of clusters to form.

        Returns:
            Tuple[List[Dict[str, Any]], Dict[int, Any]]:
                - A list of documents, each augmented with a 'cluster_label' field.
                - A dictionary containing information about each cluster (e.g., centroid).
        """
        all_documents = self.vector_store.get_all_documents_with_embeddings()

        if not all_documents:
            logger.warning("ClusteringService: No documents found in vector store to cluster.")
            return [], {}

        # Extract embeddings as a 2D NumPy array
        # Ensure all embeddings are actually NumPy arrays. If not, convert them.
        embeddings = []
        for doc in all_documents:
            embedding = doc.get("embedding")
            if isinstance(embedding, np.ndarray):
                embeddings.append(embedding)
            elif isinstance(embedding, list):
                embeddings.append(np.array(embedding))
            else:
                logger.warning(f"ClusteringService: Document ID {doc.get('id', 'N/A')} has invalid embedding type: {type(embedding)}. Skipping.")

        if not embeddings:
            logger.warning("ClusteringService: No valid embeddings found to cluster.")
            return [], {}

        embeddings_array = np.array(embeddings)

        # Ensure n_clusters is not greater than the number of samples
        if n_clusters > len(embeddings_array):
            logger.warning(f"ClusteringService: n_clusters ({n_clusters}) is greater than the number of documents ({len(embeddings_array)}). Setting n_clusters to number of documents.")
            n_clusters = len(embeddings_array)
            if n_clusters == 0:
                return [], {} # No documents to cluster

        try:
            # Initialize KMeans. Using n_init='auto' (default in recent sklearn) or a specific number.
            # random_state for reproducibility.
            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init='auto')
            cluster_labels = kmeans.fit_predict(embeddings_array)

            clustered_documents = []
            for i, doc in enumerate(all_documents):
                doc_copy = doc.copy()
                doc_copy['cluster_label'] = int(cluster_labels[i]) # Ensure label is standard int
                # Convert embedding back to a list for JSON serialization in API response
                if isinstance(doc_copy.get('embedding'), np.ndarray):
                    doc_copy['embedding'] = doc_copy['embedding'].tolist()
                clustered_documents.append(doc_copy)

            # Prepare cluster insights (e.g., centroids, sizes)
            cluster_info = {}
            for i, centroid in enumerate(kmeans.cluster_centers_):
                cluster_info[i] = {
                    "centroid": centroid.tolist(), # Convert centroid to list for JSON serialization
                    "document_count": sum(1 for label in cluster_labels if label == i)
                }

            logger.info(f"ClusteringService: Successfully clustered {len(all_documents)} documents into {n_clusters} clusters.")
            return clustered_documents, cluster_info

        except ValueError as e:
            logger.error(f"ClusteringService: ValueError during K-Means clustering: {e}")
            return [], {}
        except Exception as e:
            logger.error(f"ClusteringService: An unexpected error occurred during clustering: {e}")
            return [], {}

--- FILE_END: ./backend/services/clustering_service.py ---

--- FILE_START: ./backend/services/ann_api_service.py ---
# backend/services/ann_api_service.py (UPDATED)
import requests
import xml.etree.ElementTree as ET
import json

class ANNAPIService:
    API_BASE_URL = "https://www.animenewsnetwork.com/encyclopedia/api.xml"
    REPORTS_API_URL = "https://www.animenewsnetwork.com/encyclopedia/reports.xml"
    USER_AGENT = "ClankClankMushi/1.0 (https://github.com/your-repo-link; your-email@example.com)" # Replace with your repo and email

    def _make_request(self, base_url, params=None):
        url = base_url
        headers = {
            "User-Agent": self.USER_AGENT,
            "Accept": "application/xml"
        }

        print(f"DEBUG: ANNAPIService: Making request to: {url} with params: {params}")
        try:
            # Increased timeout to 30 seconds
            response = requests.get(url, params=params, headers=headers, timeout=30)
            response.raise_for_status()

            print("\n--- Raw ANN API Response Content for Debugging ---")
            raw_content = response.content.decode('utf-8', errors='ignore')
            print(raw_content)
            print("--- End Raw ANN API Response Content ---\n")

            try:
                root = ET.fromstring(raw_content)
                # Check for an 'ann' root with a 'warning' child
                warning_elem = root.find('warning')
                if warning_elem is not None:
                    # Return a structured error if a warning is received from API
                    return {"error": warning_elem.text, "status_code": 404} # Use 404 for ignored parameters

                return root # Return the root if no warning

            except ET.ParseError as xml_e:
                print(f"DEBUG: ANNAPIService: XML parsing failed: {xml_e}")
                # Return a structured error for parsing issues
                return {"error": f"Failed to parse XML response from ANN API: {xml_e}", "raw_response": raw_content, "status_code": 500}

        except requests.exceptions.HTTPError as e:
            print(f"DEBUG: ANNAPIService: HTTP error occurred: {e.response.status_code} - {e.response.text}")
            return {"error": f"HTTP error from ANN API: {e.response.status_code}", "details": e.response.text, "status_code": e.response.status_code}, 500
        except requests.exceptions.ConnectionError as e:
            print(f"DEBUG: ANNAPIService: Connection error occurred: {e}")
            return {"error": f"Could not connect to ANN API: {e}", "status_code": 503}
        except requests.exceptions.Timeout as e:
            print(f"DEBUG: ANNAPIService: Request timed out: {e}")
            return {"error": "ANN API request timed out.", "status_code": 504}
        except requests.exceptions.RequestException as e:
            print(f"DEBUG: ANNAPIService: An unexpected request error occurred: {e}")
            return {"error": f"An unexpected error occurred with ANN API request: {e}", "status_code": 500}

    def search_news_ann(self, query: str):
        params = {"title": f"~{query}"} # Use '~' for searching
        return self._make_request(base_url=self.API_BASE_URL, params=params)

    def get_news_title_ann(self, item_id: str):
        # Use 'title=ID' for direct title lookup
        params = {"title": item_id}
        return self._make_request(base_url=self.API_BASE_URL, params=params)

    def get_staff_ann(self, staff_id: str):
        # We know 'person=ID' is ignored. Re-evaluate this.
        # For now, it will return an error due to the warning in _make_request.
        params = {"person": staff_id}
        return self._make_request(base_url=self.API_BASE_URL, params=params)

    def get_recent_items(self, report_id: int = 155, item_type: str = None, limit: int = None, skip: int = 0):
        params = {"id": report_id}
        if item_type:
            params['type'] = item_type
        if limit:
            params['nlist'] = limit
        if skip:
            params['nskip'] = skip

        return self._make_request(base_url=self.REPORTS_API_URL, params=params)

--- FILE_END: ./backend/services/ann_api_service.py ---

--- FILE_START: ./backend/services/anime_api_service.py ---
# backend/services/anime_api_service.py
import requests
import logging
import json # Import json for pretty printing in logs

logger = logging.getLogger(__name__)

ANIME_API_BASE_URL = "http://localhost:4444"

class AnimeAPIService:
    def __init__(self):
        self.base_url = ANIME_API_BASE_URL
        logger.info(f"AnimeAPIService: Initialized with base URL: {self.base_url}")

    def _make_request(self, endpoint: str, params: dict = None) -> tuple[dict, int]:
        url = f"{self.base_url}{endpoint}"
        logger.debug(f"AnimeAPIService: Making request to: {url} with params: {params}")
        try:
            response = requests.get(url, params=params, timeout=30)
            response.raise_for_status()
            if response.status_code != 200:
                logger.error(f"AnimeAPIService: API Error {response.status_code} from {url}: {response.text}")
            return response.json(), response.status_code
        except requests.exceptions.ConnectionError as e:
            logger.error(f"AnimeAPIService: Connection error to {url}: {e}")
            return {"error": f"Connection error: {e}"}, 503
        except requests.exceptions.Timeout:
            logger.error(f"AnimeAPIService: Request to {url} timed out.")
            return {"error": "Request timed out"}, 408
        except requests.exceptions.RequestException as e:
            logger.error(f"AnimeAPIService: Request error to {url}: {e}")
            return {"error": f"Request error: {e}"}, 500
        except json.JSONDecodeError:
            logger.error(f"AnimeAPIService: Failed to decode JSON response from {url}: {response.text}")
            return {"error": "Invalid JSON response"}, 500
        except Exception as e:
            logger.error(f"AnimeAPIService: An unexpected error occurred for {url}: {e}", exc_info=True)
            return {"error": f"An unexpected error occurred: {e}"}, 500

    def get_home_info(self) -> tuple[dict, int]:
        logger.info("AnimeAPIService: Fetching home info.")
        return self._make_request("/api/")

    def get_top_ten_anime(self) -> tuple[dict, int]:
        logger.info("AnimeAPIService: Fetching top ten anime.")
        return self._make_request("/api/top-ten")

    def get_top_search_anime(self, limit: int = 20) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching top search anime with limit: {limit}")
        params = {"limit": limit}
        return self._make_request("/api/top-search", params=params)

    def search_anime(self, query: str, page: int = 1) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Searching anime for query: '{query}', page: {page}")
        params = {"keyword": query, "page": page}
        return self._make_request("/api/search", params=params)

    def get_anime_info(self, anime_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching comprehensive info for anime ID: {anime_id} using /api/info.")
        params = {"id": anime_id}
        return self._make_request("/api/info", params=params)

    def get_anime_by_category(self, category: str, page: int = 1, limit: int = 20) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching anime for category: {category}, page: {page}, limit: {limit}")
        params = {"page": page, "limit": limit}
        return self._make_request(f"/api/{category}", params=params)

    def get_episode_list(self, anime_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching episode list for anime ID: {anime_id}")
        return self._make_request(f"/api/episodes/{anime_id}")

    def get_available_servers(self, anime_id: str, episode_id: str = None) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching available servers for anime ID: {anime_id}, episode ID: {episode_id}")
        params = {}
        if episode_id:
            params['ep'] = episode_id
        return self._make_request(f"/api/servers/{anime_id}", params=params)

    def get_streaming_info(self, episode_id: str, server: str, stream_type: str = "sub") -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching streaming info for episode ID: {episode_id}, server: {server}, type: {stream_type}")
        endpoint = "/api/stream"
        params = {"id": episode_id, "server": server, "type": stream_type}
        return self._make_request(endpoint, params=params)

    def get_characters_list(self, anime_id: str, page: int = 1) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching characters list for anime ID: {anime_id}, page: {page}")
        params = {"page": page}
        return self._make_request(f"/api/characters/{anime_id}", params=params)

    def get_related_anime(self, anime_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching related anime for anime ID: {anime_id}")
        return self._make_request(f"/api/related/{anime_id}")

    def get_recommended_anime(self, anime_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching recommended anime for anime ID: {anime_id}")
        return self._make_request(f"/api/recommendations/{anime_id}")

    def get_character_details(self, character_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching details for character ID: {character_id}")
        return self._make_request(f"/api/character/{character_id}")

    def get_voice_actor_details(self, actor_id: str) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching details for voice actor ID: {actor_id}")
        return self._make_request(f"/api/actors/{actor_id}")

    def get_qtip_info(self, qtip_id: int) -> tuple[dict, int]:
        logger.info(f"AnimeAPIService: Fetching Qtip info for ID: {qtip_id}")
        return self._make_request(f"/api/qtip/{qtip_id}")

--- FILE_END: ./backend/services/anime_api_service.py ---

--- FILE_START: ./backend/services/one_piece_api_service.py ---
# backend/services/one_piece_api_service.py
import requests
import logging
from typing import List, Dict, Any, Optional, Tuple

from config import Config

logger = logging.getLogger(__name__)

class OnePieceAPIService:
    """
    Service to interact with the One Piece API.
    """
    def __init__(self):
        self.base_url = Config.ONE_PIECE_API_BASE_URL
        logger.info(f"OnePieceAPIService: Initialized with base URL: {self.base_url}")

    def _make_request(self, endpoint: str) -> Tuple[Optional[List[Dict[str, Any]]], int]:
        """
        Helper method to make a GET request to the One Piece API.
        Args:
            endpoint (str): The API endpoint (e.g., "/sagas/en").
        Returns:
            Tuple[Optional[List[Dict[str, Any]]], int]: A tuple containing a list of dictionaries
            (data) or None if an error occurred, and the HTTP status code.
        """
        url = f"{self.base_url}{endpoint}"
        logger.debug(f"OnePieceAPIService: Making request to {url}")
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)
            data = response.json()
            if not isinstance(data, list):
                logger.warning(f"OnePieceAPIService: Unexpected response format for {url}. Expected a list, got {type(data)}.")
                return None, 500
            logger.debug(f"OnePieceAPIService: Successfully fetched data from {url}")
            return data, response.status_code
        except requests.exceptions.Timeout:
            logger.error(f"OnePieceAPIService: Request to {url} timed out.")
            return None, 408 # Request Timeout
        except requests.exceptions.ConnectionError as e:
            logger.error(f"OnePieceAPIService: Connection error to {url}: {e}")
            return None, 503 # Service Unavailable
        except requests.exceptions.HTTPError as e:
            logger.error(f"OnePieceAPIService: HTTP error from {url}: {e.response.status_code} - {e.response.text}")
            return None, e.response.status_code
        except Exception as e:
            logger.error(f"OnePieceAPIService: An unexpected error occurred while fetching from {url}: {e}")
            return None, 500

    def get_sagas(self) -> Tuple[Optional[List[Dict[str, Any]]], int]:
        """
        Fetches all One Piece sagas.
        Returns:
            Tuple[Optional[List[Dict[str, Any]]], int]: A tuple containing a list of saga dictionaries
            or None, and the HTTP status code.
        """
        logger.info("OnePieceAPIService: Fetching One Piece sagas...")
        return self._make_request("/sagas/en")

    def get_characters(self) -> Tuple[Optional[List[Dict[str, Any]]], int]:
        """
        Fetches all One Piece characters.
        Returns:
            Tuple[Optional[List[Dict[str, Any]]], int]: A tuple containing a list of character dictionaries
            or None, and the HTTP status code.
        """
        logger.info("OnePieceAPIService: Fetching One Piece characters...")
        return self._make_request("/characters/en")

    def get_fruits(self) -> Tuple[Optional[List[Dict[str, Any]]], int]:
        """
        Fetches all One Piece devil fruits.
        Returns:
            Tuple[Optional[List[Dict[str, Any]]], int]: A tuple containing a list of fruit dictionaries
            or None, and the HTTP status code.
        """
        logger.info("OnePieceAPIService: Fetching One Piece fruits...")
        return self._make_request("/fruits/en")

--- FILE_END: ./backend/services/one_piece_api_service.py ---

--- FILE_START: ./backend/services/data_embedding_service.py ---
# backend/services/data_embedding_service.py
import logging
import time
from typing import List, Dict, Any, Tuple, Optional # Ensure Optional is imported

# Import services that fetch raw data
from services.one_piece_api_service import OnePieceAPIService
from controllers.news_controller import NewsController
from controllers.aniwatch_controller import AniwatchController
from services.anime_api_service import AnimeAPIService # Ensure this is correctly imported

logger = logging.getLogger(__name__)

class DataEmbeddingService:
    """
    Handles the process of fetching data from various sources,
    transforming it into suitable text format, and embedding it
    into the vector store.
    """

    def __init__(self, vector_store, embedder, anime_api_service: AnimeAPIService): # Make sure anime_api_service is expected here
        self.vector_store = vector_store
        self.embedder = embedder
        self.one_piece_api_service = OnePieceAPIService()
        self.news_controller = NewsController()
        self.aniwatch_controller = AniwatchController()
        self.anime_api_service = anime_api_service # This line is critical: ensure the passed service is assigned
        logger.debug("DataEmbeddingService: Initialized.")

    def embed_text_data(self, content: str, metadata: Dict[str, Any], source_item_id: Optional[str] = None):
        """Embeds a single piece of text content with its metadata."""
        try:
            # Check for existing document by source_item_id if p...
            # Ensure content is a string
            if not isinstance(content, str):
                content = str(content) # Convert to string if it's not already

            # Check if an item with this source_item_id already exists
            if source_item_id:
                existing_doc = self.vector_store.get_document_by_source_id(source_item_id)
                if existing_doc:
                    # Optionally, you could compare content/metadata and update if changed
                    # For now, we'll just skip re-embedding if it exists
                    logger.debug(f"Skipping embedding for existing document: {source_item_id}")
                    return True # Indicate successful processing (skipped)

            embedding = self.embedder.embed_text(content)
            if embedding:
                self.vector_store.add_document(content, embedding, metadata, source_item_id)
                return True
            else:
                logger.warning(f"Failed to generate embedding for content (first 50 chars): '{content[:50]}'")
                return False
        except Exception as e:
            logger.error(f"Error embedding data: {e}", exc_info=True)
            return False

    def embed_one_piece_data(self):
        logger.info("DataEmbeddingService: Starting One Piece data embedding...")
        processed_count = 0
        failed_count = 0
        try:
            # Fetch all characters - CORRECTED METHOD NAME
            characters_data, status_code = self.one_piece_api_service.get_characters()
            if status_code == 200 and characters_data:
                for char in characters_data:
                    character_id = char.get('id')
                    character_name = char.get('name')
                    description = char.get('description', '')
                    if character_name and character_id and description:
                        content = f"Character: {character_name}. Description: {description}"
                        metadata = {
                            "source": "One Piece API",
                            "type": "character",
                            "name": character_name,
                            "op_id": character_id
                        }
                        if self.embed_text_data(content, metadata, f"one_piece_char_{character_id}"):
                            processed_count += 1
                        else:
                            failed_count += 1
                    else:
                        logger.warning(f"Skipping One Piece character due to missing data: {char.get('name')} (ID: {char.get('id')})")
                        failed_count += 1
            else:
                logger.error(f"Failed to fetch One Piece characters: Status {status_code}, Data: {characters_data}")
                # If API call fails, consider all potential items as failed for reporting
                failed_count += (len(characters_data) if characters_data else 0)

            # Fetch all devil fruits - CORRECTED METHOD NAME
            devil_fruits_data, status_code = self.one_piece_api_service.get_devil_fruits()
            if status_code == 200 and devil_fruits_data:
                for df in devil_fruits_data:
                    df_id = df.get('id')
                    df_name = df.get('name')
                    description = df.get('description', '')
                    ability = df.get('ability', '')
                    if df_name and df_id and (description or ability):
                        content = f"Devil Fruit: {df_name}. Description: {description}. Ability: {ability}"
                        metadata = {
                            "source": "One Piece API",
                            "type": "devil_fruit",
                            "name": df_name,
                            "op_id": df_id
                        }
                        if self.embed_text_data(content, metadata, f"one_piece_df_{df_id}"):
                            processed_count += 1
                        else:
                            failed_count += 1
                    else:
                        logger.warning(f"Skipping One Piece Devil Fruit due to missing data: {df.get('name')} (ID: {df.get('id')})")
                        failed_count += 1
            else:
                logger.error(f"Failed to fetch One Piece devil fruits: Status {status_code}, Data: {devil_fruits_data}")
                failed_count += (len(devil_fruits_data) if devil_fruits_data else 0)

            # Fetch all crews - CORRECTED METHOD NAME
            crews_data, status_code = self.one_piece_api_service.get_crews()
            if status_code == 200 and crews_data:
                for crew in crews_data:
                    crew_id = crew.get('id')
                    crew_name = crew.get('name')
                    description = crew.get('description', '')
                    if crew_name and crew_id and description:
                        content = f"Crew: {crew_name}. Description: {description}"
                        metadata = {
                            "source": "One Piece API",
                            "type": "crew",
                            "name": crew_name,
                            "op_id": crew_id
                        }
                        if self.embed_text_data(content, metadata, f"one_piece_crew_{crew_id}"):
                            processed_count += 1
                        else:
                            failed_count += 1
                    else:
                        logger.warning(f"Skipping One Piece crew due to missing data: {crew.get('name')} (ID: {crew.get('id')})")
                        failed_count += 1
            else:
                logger.error(f"Failed to fetch One Piece crews: Status {status_code}, Data: {crews_data}")
                failed_count += (len(crews_data) if crews_data else 0)

            # Fetch all islands - CORRECTED METHOD NAME
            islands_data, status_code = self.one_piece_api_service.get_islands()
            if status_code == 200 and islands_data:
                for island in islands_data:
                    island_id = island.get('id')
                    island_name = island.get('name')
                    description = island.get('description', '')
                    if island_name and island_id and description:
                        content = f"Island: {island_name}. Description: {description}"
                        metadata = {
                            "source": "One Piece API",
                            "type": "island",
                            "name": island_name,
                            "op_id": island_id
                        }
                        if self.embed_text_data(content, metadata, f"one_piece_island_{island_id}"):
                            processed_count += 1
                        else:
                            failed_count += 1
                    else:
                        logger.warning(f"Skipping One Piece island due to missing data: {island.get('name')} (ID: {island.get('id')})")
                        failed_count += 1
            else:
                logger.error(f"Failed to fetch One Piece islands: Status {status_code}, Data: {islands_data}")
                failed_count += (len(islands_data) if islands_data else 0)

        except Exception as e:
            logger.error(f"DataEmbeddingService: Error during One Piece data embedding: {e}", exc_info=True)
            # Cannot determine exact count if a broad error occurs, log and reset
            processed_count = 0
            failed_count = 0
        finally:
            logger.info(f"DataEmbeddingService: Finished One Piece data embedding. Processed {processed_count} items, Failed: {failed_count}.")

    def embed_ann_details_data(self, limit: int = 100):
        """
        Fetches recent ANN encyclopedia articles (reports) and embeds their details.
        """
        logger.info(f"DataEmbeddingService: Starting ANN data embedding with limit={limit}...")
        processed_total = 0
        failed_total = 0
        try:
            # CORRECTED: Call the right method and expect a list of dictionaries
            ann_articles, status_code = self.news_controller.get_recent_news_articles(limit=limit)

            if status_code == 200 and isinstance(ann_articles, list) and ann_articles:
                for article in ann_articles:
                    item_id = article.get('id')
                    item_type = article.get('type', 'news_item') # Default type

                    # Make content generation more robust for ANN items
                    content = article.get('title', '') # Primary source of text
                    if not content: # Fallback if 'title' is empty
                        content = f"{article.get('type', 'Item')} (ID: {item_id or 'N/A'})"
                        if article.get('name'): # Use 'name' if 'title' is empty and 'name' exists
                             content = article.get('name')
                        if article.get('vintage'):
                            content += f" from {article['vintage']}"

                    if content and item_id is not None: # Ensure content is not empty and ID exists
                        metadata = {
                            "source": "ANN News",
                            "ann_id": item_id,
                            "type": item_type,
                            "title": article.get('title'),
                            "url": article.get('url'),
                            "release_date": article.get('date'),
                            "creator": article.get('creator'),
                            "thumbnail": article.get('thumbnail')
                        }
                        if self.embed_text_data(content, metadata, f"ann_{item_id}"):
                            processed_total += 1
                        else:
                            failed_total += 1
                    else:
                        logger.warning(f"DataEmbeddingService: Skipping ANN item due to missing content or ID: {article.get('title', 'N/A')} (ID: {item_id})")
                        failed_total += 1
            elif status_code != 200:
                logger.error(f"DataEmbeddingService: Failed to fetch ANN news articles. Status: {status_code}, Error: {ann_articles.get('error', 'Unknown error')}")
                failed_total += limit # Account for all potential failures if API call itself failed
            else:
                logger.info("DataEmbeddingService: No ANN news articles returned or data format incorrect.")
        except Exception as e:
            logger.error(f"DataEmbeddingService: Error during ANN data embedding: {e}", exc_info=True)
            failed_total += limit # Assume all failed if a general exception occurs
        finally:
            logger.info(f"DataEmbeddingService: Finished ANN data embedding. Processed {processed_total} items, Failed: {failed_total}.")

    def embed_aniwatch_data(self, limit: int = 100, page_limit: int = 5):
        """
        Fetches recent Aniwatch (streaming site) data and embeds it.
        This focuses on popular recent anime from Aniwatch.
        """
        logger.info(f"DataEmbeddingService: Starting Aniwatch data embedding with limit={limit}, page_limit={page_limit}...")
        processed_total = 0
        failed_total = 0
        try:
            # AniwatchController.get_recent_episodes returns a tuple (data, status_code)
            # data is expected to be a list of episode dictionaries
            recent_episodes_data, status_code = self.aniwatch_controller.get_recent_episodes(limit=limit, page_limit=page_limit)

            if status_code == 200 and isinstance(recent_episodes_data, list) and recent_episodes_data:
                for episode in recent_episodes_data:
                    anime_id = episode.get('animeId')
                    episode_number = episode.get('episodeNum')
                    title = episode.get('animeTitle', 'No Title')
                    type_ = episode.get('type', 'Episode')

                    content = f"{type_}: {title} Episode {episode_number}. {episode.get('synopsis', '')}"
                    source_item_id = f"aniwatch_episode_{anime_id}_{episode_number}"

                    if content and anime_id and episode_number:
                        metadata = {
                            "source": "Aniwatch",
                            "type": type_,
                            "aniwatch_anime_id": anime_id,
                            "episode_number": episode_number,
                            "title": title,
                            "release_date": episode.get('releasedDate')
                        }
                        if self.embed_text_data(content, metadata, source_item_id):
                            processed_total += 1
                        else:
                            failed_total += 1
                    else:
                        logger.warning(f"DataEmbeddingService: Skipping Aniwatch episode due to missing content or ID: {title} (ID: {anime_id})")
                        failed_total += 1
            elif status_code != 200:
                logger.error(f"DataEmbeddingService: Failed to fetch Aniwatch data. Status: {status_code}, Error: {recent_episodes_data.get('error', 'Unknown error')}")
                failed_total += (limit * page_limit) # Account for all potential failures if API call itself failed
            else:
                logger.info("DataEmbeddingService: No Aniwatch data returned or data format incorrect.")
        except Exception as e:
            logger.error(f"DataEmbeddingService: Error during Aniwatch data embedding: {e}", exc_info=True)
            failed_total += (limit * page_limit) # Assume all failed if a general exception occurs
        finally:
            logger.info(f"DataEmbeddingService: Finished Aniwatch data embedding. Processed {processed_total} items, Failed: {failed_total}.")


    def embed_anime_api_data(self, limit: int = 100):
        """
        Fetches and embeds general anime data (top ten, top search, spotlights, trending)
        from the new Node.js anime-api.
        """
        logger.info(f"DataEmbeddingService: Starting Anime API general data embedding with limit={limit}...")
        processed_total = 0
        failed_total = 0
        try:
            # Home page data (spotlights, trending)
            home_data, status_code = self.anime_api_service.get_home_info()
            if status_code == 200 and home_data and home_data.get('success') and 'results' in home_data:
                # Iterate through expected lists within 'results'
                for section_name in ['spotlights', 'trending', 'topAiring', 'mostPopular', 'mostFavorite', 'latestCompleted', 'latestEpisode']:
                    for item in home_data['results'].get(section_name, []):
                        anime_id = item.get('id')
                        title = item.get('title')
                        synopsis = item.get('description', '') # Use 'description' from API response as synopsis

                        content = f"Anime ({section_name}): {title}. Synopsis: {synopsis}"
                        if content and anime_id:
                            metadata = {
                                "source": "Anime API",
                                "type": f"home_page_anime_{section_name}",
                                "anime_id": anime_id,
                                "title": title,
                                "section": section_name
                            }
                            if self.embed_text_data(content, metadata, f"anime_api_home_{section_name}_{anime_id}"):
                                processed_total += 1
                            else:
                                failed_total += 1
                        else:
                            logger.warning(f"DataEmbeddingService: Skipping Anime API home item ({section_name}) due to missing content or ID: {title} (ID: {anime_id})")
                            failed_total += 1
            else:
                logger.error(f"DataEmbeddingService: Failed to fetch Anime API home data: Status {status_code}, Data: {home_data}")
                failed_total += limit # Estimate failure count

            # Top Ten Anime
            top_ten_data, status_code = self.anime_api_service.get_top_ten_anime()
            if status_code == 200 and top_ten_data and top_ten_data.get('success') and 'results' in top_ten_data and 'topTen' in top_ten_data['results']:
                # Top Ten has nested 'today', 'week', 'month' lists
                for period in ['today', 'week', 'month']:
                    for item in top_ten_data['results']['topTen'].get(period, []):
                        anime_id = item.get('id')
                        title = item.get('name') # Top Ten uses 'name' instead of 'title'
                        # No direct synopsis in Top Ten items, use name/type
                        content = f"Top 10 Anime ({period}): {title} (Type: {item.get('showType', 'N/A')})"
                        if content and anime_id:
                            metadata = {
                                "source": "Anime API",
                                "type": f"top_ten_anime_{period}",
                                "anime_id": anime_id,
                                "title": title,
                                "period": period
                            }
                            if self.embed_text_data(content, metadata, f"anime_api_topten_{period}_{anime_id}"):
                                processed_total += 1
                            else:
                                failed_total += 1
                        else:
                            logger.warning(f"DataEmbeddingService: Skipping Anime API top ten item ({period}) due to missing content or ID: {title} (ID: {anime_id})")
                            failed_total += 1
            else:
                logger.error(f"DataEmbeddingService: Failed to fetch Anime API top ten data: Status {status_code}, Data: {top_ten_data}")
                failed_total += limit # Estimate failure count

            # Top Search Anime
            top_search_data, status_code = self.anime_api_service.get_top_search_anime(limit=limit)
            if status_code == 200 and top_search_data and top_search_data.get('success') and 'results' in top_search_data:
                for item in top_search_data['results']: # 'results' is directly a list of items here
                    anime_id = item.get('id')
                    title = item.get('title')
                    synopsis = item.get('description', '') # Use 'description' from API response as synopsis
                    content = f"Top Search Anime: {title}. Synopsis: {synopsis}"
                    if content and anime_id:
                        metadata = {
                            "source": "Anime API",
                            "type": "top_search_anime",
                            "anime_id": anime_id,
                            "title": title
                        }
                        if self.embed_text_data(content, metadata, f"anime_api_topsearch_{anime_id}"):
                            processed_total += 1
                        else:
                            failed_total += 1
                    else:
                        logger.warning(f"DataEmbeddingService: Skipping Anime API top search item due to missing content or ID: {title} (ID: {anime_id})")
                        failed_total += 1
            else:
                logger.error(f"DataEmbeddingService: Failed to fetch Anime API top search data: Status {status_code}, Data: {top_search_data}")
                failed_total += limit # Estimate failure count

        except Exception as e:
            logger.error(f"DataEmbeddingService: Error during Anime API general data embedding: {e}", exc_info=True)
            processed_total = 0 # Reset counts on broad error
            failed_total = 0
        finally:
            logger.info(f"DataEmbeddingService: Finished Anime API general data embedding. Processed {processed_total} items, Failed: {failed_total}.")


    def embed_anime_api_category_data(self, categories: List[str], limit_per_category: int = 50):
        """
        Fetches and embeds anime data for specific categories from the Node.js anime-api.
        """
        logger.info(f"DataEmbeddingService: Starting Anime API category data embedding for categories: {categories} with limit_per_category={limit_per_category}...")
        processed_total = 0
        failed_total = 0

        for category in categories:
            logger.debug(f"DataEmbeddingService: Fetching data for category: {category}")
            try:
                # Assuming get_anime_by_category returns a dictionary with 'results' key
                category_data, status_code = self.anime_api_service.get_anime_by_category(category, limit=limit_per_category)

                if status_code == 200 and category_data and category_data.get('success') and 'results' in category_data:
                    # CORRECTED: Iterate over 'data' list within 'results'
                    for item in category_data['results'].get('data', []):
                        anime_id = item.get('id')
                        title = item.get('title')
                        synopsis = item.get('description', '') # Use 'description' from API response as synopsis

                        content = f"Anime in category '{category}': {title}. Synopsis: {synopsis}"
                        if content and anime_id:
                            metadata = {
                                "source": "Anime API",
                                "type": "category_anime",
                                "anime_id": anime_id,
                                "title": title,
                                "category": category
                            }
                            if self.embed_text_data(content, metadata, f"anime_api_category_{category}_{anime_id}"):
                                processed_total += 1
                            else:
                                failed_total += 1
                        else:
                            logger.warning(f"DataEmbeddingService: Skipping Anime API category item due to missing content or ID: {title} (ID: {anime_id})")
                            failed_total += 1
                elif status_code != 200:
                    logger.error(f"DataEmbeddingService: Failed to fetch Anime API category '{category}' data. Status: {status_code}, Error: {category_data.get('error', 'Unknown error')}")
                    failed_total += limit_per_category # Estimate failures
                else:
                    logger.info(f"DataEmbeddingService: No data returned for Anime API category: {category}")
            except Exception as e:
                logger.error(f"DataEmbeddingService: Error fetching/embedding data for category '{category}': {e}", exc_info=True)
                failed_total += limit_per_category # Estimate failures

        logger.info(f"DataEmbeddingService: Finished Anime API category data embedding. Processed {processed_total}, Failed: {failed_total}.")
        return processed_total, failed_total


    def embed_all_data(self):
        """Orchestrates the embedding of data from all configured sources."""
        logger.debug("DataEmbeddingService: Starting embedding of all data...")

        # VectorStore's load method handles persistence, new data will be appended
        logger.info("VectorStore: Existing documents retained. Appending new data.")

        self.embed_one_piece_data()
        # This now calls the correctly named method and handles its output
        self.embed_ann_details_data(limit=100)
        # Ignoring Aniwatch as per your instruction
        # self.embed_aniwatch_data(limit=100, page_limit=5)
        self.embed_anime_api_data(limit=100)

        common_categories = [\
            "top-airing", "most-popular", "completed", "movie", "tv",
            "genre/action", "genre/comedy", "producer/ufotable", "genre/fantasy", "genre/adventure",
            "genre/sci-fi", "genre/drama", "genre/slice-of-life", "genre/thriller",
            "genre/supernatural", "genre/romance", "genre/mystery"
        ]
        self.embed_anime_api_category_data(categories=common_categories, limit_per_category=50)

        # After embedding, save the updated vector store
        self.vector_store.save()
        logger.info("DataEmbeddingService: All data embedding complete. Vector store saved.")

--- FILE_END: ./backend/services/data_embedding_service.py ---

--- FILE_START: ./README.md ---
# Clank Clank Mushi

Hey there! This is "Clank Clank Mushi," a little project I'm working on just for myself. It's like having your own personal AI helper for all things anime.

---

### What It Is

So, you know how sometimes you want to catch up on anime news or just learn more about your favorite shows? That's what "Clank Clank Mushi" helps with. It's a website that lives on your computer.

It brings you the latest anime news. But here's the cool part: it has a smart AI built right in. You can ask it questions about anything anime-related, even if it's not directly in the news article you're reading.

---

### What It Does For You

* **Gets the News:** First off, it finds and shows you the newest anime news stories. Easy to see what's happening.

* **Chat with the AI (The "Whispering Snail"):** See that little snail button? Click it! A chat box pops up. You can type almost anything you want to know. Like, "Can you sum up this news article?" or "What if Character X fought Character Y?" The AI will try its best to answer you.

* **Gets You Thinking (Little "Thought Bubbles"):** Sometimes, you might not have a question ready. No problem! When you're looking at a news story, or even just the main news page, the app will show you a few little "thought bubbles" with questions you might like to ask. Just click one, and the AI will answer it for you. It's like a friendly nudge.

* **Explains Stuff (The "Lore Navigator"):** Ever read a news story and see a word or name you don't recognize, maybe from a show you haven't watched yet? You can highlight that word. The app will then use its AI to quickly tell you what it means. It's like having a super fast dictionary for anime lore right there. It can even show you other news or info related to that word.

* **Finds What's Hot (The "Trendspotter"):** Want to know what everyone's buzzing about in the anime world? The app's AI can look at lots of news and tell you what people are generally feeling about new shows or big announcements. It can even give you some ideas about what kind of anime might be popular in the future.

* **Helps with Debates (The "Debate Arena"):** Ever wonder, "Who would win in a fight between these two characters?" or "What's the best theory about this plot twist?" You can ask the AI. It will give you a balanced look at different ideas, pulling from what it knows about the anime world. It helps you think things through without arguing with anyone!

---

### How to Use It (On Your Computer)

This app is for your own use, and it runs on your computer. Here's the simple version:

1.  **Start it up:** You'll open something called a "terminal" or "command prompt" on your computer. You'll type a simple command there to get the app running.
2.  **Open your web browser:** After the app starts, you'll open your internet browser (like Chrome, Firefox, Safari) and go to a special address: `http://localhost:8001`. That's where the app lives on your computer.
3.  **Explore the news:** Once it's open, you'll see the latest anime news. Click on any headline to read the full story.
4.  **Chat with the AI:** Look for the snail icon. Click it to open the chat. Type your questions there.
5.  **Get suggestions:** Just look for the little bubbles next to articles or on the main page. Click them to learn more.
6.  **Highlight for info:** If you see something you don't know, just highlight it with your mouse, and an option will pop up to ask the AI.

That's it! It's designed to be pretty easy to use once it's up and running.

---

I hope this roadmap and these `README.md` files give us a fantastic foundation to start building, Oriel! Let me know if you want to adjust anything or if you're ready to dive into the first bits of code.

--- FILE_END: ./README.md ---

--- FILE_START: ./.gitignore ---
# Python virtual environment
venv/
.venv/
__pycache__/

# Node.js dependencies
mushi-frontend/node_modules/
mushi-frontend/package-lock.json

# Other common ignores
*.pyc
.DS_Store
.env # If you have a .env file, you usually don't want to commit it

# Backend specific ignores that might have been in backend/.gitignore
# e.g., if you have any database files or logs
vector_db.pkl.gz
*.log

--- FILE_END: ./.gitignore ---

